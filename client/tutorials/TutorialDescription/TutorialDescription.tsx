import React, { useState } from 'react';
import { connect, ConnectedProps } from 'react-redux';
import List from '~/components/List';
import Login from '~/components/login';
import { RootState } from '~/redux/root.reducer';
import { startedTutorial } from '~/redux/user/user.actions';
import TutorialService from '~/services/api/Tutorial.service';
import StartTutorialForm from './StartTutorialForm/StartTutorialForm';

interface Props {
  tutorialId: string;
  tutorialName: string;
}

const TutorialDescription = ({
  tutorialId, tutorialName, isLoggedIn, dispatch,
}: Props & ConnectedProps<typeof connector>) => {
  const [error, setError] = useState<string>(null);
  const [isStarting, setIsStarting] = useState(false);

  const startTutorial = async () => {
    setIsStarting(true);
    try {
      await TutorialService.startTutorial(tutorialId);
      dispatch(startedTutorial(tutorialId));
    } catch (err) {
      console.error('TutorialDescription.startTutorial', err);
      setError(err.message ?? 'Nu am reuÈ™it sÄƒ Ã®ncepem tutorialul. ÃŽncearcÄƒ din nou');
    } finally {
      setIsStarting(false);
    }
  };

  return (
    <section className="d-flex flex-column justify-content-between pb-5">
      <div style={{ marginBottom: '5em' }} className="font-light">
        <p className="text-2xl mb-0 text-bold">
          Hey ðŸ‘‹,
        </p>
        <p className="font-light">
          È˜i felicitÄƒri pentru cÄƒ vrei sÄƒ Ã®ncepi
          {' '}
          {tutorialName}
          !
        </p>
        <p>
          Acest tutorial este un efort comun: tu
          {' '}
          <span className="text-bold">
            citeÈ™ti lecÈ›iile È™i
            rezolvi exerciÈ›iile
          </span>
          , iar noi le
          {' '}
          <span className="text-bold">
            verificÄƒm È™i-È›i dÄƒm feedback de
            Ã®mbunÄƒtÄƒÈ›ire
          </span>
          .
        </p>
        <p>
          Spre deosebire de alte tutoriale, vom fi stricÈ›i cu tine
          È™i-È›i vom aproba o soluÈ›ie doar cÃ¢nd
          {' '}
          <span className="text-bold">respectÄƒ cele mai Ã®nalte standarde</span>
          .
          Ne dorim sÄƒ lucrÄƒm cu studenÈ›i determinaÈ›i, ce-È™i doresc cu adevÄƒrat
          sÄƒ Ã®nveÈ›e FrontEnd È™i care nu vor renunÈ›a uÈ™or la acest tutorial.
        </p>
        {/*
          TEMPORARILY COMMENTING THE PART BELOW
          BECAUSE WE DON'T HAVE THE FEATURE REGARDING 7 DAYS OF
          INACTIVITY
        */}
        {/* <p>
          AÈ™adar, pentru a ne asigura cÄƒ amÃ¢ndoi vom avea o experienÈ›Äƒ de succes,
          am adÄƒugat urmÄƒtoarele:
        </p>
        <List variant="checkmark">
          <li className="mb-2">
            Vei primi notificare prin email de fiecare daca cand
            iti dam feedback la un exercitiu
          </li>
          <li className="mb-2">
            Daca esti inactiv pentru mai mult de 7 zile, vei pierde accesul la tutorial
          </li>
        </List> */}
        <p className="mt-8">
          DacÄƒ eÈ™ti de acord, atunci hai sÄƒ trecem la treabÄƒ!
        </p>
      </div>
      {isLoggedIn ? (
        <StartTutorialForm
          error={error}
          isStarting={isStarting}
          onSubmit={() => { startTutorial(); }}
        />
      ) : (
        <Login
          mode="register"
          onSuccess={(user) => {
            if (!user.tutorials.includes(tutorialId)) {
              startTutorial();
            }
          }}
          optionalTerms={[{
            name: 'startTutorial',
            description: 'Am citit È™i sunt de acord sÄƒ Ã®ncep tutorialul',
          }]}
        />
      )}
    </section>
  );
};

function mapStateToProps(state: RootState) {
  return {
    isLoggedIn: !!state.user?.info,
  };
}

const connector = connect(mapStateToProps);

export default connector(TutorialDescription);
