{"ast":null,"code":"import _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\TableOfContents\\\\TableOfContents.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/interactive-supports-focus */\nimport React from 'react';\nimport Link from 'next/link';\nimport styles from './TableOfContents.module.scss';\nvar SCROLL_DURATION = 2000;\n\nvar TableOfContents = /*#__PURE__*/function (_React$Component) {\n  _inherits(TableOfContents, _React$Component);\n\n  var _super = _createSuper(TableOfContents);\n\n  function TableOfContents(props) {\n    var _this;\n\n    _classCallCheck(this, TableOfContents);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"observer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"timeoutId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"observeAll\", function () {\n      var chapters = _this.props.chapters;\n      /**  Target the elements to be observed */\n\n      chapters.forEach(function (item) {\n        var chapterId = document.getElementById(item.id);\n\n        if (chapterId !== null) {\n          _this.observer.observe(chapterId);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeNav\", function (entries) {\n      var activeChapterId = _this.state.activeChapterId;\n      entries.some(function (entry) {\n        if (entry.intersectionRatio <= 0.5) {\n          return false;\n        }\n\n        if (entry.target.id !== activeChapterId) {\n          /**\r\n           * Using the NextRouter `replace` method is buggy on Firefox, triggering\r\n           * a scroll when it intersects an element.\r\n           *\r\n           * This is reproducing only when using a Mouse, not the touchpad on laptop.\r\n           */\n          window.history.replaceState(null, '', \"\".concat(window.location.pathname, \"#\").concat(entry.target.id));\n\n          _this.refreshActiveChapter();\n        }\n\n        return true;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollToItem\", function (id) {\n      var onChapterClick = _this.props.onChapterClick;\n      var itemToScroll = document.getElementById(id);\n\n      if (itemToScroll === null) {\n        console.warn(\"TableOfContents: expected to find element with id=\".concat(id, \" to scroll to\"));\n      }\n      /**\r\n       * Clickin on a link scrolls to that element.\r\n       * However, since we already have an active InsersectionObserver we may\r\n       * get racing conditions which mess up the correctly highlighted/scrolled element.\r\n       *\r\n       * To fix this we're disabling the observer while the scroll is in progress,\r\n       * and then re'attaching it. A proper solution would need us to know when\r\n       * the scroll has ended. We could add a `scroll` event on document but that\r\n       * wouldn't work if the article is rendered in just a part of the page.\r\n       *\r\n       * So, our solution was to \"guess\" how long it would take to scroll, and use a timeout.\r\n       */\n\n\n      _this.observer.disconnect();\n\n      clearTimeout(_this.timeoutId);\n      _this.timeoutId = setTimeout(_this.observeAll, SCROLL_DURATION);\n\n      _this.setState({\n        activeChapterId: id\n      });\n\n      if (onChapterClick) {\n        onChapterClick(id);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"refreshActiveChapter\", function () {\n      var chapters = _this.props.chapters;\n      var match = chapters.find(function (chapter) {\n        return window.location.href.includes(chapter.href);\n      });\n\n      if (match !== undefined) {\n        _this.setState({\n          activeChapterId: match.id\n        });\n      }\n    });\n\n    _this.state = {\n      activeChapterId: null\n    };\n    return _this;\n  }\n\n  _createClass(TableOfContents, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var options = {\n        threshold: 0.5\n      };\n      this.refreshActiveChapter();\n      this.observer = new IntersectionObserver(this.changeNav, options);\n      this.timeoutId = setTimeout(this.observeAll, SCROLL_DURATION);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var chapters = this.props.chapters;\n\n      if (chapters !== prevProps.chapters) {\n        this.refreshActiveChapter();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.observer.disconnect();\n      clearTimeout(this.timeoutId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var chapters = this.props.chapters;\n      var activeChapterId = this.state.activeChapterId;\n      return __jsx(\"nav\", {\n        className: styles.tableOfContents,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }\n      }, __jsx(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }\n      }, chapters.map(function (item) {\n        return __jsx(\"li\", {\n          key: item.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }\n        }, __jsx(Link, {\n          href: item.href,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }\n        }, __jsx(\"a\", {\n          role: \"button\",\n          onClick: function onClick() {\n            return _this2.scrollToItem(item.id);\n          },\n          className: activeChapterId === item.id ? \"\".concat(styles.active, \" text-bold\") : 'text-bold',\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }\n        }, item.title)));\n      })));\n    }\n  }]);\n\n  return TableOfContents;\n}(React.Component);\n\nexport default TableOfContents;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/TableOfContents/TableOfContents.tsx"],"names":["React","Link","styles","SCROLL_DURATION","TableOfContents","props","chapters","forEach","item","chapterId","document","getElementById","id","observer","observe","entries","activeChapterId","state","some","entry","intersectionRatio","target","window","history","replaceState","location","pathname","refreshActiveChapter","onChapterClick","itemToScroll","console","warn","disconnect","clearTimeout","timeoutId","setTimeout","observeAll","setState","match","find","chapter","href","includes","undefined","options","threshold","IntersectionObserver","changeNav","prevProps","tableOfContents","map","scrollToItem","active","title","Component"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/interactive-supports-focus */\r\n\r\nimport React from 'react';\r\nimport Link from 'next/link';\r\nimport styles from './TableOfContents.module.scss';\r\n\r\ninterface State {\r\n  activeChapterId: string;\r\n}\r\n\r\ninterface Props {\r\n  chapters: Chapter[];\r\n  onChapterClick?: (id: string) => void\r\n}\r\n\r\nexport interface Chapter {\r\n  id: string;\r\n  title: string;\r\n  href: string;\r\n}\r\n\r\nconst SCROLL_DURATION = 2000;\r\n\r\nclass TableOfContents extends React.Component<Props, State> {\r\n  private observer: IntersectionObserver;\r\n\r\n  private timeoutId: any;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { activeChapterId: null };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const options = {\r\n      threshold: 0.5,\r\n    };\r\n\r\n    this.refreshActiveChapter();\r\n\r\n    this.observer = new IntersectionObserver(this.changeNav, options);\r\n    this.timeoutId = setTimeout(this.observeAll, SCROLL_DURATION);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { chapters } = this.props;\r\n    if (chapters !== prevProps.chapters) {\r\n      this.refreshActiveChapter();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.observer.disconnect();\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  observeAll = () => {\r\n    const { chapters } = this.props;\r\n\r\n    /**  Target the elements to be observed */\r\n    chapters.forEach((item) => {\r\n      const chapterId = document.getElementById(item.id);\r\n      if (chapterId !== null) {\r\n        this.observer.observe(chapterId);\r\n      }\r\n    });\r\n  };\r\n\r\n  changeNav = (entries) => {\r\n    const { activeChapterId } = this.state;\r\n    entries.some((entry) => {\r\n      if (entry.intersectionRatio <= 0.5) {\r\n        return false;\r\n      }\r\n\r\n      if (entry.target.id !== activeChapterId) {\r\n        /**\r\n         * Using the NextRouter `replace` method is buggy on Firefox, triggering\r\n         * a scroll when it intersects an element.\r\n         *\r\n         * This is reproducing only when using a Mouse, not the touchpad on laptop.\r\n         */\r\n        window.history.replaceState(null, '', `${window.location.pathname}#${entry.target.id}`);\r\n        this.refreshActiveChapter();\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  scrollToItem = (id) => {\r\n    const { onChapterClick } = this.props;\r\n\r\n    let itemToScroll = document.getElementById(id);\r\n    if (itemToScroll === null) {\r\n      console.warn(`TableOfContents: expected to find element with id=${id} to scroll to`);\r\n    }\r\n\r\n    /**\r\n     * Clickin on a link scrolls to that element.\r\n     * However, since we already have an active InsersectionObserver we may\r\n     * get racing conditions which mess up the correctly highlighted/scrolled element.\r\n     *\r\n     * To fix this we're disabling the observer while the scroll is in progress,\r\n     * and then re'attaching it. A proper solution would need us to know when\r\n     * the scroll has ended. We could add a `scroll` event on document but that\r\n     * wouldn't work if the article is rendered in just a part of the page.\r\n     *\r\n     * So, our solution was to \"guess\" how long it would take to scroll, and use a timeout.\r\n     */\r\n    this.observer.disconnect();\r\n\r\n    clearTimeout(this.timeoutId);\r\n    this.timeoutId = setTimeout(this.observeAll, SCROLL_DURATION);\r\n\r\n    this.setState({\r\n      activeChapterId: id,\r\n    });\r\n\r\n    if (onChapterClick) {\r\n      onChapterClick(id);\r\n    }\r\n  }\r\n\r\n  refreshActiveChapter = () => {\r\n    const { chapters } = this.props;\r\n\r\n    const match = chapters.find((chapter) => {\r\n      return window.location.href.includes(chapter.href);\r\n    });\r\n\r\n    if (match !== undefined) {\r\n      this.setState({\r\n        activeChapterId: match.id,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { chapters } = this.props;\r\n    const { activeChapterId } = this.state;\r\n\r\n    return (\r\n      <nav className={styles.tableOfContents}>\r\n        <ul>\r\n          {chapters.map((item) => (\r\n            <li\r\n              key={item.id}\r\n            >\r\n              <Link href={item.href}>\r\n                <a\r\n                  role=\"button\"\r\n                  onClick={() => this.scrollToItem(item.id)}\r\n                  className={activeChapterId === item.id ? `${styles.active} text-bold` : 'text-bold'}\r\n                >\r\n                  {item.title}\r\n                </a>\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default TableOfContents;\r\n"]},"metadata":{},"sourceType":"module"}