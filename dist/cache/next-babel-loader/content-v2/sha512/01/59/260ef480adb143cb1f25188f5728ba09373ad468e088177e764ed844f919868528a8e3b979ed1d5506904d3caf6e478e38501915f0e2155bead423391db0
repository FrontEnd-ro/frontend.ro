{"ast":null,"code":"import { uuid } from '~/services/Utils';\nimport { extractExtension } from '~/services/utils/FileUtils';\nimport { MAX_MEDIA_BYTES, MAX_MEDIA_MB } from '~/../shared/SharedConstants';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport ExerciseService from '~/services/Exercise.service';\nexport { default as NewExercise } from './NewExercise';\nexport { default as ViewOrEditExercise } from './ViewOrEditExercise';\nexport function uploadFiles(files, cursorPosition, currentBody, cb) {\n  let newMarkdown = currentBody;\n  let filesIgnored = 0; // due to size restrictions\n\n  const filesToUpload = {};\n  files.forEach(file => {\n    if (file.size > MAX_MEDIA_BYTES) {\n      filesIgnored += 1;\n      return;\n    }\n\n    console.log(file.size);\n    const fileName = `${uuid()}.${extractExtension(file.name)}`;\n    const objectURL = URL.createObjectURL(file);\n    const imgMarkdown = `![${file.name}](${objectURL})`;\n    filesToUpload[fileName] = {\n      file,\n      markdownToReplace: imgMarkdown\n    };\n    newMarkdown = `${newMarkdown.substring(0, cursorPosition)}${imgMarkdown}${newMarkdown.substring(cursorPosition)}`; // eslint-disable-next-line no-param-reassign\n\n    cursorPosition += imgMarkdown.length;\n  });\n\n  if (filesIgnored) {\n    SweetAlertService.toast({\n      type: 'info',\n      text: filesIgnored === 1 ? `Fișierul a fost ignorat căci nu se încadrează în limita de ${MAX_MEDIA_MB}MB` : `${filesIgnored} fișiere au fost ignorate căci nu se încadrează în limita de ${MAX_MEDIA_MB}MB`\n    });\n  }\n\n  cb(newMarkdown, filesToUpload);\n}\nexport async function uploadMedia(body, filesToUpload) {\n  // 1. Maybe some files were removed in the meantime -> double check they're stll here\n  Object.keys(filesToUpload).forEach(id => {\n    const {\n      markdownToReplace\n    } = filesToUpload[id];\n\n    if (body.indexOf(markdownToReplace) === -1) {\n      delete filesToUpload[id];\n    }\n  }); // 2. Upload to AWS\n\n  const results = await Promise.allSettled(Object.keys(filesToUpload).map(id => {\n    return ExerciseService.uploadMedia(id, filesToUpload[id].file);\n  }));\n  const fulfilledResults = results.filter(res => res.status === 'fulfilled').map(res => res.value);\n\n  if (results.length !== fulfilledResults.length) {\n    const filesIgnored = results.length - fulfilledResults.length;\n    SweetAlertService.toast({\n      type: 'info',\n      text: filesIgnored === 1 ? '1 fișisier nu a putut fi uploadat. Încearcă din nou' : `${filesIgnored} fișiere nu au putut fi uploadate. Încearcă din nou`\n    });\n  }\n\n  return fulfilledResults;\n}","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/create-view-edit-exercise/index.ts"],"names":["uuid","extractExtension","MAX_MEDIA_BYTES","MAX_MEDIA_MB","SweetAlertService","ExerciseService","default","NewExercise","ViewOrEditExercise","uploadFiles","files","cursorPosition","currentBody","cb","newMarkdown","filesIgnored","filesToUpload","forEach","file","size","console","log","fileName","name","objectURL","URL","createObjectURL","imgMarkdown","markdownToReplace","substring","length","toast","type","text","uploadMedia","body","Object","keys","id","indexOf","results","Promise","allSettled","map","fulfilledResults","filter","res","status","value"],"mappings":"AAAA,SAASA,IAAT,QAAqB,kBAArB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,6BAA9C;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AAEA,SAASC,OAAO,IAAIC,WAApB,QAAuC,eAAvC;AACA,SAASD,OAAO,IAAIE,kBAApB,QAA8C,sBAA9C;AAcA,OAAO,SAASC,WAAT,CACLC,KADK,EAELC,cAFK,EAGLC,WAHK,EAILC,EAJK,EAQL;AACA,MAAIC,WAAW,GAAGF,WAAlB;AACA,MAAIG,YAAY,GAAG,CAAnB,CAFA,CAEsB;;AACtB,QAAMC,aAAa,GAAG,EAAtB;AAEAN,EAAAA,KAAK,CAACO,OAAN,CAAeC,IAAD,IAAU;AACtB,QAAIA,IAAI,CAACC,IAAL,GAAYjB,eAAhB,EAAiC;AAC/Ba,MAAAA,YAAY,IAAI,CAAhB;AACA;AACD;;AAEDK,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,IAAjB;AACA,UAAMG,QAAQ,GAAI,GAAEtB,IAAI,EAAG,IAAGC,gBAAgB,CAACiB,IAAI,CAACK,IAAN,CAAY,EAA1D;AACA,UAAMC,SAAS,GAAGC,GAAG,CAACC,eAAJ,CAAoBR,IAApB,CAAlB;AACA,UAAMS,WAAW,GAAI,KAAIT,IAAI,CAACK,IAAK,KAAIC,SAAU,GAAjD;AAEAR,IAAAA,aAAa,CAACM,QAAD,CAAb,GAA0B;AACxBJ,MAAAA,IADwB;AAExBU,MAAAA,iBAAiB,EAAED;AAFK,KAA1B;AAKAb,IAAAA,WAAW,GAAI,GAAEA,WAAW,CAACe,SAAZ,CACf,CADe,EAEflB,cAFe,CAGf,GAAEgB,WAAY,GAAEb,WAAW,CAACe,SAAZ,CAAsBlB,cAAtB,CAAsC,EAHxD,CAhBsB,CAoBtB;;AACAA,IAAAA,cAAc,IAAIgB,WAAW,CAACG,MAA9B;AACD,GAtBD;;AAwBA,MAAIf,YAAJ,EAAkB;AAChBX,IAAAA,iBAAiB,CAAC2B,KAAlB,CAAwB;AACtBC,MAAAA,IAAI,EAAE,MADgB;AAEtBC,MAAAA,IAAI,EACFlB,YAAY,KAAK,CAAjB,GACK,8DAA6DZ,YAAa,IAD/E,GAEK,GAAEY,YAAa,gEAA+DZ,YAAa;AAL5E,KAAxB;AAOD;;AAEDU,EAAAA,EAAE,CAACC,WAAD,EAAcE,aAAd,CAAF;AACD;AAED,OAAO,eAAekB,WAAf,CAA2BC,IAA3B,EAAyCnB,aAAzC,EAAwE;AAC7E;AACAoB,EAAAA,MAAM,CAACC,IAAP,CAAYrB,aAAZ,EAA2BC,OAA3B,CAAoCqB,EAAD,IAAQ;AACzC,UAAM;AAAEV,MAAAA;AAAF,QAAwBZ,aAAa,CAACsB,EAAD,CAA3C;;AACA,QAAIH,IAAI,CAACI,OAAL,CAAaX,iBAAb,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,aAAOZ,aAAa,CAACsB,EAAD,CAApB;AACD;AACF,GALD,EAF6E,CAS7E;;AACA,QAAME,OAAO,GAAG,MAAMC,OAAO,CAACC,UAAR,CAAmBN,MAAM,CAACC,IAAP,CAAYrB,aAAZ,EAA2B2B,GAA3B,CAAgCL,EAAD,IAAQ;AAC9E,WAAOjC,eAAe,CAAC6B,WAAhB,CAA4BI,EAA5B,EAAgCtB,aAAa,CAACsB,EAAD,CAAb,CAAkBpB,IAAlD,CAAP;AACD,GAFwC,CAAnB,CAAtB;AAIA,QAAM0B,gBAAgB,GAAGJ,OAAO,CAC7BK,MADsB,CACdC,GAAD,IAASA,GAAG,CAACC,MAAJ,KAAe,WADT,EAEtBJ,GAFsB,CAEjBG,GAAD,IAAkDA,GAAG,CAACE,KAFpC,CAAzB;;AAIA,MAAIR,OAAO,CAACV,MAAR,KAAmBc,gBAAgB,CAACd,MAAxC,EAAgD;AAC9C,UAAMf,YAAY,GAAGyB,OAAO,CAACV,MAAR,GAAiBc,gBAAgB,CAACd,MAAvD;AAEA1B,IAAAA,iBAAiB,CAAC2B,KAAlB,CAAwB;AACtBC,MAAAA,IAAI,EAAE,MADgB;AAEtBC,MAAAA,IAAI,EAAElB,YAAY,KAAK,CAAjB,GACF,qDADE,GAED,GAAEA,YAAa;AAJE,KAAxB;AAMD;;AACD,SAAO6B,gBAAP;AACD","sourcesContent":["import { uuid } from '~/services/Utils';\r\nimport { extractExtension } from '~/services/utils/FileUtils';\r\nimport { MAX_MEDIA_BYTES, MAX_MEDIA_MB } from '~/../shared/SharedConstants';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\nimport ExerciseService from '~/services/Exercise.service';\r\n\r\nexport { default as NewExercise } from './NewExercise';\r\nexport { default as ViewOrEditExercise } from './ViewOrEditExercise';\r\n\r\nexport interface FileDictionary {\r\n  [id: string]: {\r\n    file: File;\r\n    markdownToReplace: string;\r\n  }\r\n}\r\n\r\nexport interface MediaUploadResp {\r\n  name: string;\r\n  url: string;\r\n}\r\n\r\nexport function uploadFiles(\r\n  files: File[],\r\n  cursorPosition: number,\r\n  currentBody: string,\r\n  cb: (\r\n    newMarkdown: string,\r\n    filesToUpload: FileDictionary\r\n  ) => void,\r\n) {\r\n  let newMarkdown = currentBody;\r\n  let filesIgnored = 0; // due to size restrictions\r\n  const filesToUpload = {};\r\n\r\n  files.forEach((file) => {\r\n    if (file.size > MAX_MEDIA_BYTES) {\r\n      filesIgnored += 1;\r\n      return;\r\n    }\r\n\r\n    console.log(file.size);\r\n    const fileName = `${uuid()}.${extractExtension(file.name)}`;\r\n    const objectURL = URL.createObjectURL(file);\r\n    const imgMarkdown = `![${file.name}](${objectURL})`;\r\n\r\n    filesToUpload[fileName] = {\r\n      file,\r\n      markdownToReplace: imgMarkdown,\r\n    };\r\n\r\n    newMarkdown = `${newMarkdown.substring(\r\n      0,\r\n      cursorPosition,\r\n    )}${imgMarkdown}${newMarkdown.substring(cursorPosition)}`;\r\n    // eslint-disable-next-line no-param-reassign\r\n    cursorPosition += imgMarkdown.length;\r\n  });\r\n\r\n  if (filesIgnored) {\r\n    SweetAlertService.toast({\r\n      type: 'info',\r\n      text:\r\n        filesIgnored === 1\r\n          ? `Fișierul a fost ignorat căci nu se încadrează în limita de ${MAX_MEDIA_MB}MB`\r\n          : `${filesIgnored} fișiere au fost ignorate căci nu se încadrează în limita de ${MAX_MEDIA_MB}MB`,\r\n    });\r\n  }\r\n\r\n  cb(newMarkdown, filesToUpload);\r\n}\r\n\r\nexport async function uploadMedia(body: string, filesToUpload: FileDictionary) {\r\n  // 1. Maybe some files were removed in the meantime -> double check they're stll here\r\n  Object.keys(filesToUpload).forEach((id) => {\r\n    const { markdownToReplace } = filesToUpload[id];\r\n    if (body.indexOf(markdownToReplace) === -1) {\r\n      delete filesToUpload[id];\r\n    }\r\n  });\r\n\r\n  // 2. Upload to AWS\r\n  const results = await Promise.allSettled(Object.keys(filesToUpload).map((id) => {\r\n    return ExerciseService.uploadMedia(id, filesToUpload[id].file);\r\n  }));\r\n\r\n  const fulfilledResults = results\r\n    .filter((res) => res.status === 'fulfilled')\r\n    .map((res: PromiseFulfilledResult<MediaUploadResp>) => res.value);\r\n\r\n  if (results.length !== fulfilledResults.length) {\r\n    const filesIgnored = results.length - fulfilledResults.length;\r\n\r\n    SweetAlertService.toast({\r\n      type: 'info',\r\n      text: filesIgnored === 1\r\n        ? '1 fișisier nu a putut fi uploadat. Încearcă din nou'\r\n        : `${filesIgnored} fișiere nu au putut fi uploadate. Încearcă din nou`,\r\n    });\r\n  }\r\n  return fulfilledResults;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}