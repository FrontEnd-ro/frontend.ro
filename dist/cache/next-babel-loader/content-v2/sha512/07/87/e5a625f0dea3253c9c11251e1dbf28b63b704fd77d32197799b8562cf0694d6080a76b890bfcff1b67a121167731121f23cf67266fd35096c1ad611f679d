{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Markdown\\\\Markdown.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport styles from './Markdown.module.scss';\n\nfunction Markdown(_ref) {\n  _s();\n\n  var markdownString = _ref.markdownString,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'none' : _ref$variant;\n  var markdownRef = useRef(null);\n  useEffect(function () {\n    import('marked').then(function (module) {\n      var marked = module[\"default\"];\n      marked.setOptions({\n        sanitize: true\n      });\n      markdownRef.current.innerHTML = marked(markdownString);\n    });\n  }, [markdownString]);\n  return __jsx(\"div\", {\n    className: \"\".concat(styles.markdown, \" \").concat(variant === 'transparent' && styles['is--transparent'], \" \").concat(className),\n    ref: markdownRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(Markdown, \"EallWvDkQvvwtP3l0VqlbnL1maQ=\");\n\n_c = Markdown;\nexport default Markdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Markdown\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Markdown/Markdown.tsx"],"names":["React","useEffect","useRef","styles","Markdown","markdownString","className","variant","markdownRef","then","module","marked","setOptions","sanitize","current","innerHTML","markdown"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;AAQA,SAASC,QAAT,OAA+E;AAAA;;AAAA,MAA3DC,cAA2D,QAA3DA,cAA2D;AAAA,4BAA3CC,SAA2C;AAAA,MAA3CA,SAA2C,+BAA/B,EAA+B;AAAA,0BAA3BC,OAA2B;AAAA,MAA3BA,OAA2B,6BAAjB,MAAiB;AAC7E,MAAMC,WAAW,GAAGN,MAAM,CAAC,IAAD,CAA1B;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACd,WAAO,QAAP,EAAiBQ,IAAjB,CAAsB,UAACC,MAAD,EAAY;AAChC,UAAMC,MAAM,GAAGD,MAAM,WAArB;AAEAC,MAAAA,MAAM,CAACC,UAAP,CAAkB;AAChBC,QAAAA,QAAQ,EAAE;AADM,OAAlB;AAIAL,MAAAA,WAAW,CAACM,OAAZ,CAAoBC,SAApB,GAAgCJ,MAAM,CAACN,cAAD,CAAtC;AACD,KARD;AASD,GAVQ,EAUN,CAACA,cAAD,CAVM,CAAT;AAYA,SACE;AAAK,IAAA,SAAS,YAAKF,MAAM,CAACa,QAAZ,cAAwBT,OAAO,KAAK,aAAZ,IAA6BJ,MAAM,CAAC,iBAAD,CAA3D,cAAkFG,SAAlF,CAAd;AAA6G,IAAA,GAAG,EAAEE,WAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD;;GAlBQJ,Q;;KAAAA,Q;AAoBT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport styles from './Markdown.module.scss';\r\n\r\ninterface Props {\r\n  markdownString: string;\r\n  variant?: 'none' | 'transparent';\r\n  className?: string;\r\n}\r\n\r\nfunction Markdown({ markdownString, className = '', variant = 'none' }: Props) {\r\n  const markdownRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    import('marked').then((module) => {\r\n      const marked = module.default;\r\n\r\n      marked.setOptions({\r\n        sanitize: true,\r\n      });\r\n\r\n      markdownRef.current.innerHTML = marked(markdownString);\r\n    });\r\n  }, [markdownString]);\r\n\r\n  return (\r\n    <div className={`${styles.markdown} ${variant === 'transparent' && styles['is--transparent']} ${className}`} ref={markdownRef} />\r\n  );\r\n}\r\n\r\nexport default Markdown;\r\n"]},"metadata":{},"sourceType":"module"}