{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Highlight\\\\Highlight.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useClipboard } from '~/services/Hooks';\nimport IframeDemo from '../LivePreviewDemo/IframeDemo/IframeDemo';\nimport styles from './Highlight.module.scss';\nexport default function Highlight(_ref) {\n  _s();\n\n  var language = _ref.language,\n      code = _ref.code,\n      className = _ref.className;\n  var _ref2 = [useRef(null), useRef(null)],\n      preRef = _ref2[0],\n      btnRef = _ref2[1];\n\n  var _useState = useState(code),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  useEffect(function () {\n    import('~/services/highlight').then(function (module) {\n      var highlight = module[\"default\"];\n      highlight.highlightBlock(preRef.current);\n    });\n  }, []); // Select the node that will be observed for mutations\n\n  var targetNode = preRef.current; // Options for the observer (which mutations to observe)\n\n  var config = {\n    attributes: true,\n    childList: true,\n    subtree: true\n  }; // Callback function to execute when mutations are observed\n\n  var callback = function callback(mutationsList, observer) {\n    // Use traditional 'for loops' for IE 11\n    var _iterator = _createForOfIteratorHelper(mutationsList),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var mutation = _step.value;\n\n        if (mutation.type === 'childList') {\n          console.log('A child node has been added or removed.');\n        } else if (mutation.type === 'attributes') {\n          console.log(\"The \".concat(mutation.attributeName, \" attribute was modified.\"));\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }; // Create an observer instance linked to the callback function\n\n\n  var observer = new MutationObserver(callback); // Start observing the target node for configured mutations\n\n  observer.observe(targetNode, config); // Later, you can stop observing\n\n  observer.disconnect();\n  useClipboard(btnRef);\n\n  var onChange = function onChange(e) {\n    setValue(e.target.textContent);\n  };\n\n  return __jsx(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"\".concat(styles.highlight, \" \").concat(className),\n    contentEditable: true,\n    onInput: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, __jsx(\"pre\", {\n    ref: preRef,\n    className: language,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, code))), __jsx(IframeDemo, {\n    sourceCode: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn--transparent\",\n    \"data-clipboard-text\": code,\n    ref: btnRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(FontAwesomeIcon, {\n    className: \"text-silver\",\n    icon: faCopy,\n    width: \"32\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), __jsx(\"span\", {\n    className: \"d-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \" Copy \")));\n}\n\n_s(Highlight, \"tcRMlrP8agv+hRnT15Uc7E34/tU=\", false, function () {\n  return [useClipboard];\n});\n\n_c = Highlight;\n\nvar _c;\n\n$RefreshReg$(_c, \"Highlight\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Highlight/Highlight.tsx"],"names":["faCopy","FontAwesomeIcon","React","useEffect","useRef","useState","useClipboard","IframeDemo","styles","Highlight","language","code","className","preRef","btnRef","value","setValue","then","module","highlight","highlightBlock","current","targetNode","config","attributes","childList","subtree","callback","mutationsList","observer","mutation","type","console","log","attributeName","MutationObserver","observe","disconnect","onChange","e","target","textContent"],"mappings":"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","sourcesContent":["import { faCopy } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useClipboard } from '~/services/Hooks';\r\nimport IframeDemo from '../LivePreviewDemo/IframeDemo/IframeDemo';\r\n\r\nimport styles from './Highlight.module.scss';\r\n\r\ntype Language = 'html' | 'css' | 'json' | 'javascript';\r\n\r\ninterface Props {\r\n  code: string,\r\n  language: Language,\r\n  className?: string;\r\n}\r\n\r\nexport default function Highlight({ language, code, className }: Props) {\r\n  const [preRef, btnRef] = [useRef(null), useRef(null)];\r\n  const [value, setValue] = useState(code);\r\n \r\n  useEffect(() => {\r\n    import('~/services/highlight').then((module) => {\r\n      const highlight = module.default;\r\n      highlight.highlightBlock(preRef.current);\r\n    });\r\n  }, []);\r\n  // Select the node that will be observed for mutations\r\n  const targetNode = preRef.current;\r\n\r\n  // Options for the observer (which mutations to observe)\r\n  const config = { attributes: true, childList: true, subtree: true };\r\n\r\n  // Callback function to execute when mutations are observed\r\n  const callback = function (mutationsList, observer) {\r\n    // Use traditional 'for loops' for IE 11\r\n    for (const mutation of mutationsList) {\r\n      if (mutation.type === 'childList') {\r\n        console.log('A child node has been added or removed.');\r\n      } else if (mutation.type === 'attributes') {\r\n        console.log(`The ${mutation.attributeName} attribute was modified.`);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Create an observer instance linked to the callback function\r\n  const observer = new MutationObserver(callback);\r\n\r\n  // Start observing the target node for configured mutations\r\n  observer.observe(targetNode, config);\r\n\r\n  // Later, you can stop observing\r\n  observer.disconnect();\r\n  useClipboard(btnRef);\r\n\r\n  const onChange = (e) => {\r\n    setValue(e.target.textContent);\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex\">\r\n      <div className={`${styles.highlight} ${className}`} contentEditable onInput={onChange}>\r\n        <pre ref={preRef} className={language}>\r\n          <code>\r\n            {code}\r\n          </code>\r\n        </pre>\r\n      </div>\r\n\r\n      <IframeDemo sourceCode={value} />\r\n\r\n      <button type=\"button\" className=\"btn--transparent\" data-clipboard-text={code} ref={btnRef}>\r\n        <FontAwesomeIcon className=\"text-silver\" icon={faCopy} width=\"32\" />\r\n        <span className=\"d-block\"> Copy </span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}