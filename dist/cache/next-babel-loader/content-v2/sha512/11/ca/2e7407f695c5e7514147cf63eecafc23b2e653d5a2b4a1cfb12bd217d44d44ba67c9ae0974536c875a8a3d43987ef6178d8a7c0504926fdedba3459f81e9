{"ast":null,"code":"import _extends from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Form\\\\Form.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport noop from 'lodash/noop';\nimport styles from './Form.module.scss';\nvar Form = /*#__PURE__*/React.forwardRef(_c = function _c(_ref, forwardRef) {\n  var onSubmit = _ref.onSubmit,\n      _ref$withStyles = _ref.withStyles,\n      withStyles = _ref$withStyles === void 0 ? true : _ref$withStyles,\n      _ref$onInput = _ref.onInput,\n      onInput = _ref$onInput === void 0 ? noop : _ref$onInput,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$autoComplete = _ref.autoComplete,\n      autoComplete = _ref$autoComplete === void 0 ? 'on' : _ref$autoComplete,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"onSubmit\", \"withStyles\", \"onInput\", \"className\", \"autoComplete\", \"children\"]);\n\n  var submit = function submit(e) {\n    e.persist();\n    e.preventDefault();\n\n    if (e.target.checkValidity()) {\n      var _data = {};\n      var elements = [];\n\n      try {\n        elements = _toConsumableArray(e.target.elements);\n      } catch (err) {\n        // MSEdge fix\n        for (var i = 0; i < e.target.elements.length; i += 1) {\n          elements.push(e.target.elements[i]);\n        }\n      }\n\n      elements.filter(function (el) {\n        return el.name;\n      }).forEach(function (el) {\n        if (el.hasOwnProperty('checked')) {\n          if (el.type === 'checkbox') {\n            _data[el.name] = el.checked;\n          }\n\n          if (el.type === 'radio' && el.checked) {\n            _data[el.name] = el.value;\n          }\n        } else {\n          _data[el.name] = el.value;\n        }\n      });\n      var submitResult = onSubmit(_data);\n\n      if (submitResult instanceof Promise) {\n        submitResult.then(function (shouldReset) {\n          if (shouldReset) {\n            e.target.reset();\n          }\n        });\n      }\n    }\n  };\n\n  return __jsx(\"form\", _extends({\n    className: withStyles ? \"\".concat(styles.form, \" \").concat(className) : className,\n    spellCheck: \"false\",\n    onSubmit: submit,\n    onInput: onInput,\n    autoComplete: autoComplete\n  }, rest, {\n    ref: forwardRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }), children);\n}); // export default function Form({\n//   onSubmit,\n//   withStyles = true,\n//   onInput = noop,\n//   className = '',\n//   autoComplete = 'on',\n//   children,\n//   ...rest\n// }: PropsWithChildren<Props>) {\n//   const submit = (e) => {\n//     e.persist();\n//     e.preventDefault();\n//     if (e.target.checkValidity()) {\n//       let data = {};\n//       let elements = [];\n//       try {\n//         elements = [...e.target.elements];\n//       } catch (err) {\n//         // MSEdge fix\n//         for (let i = 0; i < e.target.elements.length; i += 1) {\n//           elements.push(e.target.elements[i]);\n//         }\n//       }\n//       elements\n//         .filter((el) => el.name)\n//         .forEach((el) => {\n//           if (el.hasOwnProperty('checked')) {\n//             if (el.type === 'checkbox') {\n//               data[el.name] = el.checked;\n//             }\n//             if (el.type === 'radio' && el.checked) {\n//               data[el.name] = el.value;\n//             }\n//           } else {\n//             data[el.name] = el.value;\n//           }\n//         });\n//       let submitResult = onSubmit(data);\n//       if (submitResult instanceof Promise) {\n//         submitResult.then((shouldReset) => {\n//           if (shouldReset) {\n//             e.target.reset();\n//           }\n//         });\n//       }\n//     }\n//   };\n//   return (\n//     <form\n//       className={withStyles ? `${styles.form} ${className}` : className}\n//       spellCheck=\"false\"\n//       onSubmit={submit}\n//       onInput={onInput}\n//       autoCorrect=\"off\"\n//       autoComplete={autoComplete}\n//       {...rest}\n//     >\n//       {children}\n//     </form>\n//   );\n// }\n\n_c2 = Form;\nexport default Form;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Form$React.forwardRef\");\n$RefreshReg$(_c2, \"Form\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Form/Form.tsx"],"names":["React","noop","styles","Form","forwardRef","onSubmit","withStyles","onInput","className","autoComplete","children","rest","submit","e","persist","preventDefault","target","checkValidity","data","elements","err","i","length","push","filter","el","name","forEach","hasOwnProperty","type","checked","value","submitResult","Promise","then","shouldReset","reset","form"],"mappings":"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","sourcesContent":["import React, { FormHTMLAttributes, PropsWithChildren } from 'react';\r\nimport noop from 'lodash/noop';\r\n\r\nimport styles from './Form.module.scss';\r\n\r\ninterface Props extends FormHTMLAttributes<HTMLFormElement> {\r\n  onSubmit: (data: any) => void | Promise<boolean>;\r\n\r\n  withStyles?: boolean;\r\n  className?: string;\r\n  autoComplete?: string;\r\n}\r\n\r\nconst Form = React.forwardRef(({\r\n  onSubmit,\r\n  withStyles = true,\r\n  onInput = noop,\r\n  className = '',\r\n  autoComplete = 'on',\r\n  children,\r\n  ...rest\r\n}: PropsWithChildren<Props>, forwardRef: React.RefObject<HTMLFormElement>) => {\r\n  const submit = (e) => {\r\n    e.persist();\r\n    e.preventDefault();\r\n\r\n    if (e.target.checkValidity()) {\r\n      let data = {};\r\n      let elements = [];\r\n\r\n      try {\r\n        elements = [...e.target.elements];\r\n      } catch (err) {\r\n        // MSEdge fix\r\n        for (let i = 0; i < e.target.elements.length; i += 1) {\r\n          elements.push(e.target.elements[i]);\r\n        }\r\n      }\r\n\r\n      elements\r\n        .filter((el) => el.name)\r\n        .forEach((el) => {\r\n          if (el.hasOwnProperty('checked')) {\r\n            if (el.type === 'checkbox') {\r\n              data[el.name] = el.checked;\r\n            }\r\n            if (el.type === 'radio' && el.checked) {\r\n              data[el.name] = el.value;\r\n            }\r\n          } else {\r\n            data[el.name] = el.value;\r\n          }\r\n        });\r\n\r\n      let submitResult = onSubmit(data);\r\n      if (submitResult instanceof Promise) {\r\n        submitResult.then((shouldReset) => {\r\n          if (shouldReset) {\r\n            e.target.reset();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={withStyles ? `${styles.form} ${className}` : className}\r\n      spellCheck=\"false\"\r\n      onSubmit={submit}\r\n      onInput={onInput}\r\n      autoComplete={autoComplete}\r\n      {...rest}\r\n      ref={forwardRef}\r\n    >\r\n      {children}\r\n    </form>\r\n  );\r\n});\r\n// export default function Form({\r\n//   onSubmit,\r\n//   withStyles = true,\r\n//   onInput = noop,\r\n//   className = '',\r\n//   autoComplete = 'on',\r\n//   children,\r\n//   ...rest\r\n// }: PropsWithChildren<Props>) {\r\n//   const submit = (e) => {\r\n//     e.persist();\r\n//     e.preventDefault();\r\n\r\n//     if (e.target.checkValidity()) {\r\n//       let data = {};\r\n//       let elements = [];\r\n\r\n//       try {\r\n//         elements = [...e.target.elements];\r\n//       } catch (err) {\r\n//         // MSEdge fix\r\n//         for (let i = 0; i < e.target.elements.length; i += 1) {\r\n//           elements.push(e.target.elements[i]);\r\n//         }\r\n//       }\r\n\r\n//       elements\r\n//         .filter((el) => el.name)\r\n//         .forEach((el) => {\r\n//           if (el.hasOwnProperty('checked')) {\r\n//             if (el.type === 'checkbox') {\r\n//               data[el.name] = el.checked;\r\n//             }\r\n//             if (el.type === 'radio' && el.checked) {\r\n//               data[el.name] = el.value;\r\n//             }\r\n//           } else {\r\n//             data[el.name] = el.value;\r\n//           }\r\n//         });\r\n\r\n//       let submitResult = onSubmit(data);\r\n//       if (submitResult instanceof Promise) {\r\n//         submitResult.then((shouldReset) => {\r\n//           if (shouldReset) {\r\n//             e.target.reset();\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <form\r\n//       className={withStyles ? `${styles.form} ${className}` : className}\r\n//       spellCheck=\"false\"\r\n//       onSubmit={submit}\r\n//       onInput={onInput}\r\n//       autoCorrect=\"off\"\r\n//       autoComplete={autoComplete}\r\n//       {...rest}\r\n//     >\r\n//       {children}\r\n//     </form>\r\n//   );\r\n// }\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}