{"ast":null,"code":"/* eslint-disable import/no-dynamic-require */\n\n/* eslint-disable prefer-destructuring */\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n\n/* eslint-disable vars-on-top */\n\n/* eslint-disable no-var */\nconst loadMonaco = function loadMonacoIIFE() {\n  let promisesToResolve = [];\n  let loadInProgress = false;\n  return function loadMonaco() {\n    if (window.monaco) {\n      return Promise.resolve(monaco);\n    }\n\n    if (loadInProgress) {\n      return new Promise(resolve => {\n        promisesToResolve.push(resolve);\n      });\n    }\n\n    const script = document.createElement('script');\n    script.src = `${process.env.CLOUDFRONT_PUBLIC}/lib/vs/loader.js`;\n    loadInProgress = true;\n    document.body.appendChild(script);\n    return new Promise(resolve => {\n      promisesToResolve.push(resolve);\n      script.addEventListener('load', () => {\n        const require = window.require;\n\n        require.config({\n          paths: {\n            vs: `${process.env.CLOUDFRONT_PUBLIC}/lib/vs`\n          }\n        });\n\n        require(['vs/editor/editor.main'], () => {\n          monaco = window.monaco;\n          promisesToResolve.forEach(res => res(monaco));\n          promisesToResolve = [];\n        });\n      });\n    });\n  };\n}();\n\nexport default loadMonaco;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/loadMonaco.ts"],"names":["loadMonaco","loadMonacoIIFE","promisesToResolve","loadInProgress","window","monaco","Promise","resolve","push","script","document","createElement","src","process","env","CLOUDFRONT_PUBLIC","body","appendChild","addEventListener","require","config","paths","vs","forEach","res"],"mappings":"AAAA;;AACA;;AACA;;AACA;;AACA;AAQA,MAAMA,UAAU,GAAI,SAASC,cAAT,GAA0B;AAC5C,MAAIC,iBAAiB,GAAG,EAAxB;AACA,MAAIC,cAAc,GAAG,KAArB;AAEA,SAAO,SAASH,UAAT,GAAqC;AAC1C,QAAII,MAAM,CAACC,MAAX,EAAmB;AACjB,aAAOC,OAAO,CAACC,OAAR,CAAgBF,MAAhB,CAAP;AACD;;AAED,QAAIF,cAAJ,EAAoB;AAClB,aAAO,IAAIG,OAAJ,CAAaC,OAAD,IAAa;AAC9BL,QAAAA,iBAAiB,CAACM,IAAlB,CAAuBD,OAAvB;AACD,OAFM,CAAP;AAGD;;AAED,UAAME,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,IAAAA,MAAM,CAACG,GAAP,GAAc,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,mBAA9C;AAEAZ,IAAAA,cAAc,GAAG,IAAjB;AACAO,IAAAA,QAAQ,CAACM,IAAT,CAAcC,WAAd,CAA0BR,MAA1B;AAEA,WAAO,IAAIH,OAAJ,CAAaC,OAAD,IAAa;AAC9BL,MAAAA,iBAAiB,CAACM,IAAlB,CAAuBD,OAAvB;AAEAE,MAAAA,MAAM,CAACS,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AACpC,cAAMC,OAAY,GAAGf,MAAM,CAACe,OAA5B;;AAEAA,QAAAA,OAAO,CAACC,MAAR,CAAe;AAAEC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,EAAE,EAAG,GAAET,OAAO,CAACC,GAAR,CAAYC,iBAAkB;AAAvC;AAAT,SAAf;;AACAI,QAAAA,OAAO,CAAC,CAAC,uBAAD,CAAD,EAA4B,MAAM;AACvCd,UAAAA,MAAM,GAAGD,MAAM,CAACC,MAAhB;AAEAH,UAAAA,iBAAiB,CAACqB,OAAlB,CAA2BC,GAAD,IAASA,GAAG,CAACnB,MAAD,CAAtC;AACAH,UAAAA,iBAAiB,GAAG,EAApB;AACD,SALM,CAAP;AAMD,OAVD;AAWD,KAdM,CAAP;AAeD,GAhCD;AAiCD,CArCmB,EAApB;;AAuCA,eAAeF,UAAf","sourcesContent":["/* eslint-disable import/no-dynamic-require */\r\n/* eslint-disable prefer-destructuring */\r\n/* eslint-disable @typescript-eslint/ban-ts-comment */\r\n/* eslint-disable vars-on-top */\r\n/* eslint-disable no-var */\r\n\r\ndeclare global {\r\n  // @ts-ignore\r\n  var require: any;\r\n  var monaco: any;\r\n}\r\n\r\nconst loadMonaco = (function loadMonacoIIFE() {\r\n  let promisesToResolve = [];\r\n  let loadInProgress = false;\r\n\r\n  return function loadMonaco(): Promise<void> {\r\n    if (window.monaco) {\r\n      return Promise.resolve(monaco);\r\n    }\r\n\r\n    if (loadInProgress) {\r\n      return new Promise((resolve) => {\r\n        promisesToResolve.push(resolve);\r\n      });\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.src = `${process.env.CLOUDFRONT_PUBLIC}/lib/vs/loader.js`;\r\n\r\n    loadInProgress = true;\r\n    document.body.appendChild(script);\r\n\r\n    return new Promise((resolve) => {\r\n      promisesToResolve.push(resolve);\r\n\r\n      script.addEventListener('load', () => {\r\n        const require: any = window.require;\r\n\r\n        require.config({ paths: { vs: `${process.env.CLOUDFRONT_PUBLIC}/lib/vs` } });\r\n        require(['vs/editor/editor.main'], () => {\r\n          monaco = window.monaco;\r\n\r\n          promisesToResolve.forEach((res) => res(monaco));\r\n          promisesToResolve = [];\r\n        });\r\n      });\r\n    });\r\n  };\r\n}());\r\n\r\nexport default loadMonaco;\r\n"]},"metadata":{},"sourceType":"module"}