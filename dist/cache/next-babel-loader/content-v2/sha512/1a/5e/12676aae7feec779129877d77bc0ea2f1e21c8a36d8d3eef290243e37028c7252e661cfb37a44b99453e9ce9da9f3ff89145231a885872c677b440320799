{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/require-render-return */\n\n/* eslint-disable react/no-unused-state */\n\n/* eslint-disable react/sort-comp */\nimport React from 'react';\nimport noop from 'lodash/noop';\nimport * as Monaco from './monaco';\nimport ExerciseService from '~/services/Exercise.service';\nimport { extractExtension, filesToFolderStructure, fsEntriesToFolderStructure } from '~/services/utils/FileUtils';\nimport FolderStructure from '~/services/utils/FolderStructure';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport { MONACO } from '~/services/Constants';\n\nclass MonacoBase extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_baseModelChangeListener\", void 0);\n\n    _defineProperty(this, \"editorRef\", void 0);\n\n    _defineProperty(this, \"editor\", void 0);\n\n    _defineProperty(this, \"timeoutId\", void 0);\n\n    _defineProperty(this, \"Feedbacks\", void 0);\n\n    _defineProperty(this, \"decorate\", void 0);\n\n    _defineProperty(this, \"onFeedbackDone\", void 0);\n\n    _defineProperty(this, \"onModelChange\", void 0);\n\n    _defineProperty(this, \"initEditor\", void 0);\n\n    _defineProperty(this, \"formatCode\", () => {\n      return Monaco.formatCode(this.editor);\n    });\n\n    _defineProperty(this, \"createFirstFile\", ({\n      name\n    }) => {\n      const {\n        folderStructure\n      } = this.state;\n      let newFileKey = folderStructure.addFile(null, {\n        name\n      });\n      this.setState({\n        folderStructure,\n        selectedFileKey: newFileKey\n      }, () => {\n        this.initEditor();\n\n        if (this.editor) {\n          this.toggleFit(true);\n\n          this._baseModelChangeListener.dispose();\n\n          this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\n        }\n      });\n    });\n\n    _defineProperty(this, \"onFileAdd\", (parentKey, file, cb = noop) => {\n      const {\n        folderStructure\n      } = this.state;\n      folderStructure.addFile(parentKey, file);\n      this.setState({\n        folderStructure\n      }, () => {\n        cb();\n        this.notifyStructureChange();\n      });\n    });\n\n    _defineProperty(this, \"onFolderAdd\", (parentKey, folder, cb = noop) => {\n      const {\n        folderStructure\n      } = this.state;\n      folderStructure.addFolder(parentKey, folder);\n      this.setState({\n        folderStructure\n      }, () => {\n        cb();\n        this.notifyStructureChange();\n      });\n    });\n\n    _defineProperty(this, \"onFileSelect\", key => {\n      this.setState({\n        selectedFileKey: key\n      });\n      const {\n        folderStructure\n      } = this.state;\n      const {\n        feedbacks\n      } = this.props;\n      let {\n        file\n      } = folderStructure.getFile(key);\n\n      this._baseModelChangeListener.dispose();\n\n      this.setValue(file.content);\n      this.updateLanguageBasedOnFileName(file.name);\n      this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\n\n      if (this.Feedbacks && this.decorate && feedbacks) {\n        this.Feedbacks.undecorateAll();\n        this.Feedbacks.getAll().filter(f => f.file_key === file.key).forEach(f => this.decorate(f.getDecorationData()));\n      }\n    });\n\n    _defineProperty(this, \"onFileRename\", (key, name) => {\n      const {\n        folderStructure\n      } = this.state;\n\n      try {\n        folderStructure.renameFile(key, name);\n        this.setState({\n          folderStructure\n        }, () => {\n          this.updateLanguageBasedOnFileName(name);\n          this.notifyStructureChange();\n        });\n      } catch (err) {\n        SweetAlertService.toast({\n          type: 'error',\n          text: err\n        });\n      }\n    });\n\n    _defineProperty(this, \"onFolderRename\", (key, name) => {\n      const {\n        folderStructure\n      } = this.state;\n\n      try {\n        folderStructure.renameFolder(key, name);\n        this.setState({\n          folderStructure\n        }, this.notifyStructureChange);\n      } catch (err) {\n        SweetAlertService.toast({\n          type: 'error',\n          text: err\n        });\n      }\n    });\n\n    _defineProperty(this, \"onFileDelete\", async key => {\n      const {\n        folderStructure,\n        selectedFileKey\n      } = this.state;\n\n      if (this.Feedbacks && this.Feedbacks.getAll().find(f => f.file_key === key)) {\n        try {\n          await this.confirmFileDelete(key);\n        } catch (err) {\n          return;\n        }\n      }\n\n      try {\n        folderStructure.deleteFile(key);\n        this.setState({\n          folderStructure,\n          selectedFileKey: key === selectedFileKey ? null : selectedFileKey\n        }, this.notifyStructureChange);\n      } catch (err) {\n        SweetAlertService.toast({\n          type: 'error',\n          text: err\n        });\n      }\n    });\n\n    _defineProperty(this, \"onFolderDelete\", async key => {\n      const {\n        folderStructure,\n        selectedFileKey\n      } = this.state;\n      const {\n        folder\n      } = folderStructure.getFolder(key);\n\n      if (this.Feedbacks.getAll().find(f => !!folderStructure.getFile(f.file_key, folder).file)) {\n        try {\n          await this.confirmFolderDelete(key);\n        } catch (err) {\n          return;\n        }\n      }\n\n      try {\n        const {\n          folder\n        } = folderStructure.getFolder(key);\n        let selectedFileIsHere = false;\n\n        if (folderStructure.getFile(selectedFileKey, folder).file) {\n          selectedFileIsHere = true;\n        }\n\n        folderStructure.deleteFolder(key);\n        this.setState({\n          folderStructure,\n          selectedFileKey: selectedFileIsHere ? null : selectedFileKey\n        }, this.notifyStructureChange);\n      } catch (err) {\n        SweetAlertService.toast({\n          type: 'error',\n          text: err\n        });\n      }\n    });\n\n    _defineProperty(this, \"onDownload\", () => {\n      const {\n        folderStructure\n      } = this.state;\n      return folderStructure.downloadAsZip();\n    });\n\n    _defineProperty(this, \"getFolderStructure\", () => {\n      const {\n        folderStructure\n      } = this.state;\n\n      if (folderStructure.folders.length || folderStructure.files.length) {\n        return folderStructure.toJSON();\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"onResize\", fileSwitcherWidth => {\n      this.setState({\n        fileSwitcherWidth\n      }, () => {\n        if (this.editor) {\n          this.editor.layout();\n        }\n      });\n    });\n\n    _defineProperty(this, \"notifyStructureChange\", () => {\n      const {\n        onStructureChange\n      } = this.props;\n\n      if (typeof onStructureChange === 'function') {\n        onStructureChange(this.getFolderStructure());\n      }\n    });\n\n    _defineProperty(this, \"uploadStructure\", ({\n      nativeEvent\n    }, withInit = true) => {\n      this.setState({\n        isDropable: false\n      });\n      let computeFolderStructure = null;\n\n      if (nativeEvent.target.webkitEntries && nativeEvent.target.webkitEntries.length) {\n        computeFolderStructure = fsEntriesToFolderStructure(nativeEvent.target.webkitEntries);\n      } else {\n        computeFolderStructure = filesToFolderStructure(nativeEvent.target.files);\n      }\n\n      computeFolderStructure.then(folderStructure => {\n        this.setState({\n          folderStructure,\n          selectedFileKey: null\n        }, () => {\n          if (!withInit) {\n            return;\n          }\n\n          this.initEditor();\n\n          if (this.editor) {\n            this.toggleFit(true);\n\n            this._baseModelChangeListener.dispose();\n\n            this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\n          }\n        });\n      });\n    });\n\n    _defineProperty(this, \"toggleFit\", (force = undefined) => {\n      console.log('TOGGLE FIT'); // const { fixedHeight: fixedHeightState } = this.state;\n      // const editorElHeight = this.editorRef.current.getBoundingClientRect().height;\n      // let fixedHeight: any = false;\n      // if (!fixedHeightState || force === true) {\n      //   // eslint-disable-next-line max-len\n      //   fixedHeight = this.editor.getModel().getLineCount() * this.editor.getConfiguration().lineHeight;\n      // }\n      // this.setState({ fixedHeight: Math.max(editorElHeight, fixedHeight) }, () => {\n      //   this.editor.layout();\n      // });\n    });\n\n    _defineProperty(this, \"onDragEnter\", e => {\n      const {\n        readOnly\n      } = this.props;\n\n      if (readOnly) {\n        return;\n      }\n\n      e.preventDefault();\n      this.setState({\n        isDropable: true\n      });\n    });\n\n    _defineProperty(this, \"onDragLeave\", e => {\n      const {\n        readOnly\n      } = this.props;\n\n      if (readOnly) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (e.target.tagName === 'INPUT' && e.target.type === 'file') {\n        this.setState({\n          isDropable: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"onReplace\", e => {\n      e.persist();\n      let swalOptions = {\n        title: 'Hold on!',\n        confirmButtonText: 'Continue'\n      };\n\n      if (this.Feedbacks && this.Feedbacks.getAll().length) {\n        swalOptions.text = 'Vei suprascrie toate foldrele și fișierele, iar feedback-urile vor fi marcate ca și rezolvate.';\n\n        swalOptions.preConfirm = () => {\n          const allFeedbacks = this.Feedbacks.getAll();\n          SweetAlertService.toggleLoading();\n          return Promise.all(allFeedbacks.map(f => ExerciseService.markFeedbackAsDone(f.id))).then(resp => {\n            resp.forEach((_, index) => this.onFeedbackDone(allFeedbacks[index].id));\n          });\n        };\n      } else {\n        swalOptions.text = 'Vei suprascrie toate folderele și fișierele existente';\n      }\n\n      SweetAlertService.confirm(swalOptions).then(result => {\n        if (result.isConfirmed) {\n          this.uploadStructure(e, false);\n          e.target.value = null;\n        } else {\n          this.setState({\n            isDropable: false\n          });\n          e.target.value = null;\n        }\n      });\n    });\n\n    this._baseModelChangeListener = {\n      dispose: noop\n    };\n    this.editorRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      folderStructure\n    } = this.state;\n    const {\n      onLoad\n    } = this.props;\n    const firstFile = folderStructure.files[0];\n    this.setState({\n      selectedFileKey: firstFile ? firstFile.key : firstFile\n    }, () => {\n      this.initEditor();\n\n      if (typeof onLoad === 'function') {\n        setTimeout(() => onLoad(), 0);\n      }\n\n      if (this.editor) {\n        this.toggleFit(true);\n\n        this._baseModelChangeListener.dispose();\n\n        this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      folderStructure: folderStructureProp,\n      readOnly\n    } = this.props;\n\n    if (JSON.stringify(prevProps.folderStructure) !== JSON.stringify(folderStructureProp)) {\n      const folderStructure = new FolderStructure(folderStructureProp);\n      const firstFile = folderStructure.files[0]; // eslint-disable-next-line react/no-did-update-set-state\n\n      this.setState({\n        folderStructure,\n        selectedFileKey: null\n      }, () => {\n        if (firstFile) {\n          this.onFileSelect(firstFile.key);\n        }\n      });\n    }\n\n    if (readOnly !== prevProps.readOnly) {\n      this.editor.updateOptions({\n        readOnly\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeoutId);\n\n    this._baseModelChangeListener.dispose();\n  }\n\n  onFolderSelect(key) {\n    this.setState({\n      selectedFolderKey: key\n    });\n  }\n\n  getValue() {\n    return this.editor.getModel().getValue();\n  }\n\n  setValue(code = this.editor.getValue()) {\n    this.editor.getModel().setValue(code);\n  } // eslint-disable-next-line consistent-return\n\n\n  getScroll(type) {\n    if (type === 'TOP') {\n      return this.editor.getScrollTop();\n    }\n\n    if (type === 'LEFT') {\n      return this.editor.getScrollLeft();\n    }\n  }\n\n  setScrollPosition(scroll) {\n    this.editor.setScrollPosition(scroll);\n  }\n\n  updateLanguageBasedOnFileName(name) {\n    const extension = extractExtension(name);\n    const language = extension === 'js' ? 'javascript' : extension;\n    Monaco.setModelLanguage(this.editor.getModel(), language);\n  }\n\n  confirmFileDelete(key) {\n    return new Promise((resolve, reject) => {\n      SweetAlertService.confirm({\n        title: 'Hold on!',\n        text: \"You're about to delete a file which contains feedback. Doing this will mark them as done.\",\n        confirmButtonText: 'Continue',\n        preConfirm: () => {\n          const feedbacksInFile = this.Feedbacks.getAll().filter(f => f.file_key === key);\n          SweetAlertService.toggleLoading();\n          return Promise.all(feedbacksInFile.map(f => ExerciseService.markFeedbackAsDone(f.id))).then(resp => {\n            resp.forEach((_, index) => this.onFeedbackDone(feedbacksInFile[index].id));\n          });\n        }\n      }).then(result => {\n        if (result.isConfirmed) {\n          resolve();\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n\n  confirmFolderDelete(key) {\n    const {\n      folderStructure\n    } = this.state;\n    const {\n      folder\n    } = folderStructure.getFolder(key);\n    return new Promise((resolve, reject) => {\n      SweetAlertService.confirm({\n        title: 'Hold on!',\n        text: \"You're about to delete a folder which contains files with feedback. Doing this will mark them as done.\",\n        confirmButtonText: 'Continue',\n        preConfirm: () => {\n          const feedbacksInFolder = this.Feedbacks.getAll().filter(f => folderStructure.getFile(f.file_key, folder).file);\n          SweetAlertService.toggleLoading();\n          return Promise.all(feedbacksInFolder.map(f => ExerciseService.markFeedbackAsDone(f.id))).then(resp => {\n            resp.forEach((_, index) => this.onFeedbackDone(feedbacksInFolder[index].id));\n          });\n        }\n      }).then(result => {\n        if (result.isConfirmed) {\n          resolve();\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n\n  onAllChanges(cb) {\n    let cursorListener = this.editor.onDidChangeCursorPosition(e => cb({\n      type: MONACO.EVENTS.CURSOR,\n      payload: e.position\n    }));\n    let selectionListener = this.editor.onDidChangeCursorSelection(e => cb({\n      type: MONACO.EVENTS.SELECTION,\n      payload: [e.selection, ...e.secondarySelections]\n    }));\n    let modelListener = this.editor.onDidChangeModelContent(e => cb({\n      type: MONACO.EVENTS.MODEL,\n      payload: e.changes\n    }));\n    let scrollListener = this.editor.onDidScrollChange(e => cb({\n      type: MONACO.EVENTS.SCROLL,\n      payload: {\n        scrollLeft: e.scrollLeft,\n        scrollTop: e.scrollTop\n      }\n    }));\n    return function offAllChanges() {\n      cursorListener.dispose();\n      selectionListener.dispose();\n      modelListener.dispose();\n      scrollListener.dispose();\n    };\n  }\n\n  applyEvent({\n    type,\n    payload\n  }) {\n    try {\n      switch (type) {\n        case MONACO.EVENTS.CURSOR:\n          this.editor.setPosition(payload);\n          this.editor.focus();\n          break;\n\n        case MONACO.EVENTS.SELECTION:\n          this.editor.setSelections(payload);\n          break;\n\n        case MONACO.EVENTS.MODEL:\n          this.editor.executeEdits('user', payload);\n          break;\n\n        case MONACO.EVENTS.SCROLL:\n          this.editor.setScrollPosition(payload);\n          break;\n\n        default:\n          break;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  render() {\n    this.editor.getModel().render();\n    this.editor.render();\n  }\n\n  focus() {\n    this.editor.focus();\n  }\n\n}\n\nexport default MonacoBase;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/Monaco.base.tsx"],"names":["React","noop","Monaco","ExerciseService","extractExtension","filesToFolderStructure","fsEntriesToFolderStructure","FolderStructure","SweetAlertService","MONACO","MonacoBase","Component","constructor","props","formatCode","editor","name","folderStructure","state","newFileKey","addFile","setState","selectedFileKey","initEditor","toggleFit","_baseModelChangeListener","dispose","onDidChangeModelContent","onModelChange","parentKey","file","cb","notifyStructureChange","folder","addFolder","key","feedbacks","getFile","setValue","content","updateLanguageBasedOnFileName","Feedbacks","decorate","undecorateAll","getAll","filter","f","file_key","forEach","getDecorationData","renameFile","err","toast","type","text","renameFolder","find","confirmFileDelete","deleteFile","getFolder","confirmFolderDelete","selectedFileIsHere","deleteFolder","downloadAsZip","folders","length","files","toJSON","fileSwitcherWidth","layout","onStructureChange","getFolderStructure","nativeEvent","withInit","isDropable","computeFolderStructure","target","webkitEntries","then","force","undefined","console","log","e","readOnly","preventDefault","tagName","persist","swalOptions","title","confirmButtonText","preConfirm","allFeedbacks","toggleLoading","Promise","all","map","markFeedbackAsDone","id","resp","_","index","onFeedbackDone","confirm","result","isConfirmed","uploadStructure","value","editorRef","createRef","componentDidMount","onLoad","firstFile","setTimeout","componentDidUpdate","prevProps","folderStructureProp","JSON","stringify","onFileSelect","updateOptions","componentWillUnmount","clearTimeout","timeoutId","onFolderSelect","selectedFolderKey","getValue","getModel","code","getScroll","getScrollTop","getScrollLeft","setScrollPosition","scroll","extension","language","setModelLanguage","resolve","reject","feedbacksInFile","feedbacksInFolder","onAllChanges","cursorListener","onDidChangeCursorPosition","EVENTS","CURSOR","payload","position","selectionListener","onDidChangeCursorSelection","SELECTION","selection","secondarySelections","modelListener","MODEL","changes","scrollListener","onDidScrollChange","SCROLL","scrollLeft","scrollTop","offAllChanges","applyEvent","setPosition","focus","setSelections","executeEdits","error","render"],"mappings":"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","sourcesContent":["/* eslint-disable react/require-render-return */\r\n/* eslint-disable react/no-unused-state */\r\n/* eslint-disable react/sort-comp */\r\nimport React from 'react';\r\nimport noop from 'lodash/noop';\r\nimport * as Monaco from './monaco';\r\nimport ExerciseService from '~/services/Exercise.service';\r\nimport { extractExtension, filesToFolderStructure, fsEntriesToFolderStructure } from '~/services/utils/FileUtils';\r\nimport FolderStructure from '~/services/utils/FolderStructure';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\nimport { MONACO } from '~/services/Constants';\r\n\r\ninterface BasicEditorProps {\r\n  onChange?: () => void\r\n   & any }\r\n\r\nclass MonacoBase extends React.Component<BasicEditorProps> {\r\n  protected _baseModelChangeListener: any;\r\n\r\n  protected editorRef: React.RefObject<HTMLDivElement>\r\n\r\n  protected editor: any;\r\n\r\n  protected timeoutId: any;\r\n\r\n  protected Feedbacks: any;\r\n\r\n  protected decorate: any;\r\n\r\n  protected onFeedbackDone: any;\r\n\r\n  protected onModelChange: any;\r\n\r\n  protected initEditor: () => void;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this._baseModelChangeListener = { dispose: noop };\r\n    this.editorRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { folderStructure } = this.state;\r\n    const { onLoad } = this.props;\r\n\r\n    const firstFile = folderStructure.files[0];\r\n\r\n    this.setState(\r\n      {\r\n        selectedFileKey: firstFile ? firstFile.key : firstFile,\r\n      },\r\n      () => {\r\n        this.initEditor();\r\n\r\n        if (typeof onLoad === 'function') {\r\n          setTimeout(() => onLoad(), 0);\r\n        }\r\n\r\n        if (this.editor) {\r\n          this.toggleFit(true);\r\n\r\n          this._baseModelChangeListener.dispose();\r\n          this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { folderStructure: folderStructureProp, readOnly } = this.props;\r\n\r\n    if (JSON.stringify(prevProps.folderStructure) !== JSON.stringify(folderStructureProp)) {\r\n      const folderStructure = new FolderStructure(folderStructureProp);\r\n      const firstFile = folderStructure.files[0];\r\n\r\n      // eslint-disable-next-line react/no-did-update-set-state\r\n      this.setState(\r\n        {\r\n          folderStructure,\r\n          selectedFileKey: null,\r\n        },\r\n        () => {\r\n          if (firstFile) {\r\n            this.onFileSelect(firstFile.key);\r\n          }\r\n        },\r\n      );\r\n    }\r\n\r\n    if (readOnly !== prevProps.readOnly) {\r\n      this.editor.updateOptions({ readOnly });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeoutId);\r\n    this._baseModelChangeListener.dispose();\r\n  }\r\n\r\n  onFolderSelect(key) {\r\n    this.setState({\r\n      selectedFolderKey: key,\r\n    });\r\n  }\r\n\r\n  getValue() {\r\n    return this.editor.getModel().getValue();\r\n  }\r\n\r\n  setValue(code = this.editor.getValue()) {\r\n    this.editor.getModel().setValue(code);\r\n  }\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  getScroll(type) {\r\n    if (type === 'TOP') {\r\n      return this.editor.getScrollTop();\r\n    } if (type === 'LEFT') {\r\n      return this.editor.getScrollLeft();\r\n    }\r\n  }\r\n\r\n  setScrollPosition(scroll) {\r\n    this.editor.setScrollPosition(scroll);\r\n  }\r\n\r\n  formatCode = () => {\r\n    return Monaco.formatCode(this.editor);\r\n  }\r\n\r\n  updateLanguageBasedOnFileName(name) {\r\n    const extension = extractExtension(name);\r\n    const language = extension === 'js' ? 'javascript' : extension;\r\n\r\n    Monaco.setModelLanguage(this.editor.getModel(), language);\r\n  }\r\n\r\n  createFirstFile = ({ name }: {name: string}) => {\r\n    const { folderStructure } = this.state;\r\n\r\n    let newFileKey = folderStructure.addFile(null, { name });\r\n    this.setState(\r\n      {\r\n        folderStructure,\r\n        selectedFileKey: newFileKey,\r\n      },\r\n      () => {\r\n        this.initEditor();\r\n        if (this.editor) {\r\n          this.toggleFit(true);\r\n\r\n          this._baseModelChangeListener.dispose();\r\n          this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  onFileAdd = (parentKey, file, cb = noop) => {\r\n    const { folderStructure } = this.state;\r\n\r\n    folderStructure.addFile(parentKey, file);\r\n    this.setState({ folderStructure }, () => {\r\n      cb();\r\n      this.notifyStructureChange();\r\n    });\r\n  }\r\n\r\n  onFolderAdd = (parentKey, folder, cb = noop) => {\r\n    const { folderStructure } = this.state;\r\n\r\n    folderStructure.addFolder(parentKey, folder);\r\n    this.setState({ folderStructure }, () => {\r\n      cb();\r\n      this.notifyStructureChange();\r\n    });\r\n  }\r\n\r\n  onFileSelect = (key) => {\r\n    this.setState({ selectedFileKey: key });\r\n\r\n    const { folderStructure } = this.state;\r\n    const { feedbacks } = this.props;\r\n\r\n    let { file } = folderStructure.getFile(key);\r\n\r\n    this._baseModelChangeListener.dispose();\r\n\r\n    this.setValue(file.content);\r\n    this.updateLanguageBasedOnFileName(file.name);\r\n\r\n    this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\r\n\r\n    if (this.Feedbacks && this.decorate && feedbacks) {\r\n      this.Feedbacks.undecorateAll();\r\n\r\n      this.Feedbacks.getAll()\r\n        .filter((f) => f.file_key === file.key)\r\n        .forEach((f) => this.decorate(f.getDecorationData()));\r\n    }\r\n  }\r\n\r\n  onFileRename = (key, name) => {\r\n    const { folderStructure } = this.state;\r\n\r\n    try {\r\n      folderStructure.renameFile(key, name);\r\n      this.setState({ folderStructure }, () => {\r\n        this.updateLanguageBasedOnFileName(name);\r\n        this.notifyStructureChange();\r\n      });\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    }\r\n  }\r\n\r\n  onFolderRename = (key, name) => {\r\n    const { folderStructure } = this.state;\r\n\r\n    try {\r\n      folderStructure.renameFolder(key, name);\r\n      this.setState({ folderStructure }, this.notifyStructureChange);\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    }\r\n  }\r\n\r\n  onFileDelete = async (key) => {\r\n    const { folderStructure, selectedFileKey } = this.state;\r\n\r\n    if (this.Feedbacks && this.Feedbacks.getAll().find((f) => f.file_key === key)) {\r\n      try {\r\n        await this.confirmFileDelete(key);\r\n      } catch (err) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      folderStructure.deleteFile(key);\r\n      this.setState(\r\n        {\r\n          folderStructure,\r\n          selectedFileKey: key === selectedFileKey ? null : selectedFileKey,\r\n        },\r\n        this.notifyStructureChange,\r\n      );\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    }\r\n  }\r\n\r\n  confirmFileDelete(key) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      SweetAlertService.confirm({\r\n        title: 'Hold on!',\r\n        text: \"You're about to delete a file which contains feedback. Doing this will mark them as done.\",\r\n        confirmButtonText: 'Continue',\r\n        preConfirm: () => {\r\n          const feedbacksInFile = this.Feedbacks.getAll().filter((f) => f.file_key === key);\r\n          SweetAlertService.toggleLoading();\r\n          return Promise.all(feedbacksInFile.map((f) => ExerciseService.markFeedbackAsDone(f.id)))\r\n            .then((resp) => {\r\n              resp.forEach((_, index) => this.onFeedbackDone(feedbacksInFile[index].id));\r\n            });\r\n        },\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          resolve();\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  onFolderDelete = async (key) => {\r\n    const { folderStructure, selectedFileKey } = this.state;\r\n    const { folder } = folderStructure.getFolder(key);\r\n\r\n    if (this.Feedbacks.getAll().find((f) => !!folderStructure.getFile(f.file_key, folder).file)) {\r\n      try {\r\n        await this.confirmFolderDelete(key);\r\n      } catch (err) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      const { folder } = folderStructure.getFolder(key);\r\n      let selectedFileIsHere = false;\r\n\r\n      if (folderStructure.getFile(selectedFileKey, folder).file) {\r\n        selectedFileIsHere = true;\r\n      }\r\n\r\n      folderStructure.deleteFolder(key);\r\n      this.setState(\r\n        {\r\n          folderStructure,\r\n          selectedFileKey: selectedFileIsHere ? null : selectedFileKey,\r\n        },\r\n        this.notifyStructureChange,\r\n      );\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    }\r\n  }\r\n\r\n  confirmFolderDelete(key) {\r\n    const { folderStructure } = this.state;\r\n    const { folder } = folderStructure.getFolder(key);\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      SweetAlertService.confirm({\r\n        title: 'Hold on!',\r\n        text: \"You're about to delete a folder which contains files with feedback. Doing this will mark them as done.\",\r\n        confirmButtonText: 'Continue',\r\n        preConfirm: () => {\r\n          const feedbacksInFolder = this.Feedbacks\r\n            .getAll()\r\n            .filter((f) => folderStructure.getFile(f.file_key, folder).file);\r\n\r\n          SweetAlertService.toggleLoading();\r\n          return Promise.all(feedbacksInFolder.map((f) => ExerciseService.markFeedbackAsDone(f.id)))\r\n            .then((resp) => {\r\n              resp.forEach((_, index) => this.onFeedbackDone(feedbacksInFolder[index].id));\r\n            });\r\n        },\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          resolve();\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  onDownload = () => {\r\n    const { folderStructure } = this.state;\r\n    return folderStructure.downloadAsZip();\r\n  }\r\n\r\n  getFolderStructure = () => {\r\n    const { folderStructure } = this.state;\r\n    if (folderStructure.folders.length || folderStructure.files.length) {\r\n      return folderStructure.toJSON();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  onResize = (fileSwitcherWidth) => {\r\n    this.setState({ fileSwitcherWidth }, () => {\r\n      if (this.editor) {\r\n        this.editor.layout();\r\n      }\r\n    });\r\n  }\r\n\r\n  onAllChanges(cb) {\r\n    let cursorListener = this.editor.onDidChangeCursorPosition((e) => cb({\r\n      type: MONACO.EVENTS.CURSOR,\r\n      payload: e.position,\r\n    }));\r\n    let selectionListener = this.editor.onDidChangeCursorSelection((e) => cb({\r\n      type: MONACO.EVENTS.SELECTION,\r\n      payload: [e.selection, ...e.secondarySelections],\r\n    }));\r\n    let modelListener = this.editor.onDidChangeModelContent((e) => cb({\r\n      type: MONACO.EVENTS.MODEL,\r\n      payload: e.changes,\r\n    }));\r\n    let scrollListener = this.editor.onDidScrollChange((e) => cb({\r\n      type: MONACO.EVENTS.SCROLL,\r\n      payload: {\r\n        scrollLeft: e.scrollLeft,\r\n        scrollTop: e.scrollTop,\r\n      },\r\n    }));\r\n\r\n    return function offAllChanges() {\r\n      cursorListener.dispose();\r\n      selectionListener.dispose();\r\n      modelListener.dispose();\r\n      scrollListener.dispose();\r\n    };\r\n  }\r\n\r\n  applyEvent({ type, payload }) {\r\n    try {\r\n      switch (type) {\r\n        case MONACO.EVENTS.CURSOR:\r\n          this.editor.setPosition(payload);\r\n          this.editor.focus();\r\n          break;\r\n        case MONACO.EVENTS.SELECTION:\r\n          this.editor.setSelections(payload);\r\n          break;\r\n        case MONACO.EVENTS.MODEL:\r\n          this.editor.executeEdits('user', payload);\r\n          break;\r\n        case MONACO.EVENTS.SCROLL:\r\n          this.editor.setScrollPosition(payload);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  notifyStructureChange = () => {\r\n    const { onStructureChange } = this.props;\r\n\r\n    if (typeof onStructureChange === 'function') {\r\n      onStructureChange(this.getFolderStructure());\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  render() {\r\n    this.editor.getModel().render();\r\n    this.editor.render();\r\n  }\r\n\r\n  focus() {\r\n    this.editor.focus();\r\n  }\r\n\r\n  uploadStructure = ({ nativeEvent }, withInit = true) => {\r\n    this.setState({\r\n      isDropable: false,\r\n    });\r\n\r\n    let computeFolderStructure = null;\r\n\r\n    if (nativeEvent.target.webkitEntries && nativeEvent.target.webkitEntries.length) {\r\n      computeFolderStructure = fsEntriesToFolderStructure(nativeEvent.target.webkitEntries);\r\n    } else {\r\n      computeFolderStructure = filesToFolderStructure(nativeEvent.target.files);\r\n    }\r\n\r\n    computeFolderStructure.then((folderStructure) => {\r\n      this.setState(\r\n        {\r\n          folderStructure,\r\n          selectedFileKey: null,\r\n        },\r\n        () => {\r\n          if (!withInit) {\r\n            return;\r\n          }\r\n\r\n          this.initEditor();\r\n          if (this.editor) {\r\n            this.toggleFit(true);\r\n\r\n            this._baseModelChangeListener.dispose();\r\n            this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\r\n          }\r\n        },\r\n      );\r\n    });\r\n  }\r\n\r\n  toggleFit = (force = undefined) => {\r\n    console.log('TOGGLE FIT');\r\n    // const { fixedHeight: fixedHeightState } = this.state;\r\n\r\n    // const editorElHeight = this.editorRef.current.getBoundingClientRect().height;\r\n    // let fixedHeight: any = false;\r\n    // if (!fixedHeightState || force === true) {\r\n    //   // eslint-disable-next-line max-len\r\n    //   fixedHeight = this.editor.getModel().getLineCount() * this.editor.getConfiguration().lineHeight;\r\n    // }\r\n\r\n    // this.setState({ fixedHeight: Math.max(editorElHeight, fixedHeight) }, () => {\r\n    //   this.editor.layout();\r\n    // });\r\n  }\r\n\r\n  // DragNDrop\r\n  onDragEnter = (e) => {\r\n    const { readOnly } = this.props;\r\n\r\n    if (readOnly) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    this.setState({\r\n      isDropable: true,\r\n    });\r\n  }\r\n\r\n  onDragLeave = (e) => {\r\n    const { readOnly } = this.props;\r\n\r\n    if (readOnly) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    if (e.target.tagName === 'INPUT' && e.target.type === 'file') {\r\n      this.setState({\r\n        isDropable: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  onReplace = (e) => {\r\n    e.persist();\r\n\r\n    let swalOptions: any = {\r\n      title: 'Hold on!',\r\n      confirmButtonText: 'Continue',\r\n    };\r\n\r\n    if (this.Feedbacks && this.Feedbacks.getAll().length) {\r\n      swalOptions.text = 'Vei suprascrie toate foldrele și fișierele, iar feedback-urile vor fi marcate ca și rezolvate.';\r\n      swalOptions.preConfirm = () => {\r\n        const allFeedbacks = this.Feedbacks.getAll();\r\n\r\n        SweetAlertService.toggleLoading();\r\n\r\n        return Promise\r\n          .all(allFeedbacks.map((f) => ExerciseService.markFeedbackAsDone(f.id)))\r\n          .then((resp) => {\r\n            resp.forEach((_, index) => this.onFeedbackDone(allFeedbacks[index].id));\r\n          });\r\n      };\r\n    } else {\r\n      swalOptions.text = 'Vei suprascrie toate folderele și fișierele existente';\r\n    }\r\n\r\n    SweetAlertService.confirm(swalOptions).then((result) => {\r\n      if (result.isConfirmed) {\r\n        this.uploadStructure(e, false);\r\n        e.target.value = null;\r\n      } else {\r\n        this.setState({\r\n          isDropable: false,\r\n        });\r\n        e.target.value = null;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default MonacoBase;\r\n"]},"metadata":{},"sourceType":"module"}