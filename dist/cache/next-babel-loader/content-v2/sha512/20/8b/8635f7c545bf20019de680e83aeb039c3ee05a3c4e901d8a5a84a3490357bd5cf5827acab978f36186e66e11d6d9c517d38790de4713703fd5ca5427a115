{"ast":null,"code":"import _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\login\\\\Login.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport debounce from 'lodash/debounce';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faSpinner, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport UserService from '~/services/User.service';\nimport LoginButtons from './LoginButtons/LoginButtons';\nimport Form, { FormGroup, Checkbox, InputWithIcon, PasswordReveal } from '~/components/Form';\nimport { loadInfo } from '~/redux/user/user.actions';\nimport { getStore } from '~/redux/store';\nimport styles from './Login.module.scss';\n\nvar Login = /*#__PURE__*/function (_Component) {\n  _inherits(Login, _Component);\n\n  var _super = _createSuper(Login);\n\n  function Login(_props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"checkUsernameDebouncedFn\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onUsernameChange\", function (e) {\n      var _e$target$value;\n\n      var value = (_e$target$value = e.target.value) !== null && _e$target$value !== void 0 ? _e$target$value : '';\n      value = value.trim();\n\n      _this.setState({\n        username: value,\n        usernameExists: undefined\n      });\n\n      if (!value) {\n        return;\n      }\n\n      if (_this.checkUsernameDebouncedFn) {\n        // Cancel previous call\n        _this.checkUsernameDebouncedFn.cancel();\n      } // Start a new one so we don't overload server with requests\n\n\n      _this.checkUsernameDebouncedFn = debounce(function () {\n        UserService.checkUsername(value).then(function () {\n          return _this.setState({\n            usernameExists: true\n          });\n        })[\"catch\"](function () {\n          return _this.setState({\n            usernameExists: false\n          });\n        });\n      }, 250);\n\n      _this.checkUsernameDebouncedFn();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeMode\", function (newMode) {\n      var mode = _this.state.mode;\n\n      if (newMode === mode) {\n        // Do nothing since we handle the submit separately\n        return;\n      } // FIXME\n      // Without applying the delay, the form will also get\n      // get submitted. Maybe there's a better solution?\n\n\n      setTimeout(function () {\n        return _this.setState({\n          mode: newMode\n        });\n      }, 0);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submit\", function (props) {\n      var mode = _this.state.mode;\n      var onSuccess = _this.props.onSuccess;\n      var apiToCall = mode === 'register' ? UserService.register : UserService.login;\n\n      _this.setState({\n        loading: true\n      });\n\n      apiToCall(props).then(function (user) {\n        getStore().dispatch(loadInfo(user));\n\n        if (onSuccess) {\n          onSuccess();\n        }\n      })[\"catch\"](function (error) {\n        return _this.setState({\n          serverError: error.message\n        });\n      })[\"finally\"](function () {\n        return _this.setState({\n          loading: false\n        });\n      });\n    });\n\n    _this.state = {\n      mode: 'login',\n      loading: false,\n      serverError: null,\n      username: '',\n      usernameExists: undefined\n    };\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$checkUsernameDe;\n\n      (_this$checkUsernameDe = this.checkUsernameDebouncedFn) === null || _this$checkUsernameDe === void 0 ? void 0 : _this$checkUsernameDe.cancel();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          mode = _this$state.mode,\n          loading = _this$state.loading,\n          serverError = _this$state.serverError,\n          usernameExists = _this$state.usernameExists,\n          username = _this$state.username;\n      var className = this.props.className;\n      return __jsx(\"div\", {\n        className: \"\".concat(styles['login-form'], \" \").concat(className || ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 7\n        }\n      }, __jsx(Form, {\n        onSubmit: this.submit,\n        onInput: function onInput() {\n          return _this2.setState({\n            serverError: null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }, __jsx(FormGroup, {\n        className: \"mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      }, __jsx(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }\n      }, __jsx(\"span\", {\n        className: \"label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }\n      }, mode === 'register' ? 'Email' : 'Email sau username'), __jsx(\"input\", {\n        required: true,\n        type: \"text\",\n        autoCapitalize: \"none\",\n        name: mode === 'register' ? 'email' : 'emailOrUsername',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }\n      }))), mode === 'register' && __jsx(FormGroup, {\n        className: \"mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      }, __jsx(\"span\", {\n        className: \"label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, \" Username \"), __jsx(InputWithIcon, {\n        required: true,\n        type: \"text\",\n        name: \"username\",\n        onChange: this.onUsernameChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, usernameExists && __jsx(FontAwesomeIcon, {\n        width: \"1em\",\n        className: \"text-red\",\n        icon: faTimes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 38\n        }\n      }), usernameExists === false && __jsx(FontAwesomeIcon, {\n        width: \"1em\",\n        className: \"text-green\",\n        icon: faCheck,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 48\n        }\n      }), usernameExists === undefined && username && __jsx(FontAwesomeIcon, {\n        width: \"1em\",\n        className: \"rotate\",\n        icon: faSpinner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 64\n        }\n      })))), __jsx(FormGroup, {\n        className: \"mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }\n      }, __jsx(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, __jsx(\"span\", {\n        className: \"label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      }, \" Parola \"), __jsx(PasswordReveal, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }\n      }))), mode === 'register' && __jsx(Checkbox, {\n        required: true,\n        name: \"confirm\",\n        className: \"d-flex mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: '0.85em'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }\n      }, \"Am citit \\u0219i sunt de acord cu\", ' ', __jsx(\"a\", {\n        href: \"/privacy\",\n        className: \"link\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }\n      }, \"Termenii \\u0219i Condi\\u021Biile\"), ' ', \"de utilizare.\")), serverError && __jsx(\"p\", {\n        className: \"\".concat(styles['server-error'], \" text-red text-bold\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 27\n        }\n      }, serverError), __jsx(LoginButtons, {\n        mode: mode,\n        loading: loading,\n        onLogin: function onLogin() {\n          return _this2.changeMode('login');\n        },\n        onRegister: function onRegister() {\n          return _this2.changeMode('register');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/login/Login.tsx"],"names":["React","Component","debounce","FontAwesomeIcon","faCheck","faSpinner","faTimes","UserService","LoginButtons","Form","FormGroup","Checkbox","InputWithIcon","PasswordReveal","loadInfo","getStore","styles","Login","props","e","value","target","trim","setState","username","usernameExists","undefined","checkUsernameDebouncedFn","cancel","checkUsername","then","newMode","mode","state","setTimeout","onSuccess","apiToCall","register","login","loading","user","dispatch","error","serverError","message","className","submit","onUsernameChange","fontSize","changeMode"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,OAA7B,QAA4C,mCAA5C;AAEA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,IAAP,IACEC,SADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,cAJF,QAKO,mBALP;AAMA,SAASC,QAAT,QAAyB,2BAAzB;AAEA,SAASC,QAAT,QAAyB,eAAzB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;;IAeMC,K;;;;;AAGJ,iBAAYC,MAAZ,EAA4B;AAAA;;AAAA;;AAC1B,8BAAMA,MAAN;;AAD0B;;AAAA,uEAgBT,UAACC,CAAD,EAAO;AAAA;;AACxB,UAAIC,KAAa,sBAAGD,CAAC,CAACE,MAAF,CAASD,KAAZ,6DAAqB,EAAtC;AACAA,MAAAA,KAAK,GAAGA,KAAK,CAACE,IAAN,EAAR;;AAEA,YAAKC,QAAL,CAAc;AACZC,QAAAA,QAAQ,EAAEJ,KADE;AAEZK,QAAAA,cAAc,EAAEC;AAFJ,OAAd;;AAKA,UAAI,CAACN,KAAL,EAAY;AACV;AACD;;AAED,UAAI,MAAKO,wBAAT,EAAmC;AACjC;AACA,cAAKA,wBAAL,CAA8BC,MAA9B;AACD,OAhBuB,CAkBxB;;;AACA,YAAKD,wBAAL,GAAgCzB,QAAQ,CAAC,YAAM;AAC7CK,QAAAA,WAAW,CAACsB,aAAZ,CAA0BT,KAA1B,EACGU,IADH,CACQ;AAAA,iBAAM,MAAKP,QAAL,CAAc;AAAEE,YAAAA,cAAc,EAAE;AAAlB,WAAd,CAAN;AAAA,SADR,WAES;AAAA,iBAAM,MAAKF,QAAL,CAAc;AAAEE,YAAAA,cAAc,EAAE;AAAlB,WAAd,CAAN;AAAA,SAFT;AAGD,OAJuC,EAIrC,GAJqC,CAAxC;;AAMA,YAAKE,wBAAL;AACD,KA1C2B;;AAAA,iEA4Cf,UAACI,OAAD,EAAmC;AAAA,UACtCC,IADsC,GAC7B,MAAKC,KADwB,CACtCD,IADsC;;AAG9C,UAAID,OAAO,KAAKC,IAAhB,EAAsB;AACpB;AACA;AACD,OAN6C,CAQ9C;AACA;AACA;;;AACAE,MAAAA,UAAU,CAAC;AAAA,eAAM,MAAKX,QAAL,CAAc;AAAES,UAAAA,IAAI,EAAED;AAAR,SAAd,CAAN;AAAA,OAAD,EAAyC,CAAzC,CAAV;AACD,KAxD2B;;AAAA,6DA0DnB,UAACb,KAAD,EAAW;AAAA,UACVc,IADU,GACD,MAAKC,KADJ,CACVD,IADU;AAAA,UAEVG,SAFU,GAEI,MAAKjB,KAFT,CAEViB,SAFU;AAGlB,UAAMC,SAAS,GAAGJ,IAAI,KAAK,UAAT,GAAsBzB,WAAW,CAAC8B,QAAlC,GAA6C9B,WAAW,CAAC+B,KAA3E;;AAEA,YAAKf,QAAL,CAAc;AAAEgB,QAAAA,OAAO,EAAE;AAAX,OAAd;;AAEAH,MAAAA,SAAS,CAAClB,KAAD,CAAT,CACGY,IADH,CACQ,UAACU,IAAD,EAA6B;AACjCzB,QAAAA,QAAQ,GAAG0B,QAAX,CAAoB3B,QAAQ,CAAC0B,IAAD,CAA5B;;AAEA,YAAIL,SAAJ,EAAe;AACbA,UAAAA,SAAS;AACV;AACF,OAPH,WAQS,UAACO,KAAD;AAAA,eAAW,MAAKnB,QAAL,CAAc;AAAEoB,UAAAA,WAAW,EAAED,KAAK,CAACE;AAArB,SAAd,CAAX;AAAA,OART,aASW;AAAA,eAAM,MAAKrB,QAAL,CAAc;AAAEgB,UAAAA,OAAO,EAAE;AAAX,SAAd,CAAN;AAAA,OATX;AAUD,KA3E2B;;AAG1B,UAAKN,KAAL,GAAa;AACXD,MAAAA,IAAI,EAAE,OADK;AAEXO,MAAAA,OAAO,EAAE,KAFE;AAGXI,MAAAA,WAAW,EAAE,IAHF;AAIXnB,MAAAA,QAAQ,EAAE,EAJC;AAKXC,MAAAA,cAAc,EAAEC;AALL,KAAb;AAH0B;AAU3B;;;;2CAEsB;AAAA;;AACrB,oCAAKC,wBAAL,gFAA+BC,MAA/B;AACD;;;6BA+DQ;AAAA;;AAAA,wBAOH,KAAKK,KAPF;AAAA,UAELD,IAFK,eAELA,IAFK;AAAA,UAGLO,OAHK,eAGLA,OAHK;AAAA,UAILI,WAJK,eAILA,WAJK;AAAA,UAKLlB,cALK,eAKLA,cALK;AAAA,UAMLD,QANK,eAMLA,QANK;AAAA,UAQCqB,SARD,GAQe,KAAK3B,KARpB,CAQC2B,SARD;AAUP,aACE;AAAK,QAAA,SAAS,YAAK7B,MAAM,CAAC,YAAD,CAAX,cAA6B6B,SAAS,IAAI,EAA1C,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKC,MAArB;AAA6B,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACvB,QAAL,CAAc;AAAEoB,YAAAA,WAAW,EAAE;AAAf,WAAd,CAAN;AAAA,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,SAAD;AAAW,QAAA,SAAS,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGX,IAAI,KAAK,UAAT,GACG,OADH,GAEG,oBAHN,CADF,EAME;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,cAAc,EAAC,MAHjB;AAIE,QAAA,IAAI,EAAEA,IAAI,KAAK,UAAT,GAAsB,OAAtB,GAAgC,iBAJxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF,CADF,EAiBGA,IAAI,KAAK,UAAT,IACC,MAAC,SAAD;AAAW,QAAA,SAAS,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE,MAAC,aAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,QAAQ,EAAE,KAAKe,gBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMGtB,cAAc,IAAI,MAAC,eAAD;AAAiB,QAAA,KAAK,EAAC,KAAvB;AAA6B,QAAA,SAAS,EAAC,UAAvC;AAAkD,QAAA,IAAI,EAAEnB,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANrB,EAOGmB,cAAc,KAAK,KAAnB,IAA4B,MAAC,eAAD;AAAiB,QAAA,KAAK,EAAC,KAAvB;AAA6B,QAAA,SAAS,EAAC,YAAvC;AAAoD,QAAA,IAAI,EAAErB,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAP/B,EAQGqB,cAAc,KAAKC,SAAnB,IAAgCF,QAAhC,IAA4C,MAAC,eAAD;AAAiB,QAAA,KAAK,EAAC,KAAvB;AAA6B,QAAA,SAAS,EAAC,QAAvC;AAAgD,QAAA,IAAI,EAAEnB,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAR/C,CAFF,CADF,CAlBJ,EAmCE,MAAC,SAAD;AAAW,QAAA,SAAS,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,CAnCF,EA0CI2B,IAAI,KAAK,UAAV,IACC,MAAC,QAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,IAAI,EAAC,SAFP;AAGE,QAAA,SAAS,EAAC,aAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAM,QAAA,KAAK,EAAE;AAAEgB,UAAAA,QAAQ,EAAE;AAAZ,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAEG,GAFH,EAGE;AAAG,QAAA,IAAI,EAAC,UAAR;AAAmB,QAAA,SAAS,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAHF,EAMG,GANH,kBALF,CA3CJ,EA4DGL,WAAW,IAAI;AAAG,QAAA,SAAS,YAAK3B,MAAM,CAAC,cAAD,CAAX,wBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+D2B,WAA/D,CA5DlB,EA8DE,MAAC,YAAD;AACE,QAAA,IAAI,EAAEX,IADR;AAEE,QAAA,OAAO,EAAEO,OAFX;AAGE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACU,UAAL,CAAgB,OAAhB,CAAN;AAAA,SAHX;AAIE,QAAA,UAAU,EAAE;AAAA,iBAAM,MAAI,CAACA,UAAL,CAAgB,UAAhB,CAAN;AAAA,SAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA9DF,CADF,CADF;AAyED;;;;EAnKiBhD,S;;AAsKpB,eAAegB,KAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport debounce from 'lodash/debounce';\r\nimport { DebouncedFunc } from 'lodash';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faSpinner, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport UserService from '~/services/User.service';\r\nimport LoginButtons from './LoginButtons/LoginButtons';\r\nimport Form, {\r\n  FormGroup,\r\n  Checkbox,\r\n  InputWithIcon,\r\n  PasswordReveal,\r\n} from '~/components/Form';\r\nimport { loadInfo } from '~/redux/user/user.actions';\r\nimport { UserState } from '~/redux/user/types';\r\nimport { getStore } from '~/redux/store';\r\n\r\nimport styles from './Login.module.scss';\r\n\r\ninterface MyProps {\r\n  className?: string;\r\n  onSuccess?: () => void\r\n}\r\n\r\ninterface MyState {\r\n  mode: 'login' | 'register',\r\n  loading: boolean;\r\n  username: string;\r\n  serverError: string;\r\n  usernameExists: boolean;\r\n}\r\n\r\nclass Login extends Component<MyProps, MyState> {\r\n  private checkUsernameDebouncedFn: DebouncedFunc<() => void>;\r\n\r\n  constructor(props: MyProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      mode: 'login',\r\n      loading: false,\r\n      serverError: null,\r\n      username: '',\r\n      usernameExists: undefined,\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.checkUsernameDebouncedFn?.cancel();\r\n  }\r\n\r\n  onUsernameChange = (e) => {\r\n    let value: string = e.target.value ?? '';\r\n    value = value.trim();\r\n\r\n    this.setState({\r\n      username: value,\r\n      usernameExists: undefined,\r\n    });\r\n\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    if (this.checkUsernameDebouncedFn) {\r\n      // Cancel previous call\r\n      this.checkUsernameDebouncedFn.cancel();\r\n    }\r\n\r\n    // Start a new one so we don't overload server with requests\r\n    this.checkUsernameDebouncedFn = debounce(() => {\r\n      UserService.checkUsername(value)\r\n        .then(() => this.setState({ usernameExists: true }))\r\n        .catch(() => this.setState({ usernameExists: false }));\r\n    }, 250);\r\n\r\n    this.checkUsernameDebouncedFn();\r\n  }\r\n\r\n  changeMode = (newMode: 'login' | 'register') => {\r\n    const { mode } = this.state;\r\n\r\n    if (newMode === mode) {\r\n      // Do nothing since we handle the submit separately\r\n      return;\r\n    }\r\n\r\n    // FIXME\r\n    // Without applying the delay, the form will also get\r\n    // get submitted. Maybe there's a better solution?\r\n    setTimeout(() => this.setState({ mode: newMode }), 0);\r\n  }\r\n\r\n  submit = (props) => {\r\n    const { mode } = this.state;\r\n    const { onSuccess } = this.props;\r\n    const apiToCall = mode === 'register' ? UserService.register : UserService.login;\r\n\r\n    this.setState({ loading: true });\r\n\r\n    apiToCall(props)\r\n      .then((user: UserState['info']) => {\r\n        getStore().dispatch(loadInfo(user));\r\n\r\n        if (onSuccess) {\r\n          onSuccess();\r\n        }\r\n      })\r\n      .catch((error) => this.setState({ serverError: error.message }))\r\n      .finally(() => this.setState({ loading: false }));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      mode,\r\n      loading,\r\n      serverError,\r\n      usernameExists,\r\n      username,\r\n    } = this.state;\r\n    const { className } = this.props;\r\n\r\n    return (\r\n      <div className={`${styles['login-form']} ${className || ''}`}>\r\n        <Form onSubmit={this.submit} onInput={() => this.setState({ serverError: null })}>\r\n          <FormGroup className=\"mb-4\">\r\n            <label>\r\n              <span className=\"label\">\r\n                {mode === 'register'\r\n                  ? 'Email'\r\n                  : 'Email sau username'}\r\n              </span>\r\n              <input\r\n                required\r\n                type=\"text\"\r\n                autoCapitalize=\"none\"\r\n                name={mode === 'register' ? 'email' : 'emailOrUsername'}\r\n              />\r\n            </label>\r\n          </FormGroup>\r\n\r\n          {mode === 'register' && (\r\n            <FormGroup className=\"mb-4\">\r\n              <label>\r\n                <span className=\"label\"> Username </span>\r\n                <InputWithIcon\r\n                  required\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  onChange={this.onUsernameChange}\r\n                >\r\n                  {usernameExists && <FontAwesomeIcon width=\"1em\" className=\"text-red\" icon={faTimes} />}\r\n                  {usernameExists === false && <FontAwesomeIcon width=\"1em\" className=\"text-green\" icon={faCheck} />}\r\n                  {usernameExists === undefined && username && <FontAwesomeIcon width=\"1em\" className=\"rotate\" icon={faSpinner} />}\r\n                </InputWithIcon>\r\n              </label>\r\n            </FormGroup>\r\n          )}\r\n\r\n          <FormGroup className=\"mb-4\">\r\n            <label>\r\n              <span className=\"label\"> Parola </span>\r\n              <PasswordReveal />\r\n            </label>\r\n          </FormGroup>\r\n\r\n          {(mode === 'register') && (\r\n            <Checkbox\r\n              required\r\n              name=\"confirm\"\r\n              className=\"d-flex mb-4\"\r\n            >\r\n              <span style={{ fontSize: '0.85em' }}>\r\n                Am citit și sunt de acord cu\r\n                {' '}\r\n                <a href=\"/privacy\" className=\"link\">\r\n                  Termenii și Condițiile\r\n                </a>\r\n                {' '}\r\n                de utilizare.\r\n              </span>\r\n            </Checkbox>\r\n          )}\r\n\r\n          {serverError && <p className={`${styles['server-error']} text-red text-bold`}>{serverError}</p>}\r\n\r\n          <LoginButtons\r\n            mode={mode}\r\n            loading={loading}\r\n            onLogin={() => this.changeMode('login')}\r\n            onRegister={() => this.changeMode('register')}\r\n          />\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}