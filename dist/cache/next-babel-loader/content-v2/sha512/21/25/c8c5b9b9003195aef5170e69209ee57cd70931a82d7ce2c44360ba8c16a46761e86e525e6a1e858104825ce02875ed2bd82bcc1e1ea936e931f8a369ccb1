{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\login\\\\Login.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport debounce from 'lodash/debounce';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faSpinner, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport UserService from '~/services/User.service';\nimport LoginButtons from './LoginButtons/LoginButtons';\nimport Form, { FormGroup, Checkbox, InputWithIcon, PasswordReveal } from '~/components/Form';\nimport { loadInfo } from '~/redux/user/user.actions';\nimport { getStore } from '~/redux/store';\nimport styles from './Login.module.scss';\n\nclass Login extends Component {\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"checkUsernameDebouncedFn\", void 0);\n\n    _defineProperty(this, \"onUsernameChange\", e => {\n      var _e$target$value;\n\n      let value = (_e$target$value = e.target.value) !== null && _e$target$value !== void 0 ? _e$target$value : '';\n      value = value.trim();\n      this.setState({\n        username: value,\n        usernameExists: undefined\n      });\n\n      if (!value) {\n        return;\n      }\n\n      if (this.checkUsernameDebouncedFn) {\n        // Cancel previous call\n        this.checkUsernameDebouncedFn.cancel();\n      } // Start a new one so we don't overload server with requests\n\n\n      this.checkUsernameDebouncedFn = debounce(() => {\n        UserService.checkUsername(value).then(() => this.setState({\n          usernameExists: true\n        })).catch(() => this.setState({\n          usernameExists: false\n        }));\n      }, 250);\n      this.checkUsernameDebouncedFn();\n    });\n\n    _defineProperty(this, \"changeMode\", newMode => {\n      const {\n        mode\n      } = this.state;\n\n      if (newMode === mode) {\n        // Do nothing since we handle the submit separately\n        return;\n      } // FIXME\n      // Without applying the delay, the form will also get\n      // get submitted. Maybe there's a better solution?\n\n\n      setTimeout(() => this.setState({\n        mode: newMode\n      }), 0);\n    });\n\n    _defineProperty(this, \"submit\", props => {\n      const {\n        mode\n      } = this.state;\n      const {\n        onSuccess\n      } = this.props;\n      const apiToCall = mode === 'register' ? UserService.register : UserService.login;\n      this.setState({\n        loading: true\n      });\n      apiToCall(props).then(user => {\n        getStore().dispatch(loadInfo(user));\n\n        if (onSuccess) {\n          onSuccess(user);\n        }\n      }).catch(error => this.setState({\n        serverError: error.message\n      })).finally(() => this.setState({\n        loading: false\n      }));\n    });\n\n    this.state = {\n      mode: 'login',\n      loading: false,\n      serverError: null,\n      username: '',\n      usernameExists: undefined\n    };\n  }\n\n  componentWillUnmount() {\n    var _this$checkUsernameDe;\n\n    (_this$checkUsernameDe = this.checkUsernameDebouncedFn) === null || _this$checkUsernameDe === void 0 ? void 0 : _this$checkUsernameDe.cancel();\n  }\n\n  render() {\n    const {\n      mode,\n      loading,\n      serverError,\n      usernameExists,\n      username\n    } = this.state;\n    const {\n      className\n    } = this.props;\n    return __jsx(\"div\", {\n      className: `${styles['login-form']} ${className || ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, __jsx(Form, {\n      id: \"form\",\n      onSubmit: this.submit,\n      onInput: () => this.setState({\n        serverError: null\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, __jsx(FormGroup, {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }, mode === 'register' ? 'Email' : 'Email sau username'), __jsx(\"input\", {\n      required: true,\n      type: \"text\",\n      autoCapitalize: \"none\",\n      name: mode === 'register' ? 'email' : 'emailOrUsername',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    }))), mode === 'register' && __jsx(FormGroup, {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, \" Username \"), __jsx(InputWithIcon, {\n      required: true,\n      type: \"text\",\n      name: \"username\",\n      onChange: this.onUsernameChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }, usernameExists && __jsx(FontAwesomeIcon, {\n      width: \"1em\",\n      className: \"text-red\",\n      icon: faTimes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 38\n      }\n    }), usernameExists === false && __jsx(FontAwesomeIcon, {\n      width: \"1em\",\n      className: \"text-green\",\n      icon: faCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 48\n      }\n    }), usernameExists === undefined && username && __jsx(FontAwesomeIcon, {\n      width: \"1em\",\n      className: \"rotate\",\n      icon: faSpinner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 64\n      }\n    })))), __jsx(FormGroup, {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, \" Parola \"), __jsx(PasswordReveal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }\n    }))), mode === 'register' && __jsx(Checkbox, {\n      required: true,\n      name: \"confirm\",\n      className: \"d-flex mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      style: {\n        fontSize: '0.85em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }\n    }, \"Am citit \\u0219i sunt de acord cu\", ' ', __jsx(\"a\", {\n      href: \"/termeni-si-conditii\",\n      className: \"link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, \"Termenii \\u0219i Condi\\u021Biile\"), ' ', \"de utilizare.\")), serverError && __jsx(\"p\", {\n      className: `${styles['server-error']} text-red text-bold`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 27\n      }\n    }, serverError), __jsx(LoginButtons, {\n      mode: mode,\n      loading: loading,\n      onLogin: () => this.changeMode('login'),\n      onRegister: () => this.changeMode('register'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/login/Login.tsx"],"names":["React","Component","debounce","FontAwesomeIcon","faCheck","faSpinner","faTimes","UserService","LoginButtons","Form","FormGroup","Checkbox","InputWithIcon","PasswordReveal","loadInfo","getStore","styles","Login","constructor","props","e","value","target","trim","setState","username","usernameExists","undefined","checkUsernameDebouncedFn","cancel","checkUsername","then","catch","newMode","mode","state","setTimeout","onSuccess","apiToCall","register","login","loading","user","dispatch","error","serverError","message","finally","componentWillUnmount","render","className","submit","onUsernameChange","fontSize","changeMode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport debounce from 'lodash/debounce';\r\nimport { DebouncedFunc } from 'lodash';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faSpinner, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport UserService from '~/services/User.service';\r\nimport LoginButtons from './LoginButtons/LoginButtons';\r\nimport Form, {\r\n  FormGroup,\r\n  Checkbox,\r\n  InputWithIcon,\r\n  PasswordReveal,\r\n} from '~/components/Form';\r\nimport { loadInfo } from '~/redux/user/user.actions';\r\nimport { UserState } from '~/redux/user/types';\r\nimport { getStore } from '~/redux/store';\r\n\r\nimport styles from './Login.module.scss';\r\n\r\ninterface MyProps {\r\n  className?: string;\r\n  onSuccess?: (user?: UserState['info']) => void\r\n}\r\n\r\ninterface MyState {\r\n  mode: 'login' | 'register',\r\n  loading: boolean;\r\n  username: string;\r\n  serverError: string;\r\n  usernameExists: boolean;\r\n}\r\n\r\nclass Login extends Component<MyProps, MyState> {\r\n  private checkUsernameDebouncedFn: DebouncedFunc<() => void>;\r\n\r\n  constructor(props: MyProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      mode: 'login',\r\n      loading: false,\r\n      serverError: null,\r\n      username: '',\r\n      usernameExists: undefined,\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.checkUsernameDebouncedFn?.cancel();\r\n  }\r\n\r\n  onUsernameChange = (e) => {\r\n    let value: string = e.target.value ?? '';\r\n    value = value.trim();\r\n\r\n    this.setState({\r\n      username: value,\r\n      usernameExists: undefined,\r\n    });\r\n\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    if (this.checkUsernameDebouncedFn) {\r\n      // Cancel previous call\r\n      this.checkUsernameDebouncedFn.cancel();\r\n    }\r\n\r\n    // Start a new one so we don't overload server with requests\r\n    this.checkUsernameDebouncedFn = debounce(() => {\r\n      UserService.checkUsername(value)\r\n        .then(() => this.setState({ usernameExists: true }))\r\n        .catch(() => this.setState({ usernameExists: false }));\r\n    }, 250);\r\n\r\n    this.checkUsernameDebouncedFn();\r\n  }\r\n\r\n  changeMode = (newMode: 'login' | 'register') => {\r\n    const { mode } = this.state;\r\n\r\n    if (newMode === mode) {\r\n      // Do nothing since we handle the submit separately\r\n      return;\r\n    }\r\n\r\n    // FIXME\r\n    // Without applying the delay, the form will also get\r\n    // get submitted. Maybe there's a better solution?\r\n    setTimeout(() => this.setState({ mode: newMode }), 0);\r\n  }\r\n\r\n  submit = (props) => {\r\n    const { mode } = this.state;\r\n    const { onSuccess } = this.props;\r\n    const apiToCall = mode === 'register' ? UserService.register : UserService.login;\r\n\r\n    this.setState({ loading: true });\r\n\r\n    apiToCall(props)\r\n      .then((user: UserState['info']) => {\r\n        getStore().dispatch(loadInfo(user));\r\n\r\n        if (onSuccess) {\r\n          onSuccess(user);\r\n        }\r\n      })\r\n      .catch((error) => this.setState({ serverError: error.message }))\r\n      .finally(() => this.setState({ loading: false }));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      mode,\r\n      loading,\r\n      serverError,\r\n      usernameExists,\r\n      username,\r\n    } = this.state;\r\n    const { className } = this.props;\r\n\r\n    return (\r\n      <div className={`${styles['login-form']} ${className || ''}`}>\r\n        <Form id=\"form\" onSubmit={this.submit} onInput={() => this.setState({ serverError: null })}>\r\n          <FormGroup className=\"mb-4\">\r\n            <label>\r\n              <span className=\"label\">\r\n                {mode === 'register'\r\n                  ? 'Email'\r\n                  : 'Email sau username'}\r\n              </span>\r\n              <input\r\n                required\r\n                type=\"text\"\r\n                autoCapitalize=\"none\"\r\n                name={mode === 'register' ? 'email' : 'emailOrUsername'}\r\n              />\r\n            </label>\r\n          </FormGroup>\r\n\r\n          {mode === 'register' && (\r\n            <FormGroup className=\"mb-4\">\r\n              <label>\r\n                <span className=\"label\"> Username </span>\r\n                <InputWithIcon\r\n                  required\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  onChange={this.onUsernameChange}\r\n                >\r\n                  {usernameExists && <FontAwesomeIcon width=\"1em\" className=\"text-red\" icon={faTimes} />}\r\n                  {usernameExists === false && <FontAwesomeIcon width=\"1em\" className=\"text-green\" icon={faCheck} />}\r\n                  {usernameExists === undefined && username && <FontAwesomeIcon width=\"1em\" className=\"rotate\" icon={faSpinner} />}\r\n                </InputWithIcon>\r\n              </label>\r\n            </FormGroup>\r\n          )}\r\n\r\n          <FormGroup className=\"mb-4\">\r\n            <label>\r\n              <span className=\"label\"> Parola </span>\r\n              <PasswordReveal />\r\n            </label>\r\n          </FormGroup>\r\n\r\n          {(mode === 'register') && (\r\n            <Checkbox\r\n              required\r\n              name=\"confirm\"\r\n              className=\"d-flex mb-4\"\r\n            >\r\n              <span style={{ fontSize: '0.85em' }}>\r\n                Am citit și sunt de acord cu\r\n                {' '}\r\n                <a href=\"/termeni-si-conditii\" className=\"link\">\r\n                  Termenii și Condițiile\r\n                </a>\r\n                {' '}\r\n                de utilizare.\r\n              </span>\r\n            </Checkbox>\r\n          )}\r\n\r\n          {serverError && <p className={`${styles['server-error']} text-red text-bold`}>{serverError}</p>}\r\n\r\n          <LoginButtons\r\n            mode={mode}\r\n            loading={loading}\r\n            onLogin={() => this.changeMode('login')}\r\n            onRegister={() => this.changeMode('register')}\r\n          />\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}