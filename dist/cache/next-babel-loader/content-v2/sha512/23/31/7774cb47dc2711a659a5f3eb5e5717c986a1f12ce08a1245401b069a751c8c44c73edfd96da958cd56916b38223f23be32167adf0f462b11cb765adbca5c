{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport SweetAlertService from './sweet-alert/SweetAlert.service';\n\nclass Http {\n  get(url, options = {}) {\n    return this.httpGeneric(url, _objectSpread(_objectSpread({}, options), {}, {\n      method: 'GET'\n    }));\n  }\n\n  post(url, body = {}, options = {}) {\n    return this.httpGeneric(url, _objectSpread(_objectSpread({}, options), {}, {\n      method: 'POST',\n      body\n    }));\n  }\n\n  put(url, body = {}, options = {}) {\n    return this.httpGeneric(url, _objectSpread(_objectSpread({}, options), {}, {\n      method: 'PUT',\n      body\n    }));\n  }\n\n  patch(url, body = {}, options = {}) {\n    return this.httpGeneric(url, _objectSpread(_objectSpread({}, options), {}, {\n      method: 'PATCH',\n      body\n    }));\n  }\n\n  delete(url, body = {}, options = {}) {\n    return this.httpGeneric(url, _objectSpread(_objectSpread({}, options), {}, {\n      method: 'DELETE',\n      body\n    }));\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  httpGeneric(url, options = {}) {\n    const headersInit = {\n      'content-type': 'application/json'\n    };\n\n    if (options.body && !(options.body instanceof FormData)) {\n      // eslint-disable-next-line no-param-reassign\n      options.body = JSON.stringify(options.body);\n    } else {\n      delete headersInit['content-type'];\n    }\n\n    return fetch(url, _objectSpread({\n      headers: new Headers(headersInit),\n      credentials: 'include'\n    }, options)).then(resp => {\n      if (resp.ok) {\n        return resp;\n      }\n\n      return resp.json().then(jsonResp => {\n        throw jsonResp;\n      });\n    }).catch(err => {\n      if (!err || !err.code || err.code === 500) {\n        SweetAlertService.error({\n          text: err.message || 'Refresh-uiește pagina și încearcă din nou.',\n          buttonText: 'Ok!'\n        });\n      }\n\n      throw err;\n    });\n  }\n\n}\n\nexport default new Http();","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/Http.service.ts"],"names":["SweetAlertService","Http","get","url","options","httpGeneric","method","post","body","put","patch","delete","headersInit","FormData","JSON","stringify","fetch","headers","Headers","credentials","then","resp","ok","json","jsonResp","catch","err","code","error","text","message","buttonText"],"mappings":";;;;;;AAAA,OAAOA,iBAAP,MAA8B,kCAA9B;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,GAAG,CAACC,GAAD,EAAcC,OAAO,GAAG,EAAxB,EAA4B;AAC7B,WAAO,KAAKC,WAAL,CAAiBF,GAAjB,kCAA2BC,OAA3B;AAAoCE,MAAAA,MAAM,EAAE;AAA5C,OAAP;AACD;;AAEDC,EAAAA,IAAI,CAACJ,GAAD,EAAcK,IAAI,GAAG,EAArB,EAAyBJ,OAAO,GAAG,EAAnC,EAAuC;AACzC,WAAO,KAAKC,WAAL,CAAiBF,GAAjB,kCACFC,OADE;AAELE,MAAAA,MAAM,EAAE,MAFH;AAGLE,MAAAA;AAHK,OAAP;AAKD;;AAEDC,EAAAA,GAAG,CAACN,GAAD,EAAcK,IAAI,GAAG,EAArB,EAAyBJ,OAAO,GAAG,EAAnC,EAAuC;AACxC,WAAO,KAAKC,WAAL,CAAiBF,GAAjB,kCACFC,OADE;AAELE,MAAAA,MAAM,EAAE,KAFH;AAGLE,MAAAA;AAHK,OAAP;AAKD;;AAEDE,EAAAA,KAAK,CAACP,GAAD,EAAcK,IAAI,GAAG,EAArB,EAAyBJ,OAAO,GAAG,EAAnC,EAAuC;AAC1C,WAAO,KAAKC,WAAL,CAAiBF,GAAjB,kCACFC,OADE;AAELE,MAAAA,MAAM,EAAE,OAFH;AAGLE,MAAAA;AAHK,OAAP;AAKD;;AAEDG,EAAAA,MAAM,CAACR,GAAD,EAAcK,IAAI,GAAG,EAArB,EAAyBJ,OAAO,GAAG,EAAnC,EAAuC;AAC3C,WAAO,KAAKC,WAAL,CAAiBF,GAAjB,kCACFC,OADE;AAELE,MAAAA,MAAM,EAAE,QAFH;AAGLE,MAAAA;AAHK,OAAP;AAKD,GAnCQ,CAqCT;;;AACQH,EAAAA,WAAR,CAAoBF,GAApB,EAAiCC,OAA4B,GAAG,EAAhE,EAAoE;AAClE,UAAMQ,WAAwB,GAAG;AAC/B,sBAAgB;AADe,KAAjC;;AAIA,QAAIR,OAAO,CAACI,IAAR,IAAgB,EAAEJ,OAAO,CAACI,IAAR,YAAwBK,QAA1B,CAApB,EAAyD;AACvD;AACAT,MAAAA,OAAO,CAACI,IAAR,GAAeM,IAAI,CAACC,SAAL,CAAeX,OAAO,CAACI,IAAvB,CAAf;AACD,KAHD,MAGO;AACL,aAAOI,WAAW,CAAC,cAAD,CAAlB;AACD;;AAED,WAAOI,KAAK,CAACb,GAAD;AACVc,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAYN,WAAZ,CADC;AAEVO,MAAAA,WAAW,EAAE;AAFH,OAGPf,OAHO,EAAL,CAKJgB,IALI,CAKEC,IAAD,IAAU;AACd,UAAIA,IAAI,CAACC,EAAT,EAAa;AACX,eAAOD,IAAP;AACD;;AACD,aAAOA,IAAI,CAACE,IAAL,GAAYH,IAAZ,CAAkBI,QAAD,IAAc;AACpC,cAAMA,QAAN;AACD,OAFM,CAAP;AAGD,KAZI,EAaJC,KAbI,CAaGC,GAAD,IAAS;AACd,UAAI,CAACA,GAAD,IAAQ,CAACA,GAAG,CAACC,IAAb,IAAqBD,GAAG,CAACC,IAAJ,KAAa,GAAtC,EAA2C;AACzC3B,QAAAA,iBAAiB,CAAC4B,KAAlB,CAAwB;AACtBC,UAAAA,IAAI,EAAEH,GAAG,CAACI,OAAJ,IAAe,4CADC;AAEtBC,UAAAA,UAAU,EAAE;AAFU,SAAxB;AAID;;AACD,YAAML,GAAN;AACD,KArBI,CAAP;AAsBD;;AAxEQ;;AA2EX,eAAe,IAAIzB,IAAJ,EAAf","sourcesContent":["import SweetAlertService from './sweet-alert/SweetAlert.service';\r\n\r\nclass Http {\r\n  get(url: string, options = {}) {\r\n    return this.httpGeneric(url, { ...options, method: 'GET' });\r\n  }\r\n\r\n  post(url: string, body = {}, options = {}) {\r\n    return this.httpGeneric(url, {\r\n      ...options,\r\n      method: 'POST',\r\n      body,\r\n    });\r\n  }\r\n\r\n  put(url: string, body = {}, options = {}) {\r\n    return this.httpGeneric(url, {\r\n      ...options,\r\n      method: 'PUT',\r\n      body,\r\n    });\r\n  }\r\n\r\n  patch(url: string, body = {}, options = {}) {\r\n    return this.httpGeneric(url, {\r\n      ...options,\r\n      method: 'PATCH',\r\n      body,\r\n    });\r\n  }\r\n\r\n  delete(url: string, body = {}, options = {}) {\r\n    return this.httpGeneric(url, {\r\n      ...options,\r\n      method: 'DELETE',\r\n      body,\r\n    });\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  private httpGeneric(url: string, options: Record<string, any> = {}) {\r\n    const headersInit: HeadersInit = {\r\n      'content-type': 'application/json',\r\n    };\r\n\r\n    if (options.body && !(options.body instanceof FormData)) {\r\n      // eslint-disable-next-line no-param-reassign\r\n      options.body = JSON.stringify(options.body);\r\n    } else {\r\n      delete headersInit['content-type'];\r\n    }\r\n\r\n    return fetch(url, {\r\n      headers: new Headers(headersInit),\r\n      credentials: 'include',\r\n      ...options,\r\n    })\r\n      .then((resp) => {\r\n        if (resp.ok) {\r\n          return resp;\r\n        }\r\n        return resp.json().then((jsonResp) => {\r\n          throw jsonResp;\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (!err || !err.code || err.code === 500) {\r\n          SweetAlertService.error({\r\n            text: err.message || 'Refresh-uiește pagina și încearcă din nou.',\r\n            buttonText: 'Ok!',\r\n          });\r\n        }\r\n        throw err;\r\n      });\r\n  }\r\n}\r\n\r\nexport default new Http();\r\n"]},"metadata":{},"sourceType":"module"}