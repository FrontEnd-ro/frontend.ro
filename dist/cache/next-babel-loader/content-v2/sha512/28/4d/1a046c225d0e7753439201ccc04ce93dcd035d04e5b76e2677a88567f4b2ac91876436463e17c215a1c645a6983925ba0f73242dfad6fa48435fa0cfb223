{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { uuid } from '../Utils';\nimport FolderStructure from './FolderStructure';\nexport function extractExtension(fileName) {\n  var parts = fileName.split('.');\n\n  if (parts.length === 1) {\n    return '';\n  }\n\n  return parts.pop();\n}\nexport function filterFiles(files) {\n  var mimeTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var extensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return files.filter(function (file) {\n    if (mimeTypes.includes(file.type)) {\n      return true;\n    }\n\n    if (extensions.includes(extractExtension(file.name))) {\n      return true;\n    }\n\n    return false;\n  });\n}\nexport function fsEntriesToFolderStructure(_x) {\n  return _fsEntriesToFolderStructure.apply(this, arguments);\n}\n\nfunction _fsEntriesToFolderStructure() {\n  _fsEntriesToFolderStructure = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(entries) {\n    var fileSystemUtils, toFolderStructure;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return import('file-system-utils');\n\n          case 2:\n            fileSystemUtils = _context2.sent;\n            toFolderStructure = fileSystemUtils.toFolderStructure;\n            return _context2.abrupt(\"return\", toFolderStructure(entries, entryToTextMiddleware).then(function (structure) {\n              return new FolderStructure(structure);\n            }));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fsEntriesToFolderStructure.apply(this, arguments);\n}\n\nexport function filesToFolderStructure(files) {\n  // eslint-disable-next-line no-param-reassign\n  files = _toConsumableArray(files).filter(function (f) {\n    return f.size > 0;\n  });\n  return Promise.all(files.map( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = file.name;\n              _context.t1 = uuid();\n              _context.next = 4;\n              return file.text();\n\n            case 4:\n              _context.t2 = _context.sent;\n              return _context.abrupt(\"return\", {\n                name: _context.t0,\n                key: _context.t1,\n                content: _context.t2\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x2) {\n      return _ref.apply(this, arguments);\n    };\n  }())).then(function (files) {\n    return new FolderStructure({\n      folders: [],\n      files: files\n    });\n  });\n}\n\nfunction entryToTextMiddleware(entry) {\n  return new Promise(function (resolve) {\n    entry.file(function (file) {\n      resolve(file.text().then(function (textContent) {\n        return {\n          name: file.name,\n          key: uuid(),\n          content: textContent\n        };\n      }));\n    }, function (error) {\n      console.error('Error when processing FileEntry:', error);\n      resolve(null);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/utils/FileUtils.ts"],"names":["uuid","FolderStructure","extractExtension","fileName","parts","split","length","pop","filterFiles","files","mimeTypes","extensions","filter","file","includes","type","name","fsEntriesToFolderStructure","entries","fileSystemUtils","toFolderStructure","entryToTextMiddleware","then","structure","filesToFolderStructure","f","size","Promise","all","map","text","key","content","folders","entry","resolve","textContent","error","console"],"mappings":"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","sourcesContent":["import { uuid } from '../Utils';\r\nimport FolderStructure from './FolderStructure';\r\n\r\nexport function extractExtension(fileName: string) {\r\n  const parts = fileName.split('.');\r\n  if (parts.length === 1) {\r\n    return '';\r\n  }\r\n\r\n  return parts.pop();\r\n}\r\n\r\nexport function filterFiles(\r\n  files: File[],\r\n  mimeTypes: string[] = [],\r\n  extensions: string[] = [],\r\n) {\r\n  return files.filter((file) => {\r\n    if (mimeTypes.includes(file.type)) {\r\n      return true;\r\n    }\r\n\r\n    if (extensions.includes(extractExtension(file.name))) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  });\r\n}\r\n\r\nexport async function fsEntriesToFolderStructure(entries) {\r\n  const fileSystemUtils = await import('file-system-utils');\r\n  const { toFolderStructure } = fileSystemUtils;\r\n\r\n  return toFolderStructure(entries, entryToTextMiddleware)\r\n    .then((structure) => new FolderStructure(structure));\r\n}\r\n\r\nexport function filesToFolderStructure(files) {\r\n  // eslint-disable-next-line no-param-reassign\r\n  files = [...files].filter((f) => f.size > 0);\r\n\r\n  return Promise\r\n    .all(files.map(async (file) => ({\r\n      name: file.name,\r\n      key: uuid(),\r\n      content: await file.text(),\r\n    })))\r\n    .then((files) => (new FolderStructure({\r\n      folders: [],\r\n      files,\r\n    })));\r\n}\r\n\r\nfunction entryToTextMiddleware(entry) {\r\n  return new Promise((resolve) => {\r\n    entry.file((file) => {\r\n      resolve(file.text().then((textContent) => ({\r\n        name: file.name,\r\n        key: uuid(),\r\n        content: textContent,\r\n      })));\r\n    }, (error) => {\r\n      console.error('Error when processing FileEntry:', error);\r\n      resolve(null);\r\n    });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}