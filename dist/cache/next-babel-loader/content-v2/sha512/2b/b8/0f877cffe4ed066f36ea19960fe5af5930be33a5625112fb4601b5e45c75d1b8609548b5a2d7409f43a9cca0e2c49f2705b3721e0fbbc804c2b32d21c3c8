{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Editor\\\\CompleteEditor\\\\ViewTooltip\\\\ViewTooltip.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport marked from 'marked';\nimport SubmissionService from '~/services/Submission.service';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport styles from './ViewTooltip.module.scss';\nimport editorTooltipStyles from '../EditorTooltip.module.scss';\nimport Button from '~/components/Button';\n\nclass ViewTooltip extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"timeoutId\", void 0);\n\n    _defineProperty(this, \"onFeedbackDone\", () => {\n      this.setState({\n        loading: true\n      });\n      const {\n        feedback,\n        onFeedbackDone\n      } = this.props;\n      SubmissionService.markFeedbackAsDone(feedback._id).then(resp => {\n        onFeedbackDone(feedback._id);\n        this.setState({\n          loading: false,\n          forceShow: false\n        });\n      }).catch(err => {\n        this.setState({\n          loading: false,\n          forceShow: false\n        });\n        SweetAlertService.toast({\n          type: 'error',\n          text: err.reason\n        });\n      });\n    });\n\n    _defineProperty(this, \"onMouseEnter\", () => {\n      clearTimeout(this.timeoutId);\n      this.setState({\n        forceShow: true\n      });\n    });\n\n    _defineProperty(this, \"onMouseLeave\", () => {\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          forceShow: false\n        });\n      }, 1000);\n    });\n\n    this.state = {\n      loading: false,\n      forceShow: false\n    };\n    this.timeoutId = null;\n  }\n\n  componentDidUpdate() {\n    const {\n      loading\n    } = this.state;\n    const {\n      feedback\n    } = this.props;\n\n    if (!feedback._id && loading) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeoutId);\n  }\n\n  render() {\n    const {\n      feedback,\n      visible\n    } = this.props;\n    const {\n      forceShow,\n      loading\n    } = this.state;\n    return __jsx(\"div\", {\n      className: `\n          ${styles['view-tooltip']}\n          ${editorTooltipStyles['feedback-tooltip']}\n          ${editorTooltipStyles[`feedback--${feedback.type}`]}\n          ${visible || forceShow ? editorTooltipStyles['feedback-tooltip--visible'] : ''}\n        `,\n      onMouseEnter: this.onMouseEnter,\n      onMouseLeave: this.onMouseLeave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"markdown\",\n      dangerouslySetInnerHTML: {\n        __html: marked(feedback.body || '')\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }), !feedback.readOnly && __jsx(\"div\", {\n      className: \"feedback-tooltip__controls\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      loading: loading,\n      variant: \"light\",\n      onClick: this.onFeedbackDone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, \"Done\"), __jsx(\"i\", {\n      className: \"icon-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nexport default ViewTooltip;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/CompleteEditor/ViewTooltip/ViewTooltip.tsx"],"names":["React","marked","SubmissionService","SweetAlertService","styles","editorTooltipStyles","Button","ViewTooltip","Component","constructor","props","setState","loading","feedback","onFeedbackDone","markFeedbackAsDone","_id","then","resp","forceShow","catch","err","toast","type","text","reason","clearTimeout","timeoutId","setTimeout","state","componentDidUpdate","componentWillUnmount","render","visible","onMouseEnter","onMouseLeave","__html","body","readOnly"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport marked from 'marked';\r\nimport SubmissionService from '~/services/Submission.service';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\n\r\nimport styles from './ViewTooltip.module.scss';\r\nimport editorTooltipStyles from '../EditorTooltip.module.scss';\r\nimport Button from '~/components/Button';\r\n\r\ninterface Feedback {\r\n  _id: string;\r\n  // This should be tied to feedback types!\r\n  type: string;\r\n  body: string;\r\n  readOnly: boolean;\r\n}\r\n\r\ninterface State {\r\n  loading: boolean;\r\n  forceShow: boolean;\r\n}\r\n\r\ninterface Props {\r\n  visible: boolean;\r\n  feedback: Feedback,\r\n  onFeedbackDone: (feedbackId: string) => void;\r\n}\r\n\r\nclass ViewTooltip extends React.Component<Props, State> {\r\n  private timeoutId: NodeJS.Timeout;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: false,\r\n      forceShow: false,\r\n    };\r\n    this.timeoutId = null;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { loading } = this.state;\r\n    const { feedback } = this.props;\r\n\r\n    if (!feedback._id && loading) {\r\n      // eslint-disable-next-line react/no-did-update-set-state\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  onFeedbackDone = () => {\r\n    this.setState({ loading: true });\r\n    const { feedback, onFeedbackDone } = this.props;\r\n\r\n    SubmissionService.markFeedbackAsDone(feedback._id)\r\n      .then((resp) => {\r\n        onFeedbackDone(feedback._id);\r\n\r\n        this.setState({\r\n          loading: false,\r\n          forceShow: false,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          loading: false,\r\n          forceShow: false,\r\n        });\r\n\r\n        SweetAlertService.toast({\r\n          type: 'error',\r\n          text: err.reason,\r\n        });\r\n      });\r\n  }\r\n\r\n  onMouseEnter = () => {\r\n    clearTimeout(this.timeoutId);\r\n    this.setState({\r\n      forceShow: true,\r\n    });\r\n  }\r\n\r\n  onMouseLeave = () => {\r\n    this.timeoutId = setTimeout(() => {\r\n      this.setState({\r\n        forceShow: false,\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    const { feedback, visible } = this.props;\r\n    const { forceShow, loading } = this.state;\r\n\r\n    return (\r\n      <div\r\n        className={`\r\n          ${styles['view-tooltip']}\r\n          ${editorTooltipStyles['feedback-tooltip']}\r\n          ${editorTooltipStyles[`feedback--${feedback.type}`]}\r\n          ${visible || forceShow ? editorTooltipStyles['feedback-tooltip--visible'] : ''}\r\n        `}\r\n        onMouseEnter={this.onMouseEnter}\r\n        onMouseLeave={this.onMouseLeave}\r\n      >\r\n        {/* eslint-disable-next-line react/no-danger */}\r\n        <div className=\"markdown\" dangerouslySetInnerHTML={{ __html: marked(feedback.body || '') }} />\r\n\r\n        {!feedback.readOnly && (\r\n          <div className=\"feedback-tooltip__controls\">\r\n            <Button loading={loading} variant=\"light\" onClick={this.onFeedbackDone}>\r\n              <span>Done</span>\r\n              <i className=\"icon-check\" />\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ViewTooltip;\r\n"]},"metadata":{},"sourceType":"module"}