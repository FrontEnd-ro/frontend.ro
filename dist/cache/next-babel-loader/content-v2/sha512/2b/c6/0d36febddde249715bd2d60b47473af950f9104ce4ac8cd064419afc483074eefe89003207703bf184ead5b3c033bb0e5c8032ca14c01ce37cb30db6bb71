{"ast":null,"code":"import _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport HttpService from './Http.service'; // FIXME ---> we need to do a little more research to find a better solution\n\nvar ExerciseService = /*#__PURE__*/function () {\n  function ExerciseService() {\n    _classCallCheck(this, ExerciseService);\n  }\n\n  _createClass(ExerciseService, null, [{\n    key: \"uploadMedia\",\n    value: function uploadMedia(name, file) {\n      var formData = new FormData();\n      formData.append('name', name);\n      formData.append('file', file);\n      console.log({\n        name: name,\n        file: file\n      });\n      return HttpService.post(\"\".concat(process.env.ENDPOINT, \"/exercises/media\"), formData).then(function (resp) {\n        return resp.json();\n      });\n    }\n  }, {\n    key: \"createExercise\",\n    value: function createExercise(payload) {\n      return HttpService.post(\"\".concat(process.env.ENDPOINT, \"/exercises\"), payload).then(function (resp) {\n        return resp.json();\n      });\n    }\n  }, {\n    key: \"markFeedbackAsDone\",\n    value: function markFeedbackAsDone(feedbackId) {\n      return new Promise(function (resolve, reject) {\n        setTimeout(resolve, 1000);\n      });\n    }\n  }, {\n    key: \"getSubmissions\",\n    value: function getSubmissions() {\n      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      return HttpService.get(\"\".concat(process.env.ENDPOINT, \"/exercises/submissions?page=\").concat(page, \"&query=\").concat(query)).then(function (response) {\n        return response.json();\n      });\n    }\n  }]);\n\n  return ExerciseService;\n}();\n\nexport default ExerciseService;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/Exercise.service.ts"],"names":["HttpService","ExerciseService","name","file","formData","FormData","append","console","log","post","process","env","ENDPOINT","then","resp","json","payload","feedbackId","Promise","resolve","reject","setTimeout","page","query","get","response"],"mappings":";;AACA,OAAOA,WAAP,MAAwB,gBAAxB,C,CAEA;;IAUMC,e;;;;;;;gCACeC,I,EAAcC,I,EAA0B;AACzD,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBJ,IAAxB;AACAE,MAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBH,IAAxB;AAEAI,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,IAAI,EAAJA;AAAR,OAAZ;AAEA,aAAOH,WAAW,CACfS,IADI,WACIC,OAAO,CAACC,GAAR,CAAYC,QADhB,uBAC4CR,QAD5C,EAEJS,IAFI,CAEC,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,IAAL,EAAV;AAAA,OAFD,CAAP;AAGD;;;mCAEqBC,O,EAA2C;AAC/D,aAAOhB,WAAW,CACfS,IADI,WACIC,OAAO,CAACC,GAAR,CAAYC,QADhB,iBACsCI,OADtC,EAEJH,IAFI,CAEC,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,IAAL,EAAV;AAAA,OAFD,CAAP;AAGD;;;uCAEyBE,U,EAAoB;AAC5C,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,QAAAA,UAAU,CAACF,OAAD,EAAU,IAAV,CAAV;AACD,OAFM,CAAP;AAGD;;;qCAEmE;AAAA,UAA9CG,IAA8C,uEAAvC,CAAuC;AAAA,UAApCC,KAAoC,uEAA5B,EAA4B;AAClE,aAAOvB,WAAW,CAACwB,GAAZ,WAAmBd,OAAO,CAACC,GAAR,CAAYC,QAA/B,yCAAsEU,IAAtE,oBAAoFC,KAApF,GACJV,IADI,CACC,UAACY,QAAD;AAAA,eAAcA,QAAQ,CAACV,IAAT,EAAd;AAAA,OADD,CAAP;AAED;;;;;;AAEH,eAAed,eAAf","sourcesContent":["import { Submission } from '~/redux/exercise-submissions/types';\r\nimport HttpService from './Http.service';\r\n\r\n// FIXME ---> we need to do a little more research to find a better solution\r\n\r\ninterface NewExercisePayload {\r\n  body: string;\r\n  private: boolean;\r\n  type: string;\r\n  solution: string;\r\n  example?: string;\r\n}\r\n\r\nclass ExerciseService {\r\n  static uploadMedia(name: string, file: File): Promise<any> {\r\n    const formData = new FormData();\r\n    formData.append('name', name);\r\n    formData.append('file', file);\r\n\r\n    console.log({ name, file });\r\n\r\n    return HttpService\r\n      .post(`${process.env.ENDPOINT}/exercises/media`, formData)\r\n      .then((resp) => resp.json());\r\n  }\r\n\r\n  static createExercise(payload: NewExercisePayload): Promise<any> {\r\n    return HttpService\r\n      .post(`${process.env.ENDPOINT}/exercises`, payload)\r\n      .then((resp) => resp.json());\r\n  }\r\n\r\n  static markFeedbackAsDone(feedbackId: string) {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(resolve, 1000);\r\n    });\r\n  }\r\n\r\n  static getSubmissions(page = 0, query = '') : Promise<Submission[]> {\r\n    return HttpService.get(`${process.env.ENDPOINT}/exercises/submissions?page=${page}&query=${query}`)\r\n      .then((response) => response.json()) as unknown as Promise<Submission[]>;\r\n  }\r\n}\r\nexport default ExerciseService;\r\n"]},"metadata":{},"sourceType":"module"}