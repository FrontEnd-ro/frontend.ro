{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\TableOfContents\\\\TableOfContents.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/interactive-supports-focus */\nimport React from 'react';\nimport Link from 'next/link';\nimport styles from './TableOfContents.module.scss';\nconst SCROLL_DURATION = 2000;\n\nclass TableOfContents extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"observer\", void 0);\n\n    _defineProperty(this, \"timeoutId\", void 0);\n\n    _defineProperty(this, \"observeAll\", () => {\n      const {\n        chapters\n      } = this.props;\n      /**  Target the elements to be observed */\n\n      chapters.forEach(item => {\n        const chapterId = document.getElementById(item.id);\n\n        if (chapterId !== null) {\n          this.observer.observe(chapterId);\n        }\n      });\n    });\n\n    _defineProperty(this, \"changeNav\", entries => {\n      const {\n        activeChapterId\n      } = this.state;\n      entries.some(entry => {\n        if (entry.intersectionRatio <= 0.5) {\n          return false;\n        }\n\n        if (entry.target.id !== activeChapterId) {\n          /**\r\n           * Using the NextRouter `replace` method is buggy on Firefox, triggering\r\n           * a scroll when it intersects an element.\r\n           *\r\n           * This is reproducing only when using a Mouse, not the touchpad on laptop.\r\n           */\n          window.history.replaceState(null, '', `${window.location.pathname}#${entry.target.id}`);\n          this.refreshActiveChapter();\n        }\n\n        return true;\n      });\n    });\n\n    _defineProperty(this, \"scrollToItem\", id => {\n      const {\n        onChapterClick\n      } = this.props;\n      let itemToScroll = document.getElementById(id);\n\n      if (itemToScroll === null) {\n        console.warn(`TableOfContents: expected to find element with id=${id} to scroll to`);\n      }\n      /**\r\n       * Clickin on a link scrolls to that element.\r\n       * However, since we already have an active InsersectionObserver we may\r\n       * get racing conditions which mess up the correctly highlighted/scrolled element.\r\n       *\r\n       * To fix this we're disabling the observer while the scroll is in progress,\r\n       * and then re'attaching it. A proper solution would need us to know when\r\n       * the scroll has ended. We could add a `scroll` event on document but that\r\n       * wouldn't work if the article is rendered in just a part of the page.\r\n       *\r\n       * So, our solution was to \"guess\" how long it would take to scroll, and use a timeout.\r\n       */\n\n\n      this.observer.disconnect();\n      clearTimeout(this.timeoutId);\n      this.timeoutId = setTimeout(this.observeAll, SCROLL_DURATION);\n      this.setState({\n        activeChapterId: id\n      });\n\n      if (onChapterClick) {\n        onChapterClick(id);\n      }\n    });\n\n    _defineProperty(this, \"refreshActiveChapter\", () => {\n      const {\n        chapters\n      } = this.props;\n      const match = chapters.find(chapter => {\n        return window.location.href.includes(chapter.href);\n      });\n\n      if (match !== undefined) {\n        this.setState({\n          activeChapterId: match.id\n        });\n      }\n    });\n\n    this.state = {\n      activeChapterId: null\n    };\n  }\n\n  componentDidMount() {\n    const options = {\n      threshold: 0.5\n    };\n    this.refreshActiveChapter();\n    this.observer = new IntersectionObserver(this.changeNav, options);\n    this.timeoutId = setTimeout(this.observeAll, SCROLL_DURATION);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      chapters\n    } = this.props;\n\n    if (chapters !== prevProps.chapters) {\n      this.refreshActiveChapter();\n    }\n  }\n\n  componentWillUnmount() {\n    this.observer.disconnect();\n    clearTimeout(this.timeoutId);\n  }\n\n  render() {\n    const {\n      chapters\n    } = this.props;\n    const {\n      activeChapterId\n    } = this.state;\n    return __jsx(\"nav\", {\n      className: styles.tableOfContents,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, chapters.map(item => __jsx(\"li\", {\n      key: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, __jsx(Link, {\n      href: item.href,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      role: \"button\",\n      onClick: () => this.scrollToItem(item.id),\n      className: activeChapterId === item.id ? `${styles.active} text-bold` : 'text-bold',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, item.title))))));\n  }\n\n}\n\nexport default TableOfContents;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/TableOfContents/TableOfContents.tsx"],"names":["React","Link","styles","SCROLL_DURATION","TableOfContents","Component","constructor","props","chapters","forEach","item","chapterId","document","getElementById","id","observer","observe","entries","activeChapterId","state","some","entry","intersectionRatio","target","window","history","replaceState","location","pathname","refreshActiveChapter","onChapterClick","itemToScroll","console","warn","disconnect","clearTimeout","timeoutId","setTimeout","observeAll","setState","match","find","chapter","href","includes","undefined","componentDidMount","options","threshold","IntersectionObserver","changeNav","componentDidUpdate","prevProps","componentWillUnmount","render","tableOfContents","map","scrollToItem","active","title"],"mappings":";;;;;AAAA;;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AAiBA,MAAMC,eAAe,GAAG,IAAxB;;AAEA,MAAMC,eAAN,SAA8BJ,KAAK,CAACK,SAApC,CAA4D;AAK1DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB;;AAAA;;AAAA,wCA6BN,MAAM;AACjB,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKD,KAA1B;AAEA;;AACAC,MAAAA,QAAQ,CAACC,OAAT,CAAkBC,IAAD,IAAU;AACzB,cAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,IAAI,CAACI,EAA7B,CAAlB;;AACA,YAAIH,SAAS,KAAK,IAAlB,EAAwB;AACtB,eAAKI,QAAL,CAAcC,OAAd,CAAsBL,SAAtB;AACD;AACF,OALD;AAMD,KAvCkB;;AAAA,uCAyCNM,OAAD,IAAa;AACvB,YAAM;AAAEC,QAAAA;AAAF,UAAsB,KAAKC,KAAjC;AACAF,MAAAA,OAAO,CAACG,IAAR,CAAcC,KAAD,IAAW;AACtB,YAAIA,KAAK,CAACC,iBAAN,IAA2B,GAA/B,EAAoC;AAClC,iBAAO,KAAP;AACD;;AAED,YAAID,KAAK,CAACE,MAAN,CAAaT,EAAb,KAAoBI,eAAxB,EAAyC;AACvC;AACR;AACA;AACA;AACA;AACA;AACQM,UAAAA,MAAM,CAACC,OAAP,CAAeC,YAAf,CAA4B,IAA5B,EAAkC,EAAlC,EAAuC,GAAEF,MAAM,CAACG,QAAP,CAAgBC,QAAS,IAAGP,KAAK,CAACE,MAAN,CAAaT,EAAG,EAArF;AACA,eAAKe,oBAAL;AACD;;AAED,eAAO,IAAP;AACD,OAjBD;AAkBD,KA7DkB;;AAAA,0CA+DHf,EAAD,IAAQ;AACrB,YAAM;AAAEgB,QAAAA;AAAF,UAAqB,KAAKvB,KAAhC;AAEA,UAAIwB,YAAY,GAAGnB,QAAQ,CAACC,cAAT,CAAwBC,EAAxB,CAAnB;;AACA,UAAIiB,YAAY,KAAK,IAArB,EAA2B;AACzBC,QAAAA,OAAO,CAACC,IAAR,CAAc,qDAAoDnB,EAAG,eAArE;AACD;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAAKC,QAAL,CAAcmB,UAAd;AAEAC,MAAAA,YAAY,CAAC,KAAKC,SAAN,CAAZ;AACA,WAAKA,SAAL,GAAiBC,UAAU,CAAC,KAAKC,UAAN,EAAkBnC,eAAlB,CAA3B;AAEA,WAAKoC,QAAL,CAAc;AACZrB,QAAAA,eAAe,EAAEJ;AADL,OAAd;;AAIA,UAAIgB,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAAChB,EAAD,CAAd;AACD;AACF,KA/FkB;;AAAA,kDAiGI,MAAM;AAC3B,YAAM;AAAEN,QAAAA;AAAF,UAAe,KAAKD,KAA1B;AAEA,YAAMiC,KAAK,GAAGhC,QAAQ,CAACiC,IAAT,CAAeC,OAAD,IAAa;AACvC,eAAOlB,MAAM,CAACG,QAAP,CAAgBgB,IAAhB,CAAqBC,QAArB,CAA8BF,OAAO,CAACC,IAAtC,CAAP;AACD,OAFa,CAAd;;AAIA,UAAIH,KAAK,KAAKK,SAAd,EAAyB;AACvB,aAAKN,QAAL,CAAc;AACZrB,UAAAA,eAAe,EAAEsB,KAAK,CAAC1B;AADX,SAAd;AAGD;AACF,KA7GkB;;AAGjB,SAAKK,KAAL,GAAa;AAAED,MAAAA,eAAe,EAAE;AAAnB,KAAb;AACD;;AAED4B,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,OAAO,GAAG;AACdC,MAAAA,SAAS,EAAE;AADG,KAAhB;AAIA,SAAKnB,oBAAL;AAEA,SAAKd,QAAL,GAAgB,IAAIkC,oBAAJ,CAAyB,KAAKC,SAA9B,EAAyCH,OAAzC,CAAhB;AACA,SAAKX,SAAL,GAAiBC,UAAU,CAAC,KAAKC,UAAN,EAAkBnC,eAAlB,CAA3B;AACD;;AAEDgD,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAM;AAAE5C,MAAAA;AAAF,QAAe,KAAKD,KAA1B;;AACA,QAAIC,QAAQ,KAAK4C,SAAS,CAAC5C,QAA3B,EAAqC;AACnC,WAAKqB,oBAAL;AACD;AACF;;AAEDwB,EAAAA,oBAAoB,GAAG;AACrB,SAAKtC,QAAL,CAAcmB,UAAd;AACAC,IAAAA,YAAY,CAAC,KAAKC,SAAN,CAAZ;AACD;;AAoFDkB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE9C,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAsB,KAAKC,KAAjC;AAEA,WACE;AAAK,MAAA,SAAS,EAAEjB,MAAM,CAACqD,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG/C,QAAQ,CAACgD,GAAT,CAAc9C,IAAD,IACZ;AACE,MAAA,GAAG,EAAEA,IAAI,CAACI,EADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAEJ,IAAI,CAACiC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAE,MAAM,KAAKc,YAAL,CAAkB/C,IAAI,CAACI,EAAvB,CAFjB;AAGE,MAAA,SAAS,EAAEI,eAAe,KAAKR,IAAI,CAACI,EAAzB,GAA+B,GAAEZ,MAAM,CAACwD,MAAO,YAA/C,GAA6D,WAH1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGhD,IAAI,CAACiD,KALR,CADF,CAHF,CADD,CADH,CADF,CADF;AAqBD;;AA7IyD;;AA+I5D,eAAevD,eAAf","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/interactive-supports-focus */\r\n\r\nimport React from 'react';\r\nimport Link from 'next/link';\r\nimport styles from './TableOfContents.module.scss';\r\n\r\ninterface State {\r\n  activeChapterId: string;\r\n}\r\n\r\ninterface Props {\r\n  chapters: Chapter[];\r\n  onChapterClick?: (id: string) => void\r\n}\r\n\r\nexport interface Chapter {\r\n  id: string;\r\n  title: string;\r\n  href: string;\r\n}\r\n\r\nconst SCROLL_DURATION = 2000;\r\n\r\nclass TableOfContents extends React.Component<Props, State> {\r\n  private observer: IntersectionObserver;\r\n\r\n  private timeoutId: any;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { activeChapterId: null };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const options = {\r\n      threshold: 0.5,\r\n    };\r\n\r\n    this.refreshActiveChapter();\r\n\r\n    this.observer = new IntersectionObserver(this.changeNav, options);\r\n    this.timeoutId = setTimeout(this.observeAll, SCROLL_DURATION);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { chapters } = this.props;\r\n    if (chapters !== prevProps.chapters) {\r\n      this.refreshActiveChapter();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.observer.disconnect();\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  observeAll = () => {\r\n    const { chapters } = this.props;\r\n\r\n    /**  Target the elements to be observed */\r\n    chapters.forEach((item) => {\r\n      const chapterId = document.getElementById(item.id);\r\n      if (chapterId !== null) {\r\n        this.observer.observe(chapterId);\r\n      }\r\n    });\r\n  };\r\n\r\n  changeNav = (entries) => {\r\n    const { activeChapterId } = this.state;\r\n    entries.some((entry) => {\r\n      if (entry.intersectionRatio <= 0.5) {\r\n        return false;\r\n      }\r\n\r\n      if (entry.target.id !== activeChapterId) {\r\n        /**\r\n         * Using the NextRouter `replace` method is buggy on Firefox, triggering\r\n         * a scroll when it intersects an element.\r\n         *\r\n         * This is reproducing only when using a Mouse, not the touchpad on laptop.\r\n         */\r\n        window.history.replaceState(null, '', `${window.location.pathname}#${entry.target.id}`);\r\n        this.refreshActiveChapter();\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  scrollToItem = (id) => {\r\n    const { onChapterClick } = this.props;\r\n\r\n    let itemToScroll = document.getElementById(id);\r\n    if (itemToScroll === null) {\r\n      console.warn(`TableOfContents: expected to find element with id=${id} to scroll to`);\r\n    }\r\n\r\n    /**\r\n     * Clickin on a link scrolls to that element.\r\n     * However, since we already have an active InsersectionObserver we may\r\n     * get racing conditions which mess up the correctly highlighted/scrolled element.\r\n     *\r\n     * To fix this we're disabling the observer while the scroll is in progress,\r\n     * and then re'attaching it. A proper solution would need us to know when\r\n     * the scroll has ended. We could add a `scroll` event on document but that\r\n     * wouldn't work if the article is rendered in just a part of the page.\r\n     *\r\n     * So, our solution was to \"guess\" how long it would take to scroll, and use a timeout.\r\n     */\r\n    this.observer.disconnect();\r\n\r\n    clearTimeout(this.timeoutId);\r\n    this.timeoutId = setTimeout(this.observeAll, SCROLL_DURATION);\r\n\r\n    this.setState({\r\n      activeChapterId: id,\r\n    });\r\n\r\n    if (onChapterClick) {\r\n      onChapterClick(id);\r\n    }\r\n  }\r\n\r\n  refreshActiveChapter = () => {\r\n    const { chapters } = this.props;\r\n\r\n    const match = chapters.find((chapter) => {\r\n      return window.location.href.includes(chapter.href);\r\n    });\r\n\r\n    if (match !== undefined) {\r\n      this.setState({\r\n        activeChapterId: match.id,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { chapters } = this.props;\r\n    const { activeChapterId } = this.state;\r\n\r\n    return (\r\n      <nav className={styles.tableOfContents}>\r\n        <ul>\r\n          {chapters.map((item) => (\r\n            <li\r\n              key={item.id}\r\n            >\r\n              <Link href={item.href}>\r\n                <a\r\n                  role=\"button\"\r\n                  onClick={() => this.scrollToItem(item.id)}\r\n                  className={activeChapterId === item.id ? `${styles.active} text-bold` : 'text-bold'}\r\n                >\r\n                  {item.title}\r\n                </a>\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default TableOfContents;\r\n"]},"metadata":{},"sourceType":"module"}