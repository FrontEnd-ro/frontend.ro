{"ast":null,"code":"import _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Editor\\\\CompleteEditor\\\\AskTooltip\\\\AskTooltip.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react'; // FIXME\n\nimport marked from 'marked';\nimport { FEEDBACK_TYPES } from '~/services/Constants';\nimport Form, { Checkbox } from '~/components/Form';\nimport styles from './AskTooltip.module.scss';\nimport editorTooltipStyles from '../EditorTooltip.module.scss';\n\nvar AskTooltip = /*#__PURE__*/function (_React$Component) {\n  _inherits(AskTooltip, _React$Component);\n\n  var _super = _createSuper(AskTooltip);\n\n  function AskTooltip(props) {\n    var _this;\n\n    _classCallCheck(this, AskTooltip);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"timeoutId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"formRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"markdownRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"textareaRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onAsk\", function (e) {\n      var _this$state = _this.state,\n          type = _this$state.type,\n          body = _this$state.body;\n      var onAsk = _this.props.onAsk;\n\n      if (body) {\n        onAsk({\n          type: type,\n          body: body\n        });\n\n        _this.setState({\n          body: '',\n          forceShow: false\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseEnter\", function () {\n      clearTimeout(_this.timeoutId);\n\n      _this.setState({\n        forceShow: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseLeave\", function () {\n      _this.timeoutId = setTimeout(function () {\n        _this.setState({\n          forceShow: false\n        });\n      }, 500);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (e) {\n      if ((e.key === 'Enter' || e.keyCode === 13) && e.ctrlKey) {\n        var submitEvent = document.createEvent('Event');\n        submitEvent.initEvent('submit', true, true);\n\n        _this.formRef.current.dispatchEvent(submitEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBodyChange\", function (e) {\n      _this.setState({\n        body: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeType\", function (newType) {\n      _this.setState({\n        type: newType\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleMarkdown\", function () {\n      var _this$state2 = _this.state,\n          body = _this$state2.body,\n          showMarkdown = _this$state2.showMarkdown;\n\n      _this.setState({\n        showMarkdown: !showMarkdown\n      });\n\n      if (!showMarkdown) {\n        _this.markdownRef.current.innerHTML = marked(body);\n      } else {\n        _this.markdownRef.current.innerHTML = null;\n        setTimeout(function () {\n          _this.textareaRef.current.focus();\n        }, 100);\n      }\n    });\n\n    _this.state = {\n      body: '',\n      type: FEEDBACK_TYPES.IMPROVEMENT,\n      forceShow: false,\n      showMarkdown: false\n    };\n    _this.timeoutId = null;\n    _this.formRef = /*#__PURE__*/React.createRef();\n    _this.markdownRef = /*#__PURE__*/React.createRef();\n    _this.textareaRef = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(AskTooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var visible = this.props.visible;\n\n      if (visible && this.textareaRef.current) {\n        setTimeout(function () {\n          return _this2.textareaRef.current.focus();\n        }, 0);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this3 = this;\n\n      var visible = this.props.visible;\n\n      if (visible && !prevProps.visible) {\n        setTimeout(function () {\n          return _this3.textareaRef.current.focus();\n        }, 0);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.timeoutId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var visible = this.props.visible;\n      var _this$state3 = this.state,\n          body = _this$state3.body,\n          type = _this$state3.type,\n          forceShow = _this$state3.forceShow,\n          showMarkdown = _this$state3.showMarkdown;\n      return __jsx(Form, {\n        ref: this.formRef,\n        onSubmit: this.onAsk,\n        className: \"\\n          \".concat(styles['ask-tooltip'], \"\\n          \").concat(editorTooltipStyles['feedback-tooltip'], \"\\n          \").concat(editorTooltipStyles[\"feedback--\".concat(type)], \"\\n          \").concat(visible || forceShow ? editorTooltipStyles['feedback-tooltip--visible'] : '', \"\\n        \"),\n        onMouseEnter: this.onMouseEnter,\n        onMouseLeave: this.onMouseLeave,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: \"\".concat(showMarkdown ? styles.markdown : ''),\n        ref: this.markdownRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }), __jsx(\"textarea\", {\n        required: true,\n        rows: 8,\n        ref: this.textareaRef,\n        style: {\n          display: showMarkdown ? 'none' : 'block'\n        },\n        value: body,\n        onChange: this.onBodyChange,\n        onKeyDown: this.onKeyDown,\n        spellCheck: false,\n        placeholder: \"Ofer\\u0103 feedback (psst: suport\\u0103 markdown)\" // eslint-disable-next-line jsx-a11y/no-autofocus\n        ,\n        autoFocus: visible,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      }), __jsx(\"div\", {\n        className: styles['feedback-tooltip__controls'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }\n      }, Object.keys(FEEDBACK_TYPES).map(function (feedbackType) {\n        return __jsx(Checkbox, {\n          className: \"d-block\",\n          type: \"radio\",\n          name: \"feedback-type\",\n          onChange: function onChange() {\n            return _this4.changeType(FEEDBACK_TYPES[feedbackType]);\n          },\n          checked: type === FEEDBACK_TYPES[feedbackType],\n          value: type,\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }\n        }, FEEDBACK_TYPES[feedbackType]);\n      }), __jsx(\"div\", {\n        className: styles.separator,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }\n      }), __jsx(Checkbox, {\n        type: \"checkbox\",\n        name: \"feedback-type\",\n        value: \"showMarkdown\",\n        defaultChecked: showMarkdown,\n        onChange: this.toggleMarkdown,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }\n      }, \"Preview\")), __jsx(\"button\", {\n        type: \"submit\",\n        className: \"btn btn--light\",\n        title: \"Mark as done\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }\n      }, \"Done\"))));\n    }\n  }]);\n\n  return AskTooltip;\n}(React.Component);\n\nexport default AskTooltip;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/CompleteEditor/AskTooltip/AskTooltip.tsx"],"names":["React","marked","FEEDBACK_TYPES","Form","Checkbox","styles","editorTooltipStyles","AskTooltip","props","e","state","type","body","onAsk","setState","forceShow","clearTimeout","timeoutId","setTimeout","key","keyCode","ctrlKey","submitEvent","document","createEvent","initEvent","formRef","current","dispatchEvent","target","value","newType","showMarkdown","markdownRef","innerHTML","textareaRef","focus","IMPROVEMENT","createRef","visible","prevProps","onMouseEnter","onMouseLeave","markdown","display","onBodyChange","onKeyDown","Object","keys","map","feedbackType","changeType","separator","toggleMarkdown","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// FIXME\r\nimport marked from 'marked';\r\nimport { FEEDBACK_TYPES } from '~/services/Constants';\r\nimport Form, { Checkbox } from '~/components/Form';\r\n\r\nimport styles from './AskTooltip.module.scss';\r\nimport editorTooltipStyles from '../EditorTooltip.module.scss';\r\n\r\ninterface State {\r\n  body: string;\r\n  type: string;\r\n  forceShow: boolean;\r\n  showMarkdown: boolean;\r\n}\r\n\r\ninterface Props {\r\n  visible: boolean;\r\n  onAsk: ({ type, body }: { type: string, body: string }) => void\r\n}\r\n\r\nclass AskTooltip extends React.Component<Props, State> {\r\n  private timeoutId: NodeJS.Timeout;\r\n\r\n  private formRef: React.RefObject<HTMLFormElement>;\r\n\r\n  private markdownRef: React.RefObject<HTMLDivElement>;\r\n\r\n  private textareaRef: React.RefObject<HTMLTextAreaElement>;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      body: '',\r\n      type: FEEDBACK_TYPES.IMPROVEMENT,\r\n      forceShow: false,\r\n      showMarkdown: false,\r\n    };\r\n\r\n    this.timeoutId = null;\r\n    this.formRef = React.createRef();\r\n    this.markdownRef = React.createRef();\r\n    this.textareaRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { visible } = this.props;\r\n\r\n    if (visible && this.textareaRef.current) {\r\n      setTimeout(() => this.textareaRef.current.focus(), 0);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    const { visible } = this.props;\r\n\r\n    if (visible && !prevProps.visible) {\r\n      setTimeout(() => this.textareaRef.current.focus(), 0);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  onAsk = (e) => {\r\n    const { type, body } = this.state;\r\n    const { onAsk } = this.props;\r\n\r\n    if (body) {\r\n      onAsk({ type, body });\r\n\r\n      this.setState({\r\n        body: '',\r\n        forceShow: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  onMouseEnter = () => {\r\n    clearTimeout(this.timeoutId);\r\n    this.setState({\r\n      forceShow: true,\r\n    });\r\n  }\r\n\r\n  onMouseLeave = () => {\r\n    this.timeoutId = setTimeout(() => {\r\n      this.setState({\r\n        forceShow: false,\r\n      });\r\n    }, 500);\r\n  }\r\n\r\n  onKeyDown = (e) => {\r\n    if ((e.key === 'Enter' || e.keyCode === 13) && e.ctrlKey) {\r\n      const submitEvent = document.createEvent('Event');\r\n      submitEvent.initEvent('submit', true, true);\r\n\r\n      this.formRef.current.dispatchEvent(submitEvent);\r\n    }\r\n  }\r\n\r\n  onBodyChange = (e) => {\r\n    this.setState({\r\n      body: e.target.value,\r\n    });\r\n  }\r\n\r\n  changeType = (newType) => {\r\n    this.setState({ type: newType });\r\n  }\r\n\r\n  toggleMarkdown = () => {\r\n    const { body, showMarkdown } = this.state;\r\n    this.setState({\r\n      showMarkdown: !showMarkdown,\r\n    });\r\n\r\n    if (!showMarkdown) {\r\n      this.markdownRef.current.innerHTML = marked(body);\r\n    } else {\r\n      this.markdownRef.current.innerHTML = null;\r\n      setTimeout(() => {\r\n        this.textareaRef.current.focus();\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { visible } = this.props;\r\n    const {\r\n      body,\r\n      type,\r\n      forceShow,\r\n      showMarkdown,\r\n    } = this.state;\r\n\r\n    return (\r\n      <Form\r\n        ref={this.formRef}\r\n        onSubmit={this.onAsk}\r\n        className={`\r\n          ${styles['ask-tooltip']}\r\n          ${editorTooltipStyles['feedback-tooltip']}\r\n          ${editorTooltipStyles[`feedback--${type}`]}\r\n          ${visible || forceShow ? editorTooltipStyles['feedback-tooltip--visible'] : ''}\r\n        `}\r\n        onMouseEnter={this.onMouseEnter}\r\n        onMouseLeave={this.onMouseLeave}\r\n      >\r\n        <div className={`${showMarkdown ? styles.markdown : ''}`} ref={this.markdownRef} />\r\n        <textarea\r\n          required\r\n          rows={8}\r\n          ref={this.textareaRef}\r\n          style={{\r\n            display: showMarkdown ? 'none' : 'block',\r\n          }}\r\n          value={body}\r\n          onChange={this.onBodyChange}\r\n          onKeyDown={this.onKeyDown}\r\n          spellCheck={false}\r\n          placeholder=\"Oferă feedback (psst: suportă markdown)\"\r\n          // eslint-disable-next-line jsx-a11y/no-autofocus\r\n          autoFocus={visible}\r\n        />\r\n        <div className={styles['feedback-tooltip__controls']}>\r\n          <div>\r\n            {Object.keys(FEEDBACK_TYPES).map((feedbackType) => (\r\n              <Checkbox\r\n                className=\"d-block\"\r\n                type=\"radio\"\r\n                name=\"feedback-type\"\r\n                onChange={() => this.changeType(FEEDBACK_TYPES[feedbackType])}\r\n                checked={type === FEEDBACK_TYPES[feedbackType]}\r\n                value={type}\r\n              >\r\n                {FEEDBACK_TYPES[feedbackType]}\r\n              </Checkbox>\r\n            ))}\r\n\r\n            <div className={styles.separator} />\r\n            <Checkbox\r\n              type=\"checkbox\"\r\n              name=\"feedback-type\"\r\n              value=\"showMarkdown\"\r\n              defaultChecked={showMarkdown}\r\n              onChange={this.toggleMarkdown}\r\n            >\r\n              Preview\r\n            </Checkbox>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn--light\" title=\"Mark as done\">\r\n            <span>Done</span>\r\n          </button>\r\n        </div>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AskTooltip;\r\n"]},"metadata":{},"sourceType":"module"}