{"ast":null,"code":"import _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Editor\\\\CompleteEditor\\\\ViewTooltip\\\\ViewTooltip.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport marked from 'marked';\nimport SubmissionService from '~/services/Submission.service';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport styles from './ViewTooltip.module.scss';\nimport editorTooltipStyles from '../EditorTooltip.module.scss';\nimport Button from '~/components/Button';\n\nvar ViewTooltip = /*#__PURE__*/function (_React$Component) {\n  _inherits(ViewTooltip, _React$Component);\n\n  var _super = _createSuper(ViewTooltip);\n\n  function ViewTooltip(props) {\n    var _this;\n\n    _classCallCheck(this, ViewTooltip);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"timeoutId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onFeedbackDone\", function () {\n      _this.setState({\n        loading: true\n      });\n\n      var _this$props = _this.props,\n          feedback = _this$props.feedback,\n          onFeedbackDone = _this$props.onFeedbackDone;\n      SubmissionService.markFeedbackAsDone(feedback._id).then(function (resp) {\n        onFeedbackDone(feedback._id);\n\n        _this.setState({\n          loading: false,\n          forceShow: false\n        });\n      })[\"catch\"](function (err) {\n        _this.setState({\n          loading: false,\n          forceShow: false\n        });\n\n        SweetAlertService.toast({\n          type: 'error',\n          text: err.reason\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseEnter\", function () {\n      clearTimeout(_this.timeoutId);\n\n      _this.setState({\n        forceShow: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseLeave\", function () {\n      _this.timeoutId = setTimeout(function () {\n        _this.setState({\n          forceShow: false\n        });\n      }, 1000);\n    });\n\n    _this.state = {\n      loading: false,\n      forceShow: false\n    };\n    _this.timeoutId = null;\n    return _this;\n  }\n\n  _createClass(ViewTooltip, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var loading = this.state.loading;\n      var feedback = this.props.feedback;\n\n      if (!feedback._id && loading) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          loading: false\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.timeoutId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          feedback = _this$props2.feedback,\n          visible = _this$props2.visible;\n      var _this$state = this.state,\n          forceShow = _this$state.forceShow,\n          loading = _this$state.loading;\n      return __jsx(\"div\", {\n        className: \"\\n          \".concat(styles['view-tooltip'], \"\\n          \").concat(editorTooltipStyles['feedback-tooltip'], \"\\n          \").concat(editorTooltipStyles[\"feedback--\".concat(feedback.type)], \"\\n          \").concat(visible || forceShow ? editorTooltipStyles['feedback-tooltip--visible'] : '', \"\\n        \"),\n        onMouseEnter: this.onMouseEnter,\n        onMouseLeave: this.onMouseLeave,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: \"markdown\",\n        dangerouslySetInnerHTML: {\n          __html: marked(feedback.body || '')\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      }), !feedback.readOnly && __jsx(\"div\", {\n        className: \"feedback-tooltip__controls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      }, __jsx(Button, {\n        loading: loading,\n        variant: \"light\",\n        onClick: this.onFeedbackDone,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }, \"Done\"), __jsx(\"i\", {\n        className: \"icon-check\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return ViewTooltip;\n}(React.Component);\n\nexport default ViewTooltip;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/CompleteEditor/ViewTooltip/ViewTooltip.tsx"],"names":["React","marked","SubmissionService","SweetAlertService","styles","editorTooltipStyles","Button","ViewTooltip","props","setState","loading","feedback","onFeedbackDone","markFeedbackAsDone","_id","then","resp","forceShow","err","toast","type","text","reason","clearTimeout","timeoutId","setTimeout","state","visible","onMouseEnter","onMouseLeave","__html","body","readOnly","Component"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;AAEA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;IAqBMC,W;;;;;AAGJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB;;AAAA,qEAuBF,YAAM;AACrB,YAAKC,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;;AADqB,wBAEgB,MAAKF,KAFrB;AAAA,UAEbG,QAFa,eAEbA,QAFa;AAAA,UAEHC,cAFG,eAEHA,cAFG;AAIrBV,MAAAA,iBAAiB,CAACW,kBAAlB,CAAqCF,QAAQ,CAACG,GAA9C,EACGC,IADH,CACQ,UAACC,IAAD,EAAU;AACdJ,QAAAA,cAAc,CAACD,QAAQ,CAACG,GAAV,CAAd;;AAEA,cAAKL,QAAL,CAAc;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZO,UAAAA,SAAS,EAAE;AAFC,SAAd;AAID,OARH,WASS,UAACC,GAAD,EAAS;AACd,cAAKT,QAAL,CAAc;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZO,UAAAA,SAAS,EAAE;AAFC,SAAd;;AAKAd,QAAAA,iBAAiB,CAACgB,KAAlB,CAAwB;AACtBC,UAAAA,IAAI,EAAE,OADgB;AAEtBC,UAAAA,IAAI,EAAEH,GAAG,CAACI;AAFY,SAAxB;AAID,OAnBH;AAoBD,KA/CkB;;AAAA,mEAiDJ,YAAM;AACnBC,MAAAA,YAAY,CAAC,MAAKC,SAAN,CAAZ;;AACA,YAAKf,QAAL,CAAc;AACZQ,QAAAA,SAAS,EAAE;AADC,OAAd;AAGD,KAtDkB;;AAAA,mEAwDJ,YAAM;AACnB,YAAKO,SAAL,GAAiBC,UAAU,CAAC,YAAM;AAChC,cAAKhB,QAAL,CAAc;AACZQ,UAAAA,SAAS,EAAE;AADC,SAAd;AAGD,OAJ0B,EAIxB,IAJwB,CAA3B;AAKD,KA9DkB;;AAEjB,UAAKS,KAAL,GAAa;AACXhB,MAAAA,OAAO,EAAE,KADE;AAEXO,MAAAA,SAAS,EAAE;AAFA,KAAb;AAIA,UAAKO,SAAL,GAAiB,IAAjB;AANiB;AAOlB;;;;yCAEoB;AAAA,UACXd,OADW,GACC,KAAKgB,KADN,CACXhB,OADW;AAAA,UAEXC,QAFW,GAEE,KAAKH,KAFP,CAEXG,QAFW;;AAInB,UAAI,CAACA,QAAQ,CAACG,GAAV,IAAiBJ,OAArB,EAA8B;AAC5B;AACA,aAAKD,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD;AACF;;;2CAEsB;AACrBa,MAAAA,YAAY,CAAC,KAAKC,SAAN,CAAZ;AACD;;;6BA2CQ;AAAA,yBACuB,KAAKhB,KAD5B;AAAA,UACCG,QADD,gBACCA,QADD;AAAA,UACWgB,OADX,gBACWA,OADX;AAAA,wBAEwB,KAAKD,KAF7B;AAAA,UAECT,SAFD,eAECA,SAFD;AAAA,UAEYP,OAFZ,eAEYA,OAFZ;AAIP,aACE;AACE,QAAA,SAAS,wBACLN,MAAM,CAAC,cAAD,CADD,yBAELC,mBAAmB,CAAC,kBAAD,CAFd,yBAGLA,mBAAmB,qBAAcM,QAAQ,CAACS,IAAvB,EAHd,yBAILO,OAAO,IAAIV,SAAX,GAAuBZ,mBAAmB,CAAC,2BAAD,CAA1C,GAA0E,EAJrE,eADX;AAOE,QAAA,YAAY,EAAE,KAAKuB,YAPrB;AAQE,QAAA,YAAY,EAAE,KAAKC,YARrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWE;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,uBAAuB,EAAE;AAAEC,UAAAA,MAAM,EAAE7B,MAAM,CAACU,QAAQ,CAACoB,IAAT,IAAiB,EAAlB;AAAhB,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,EAaG,CAACpB,QAAQ,CAACqB,QAAV,IACC;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,MAAD;AAAQ,QAAA,OAAO,EAAEtB,OAAjB;AAA0B,QAAA,OAAO,EAAC,OAAlC;AAA0C,QAAA,OAAO,EAAE,KAAKE,cAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,CAdJ,CADF;AAwBD;;;;EA/FuBZ,KAAK,CAACiC,S;;AAkGhC,eAAe1B,WAAf","sourcesContent":["import React from 'react';\r\nimport marked from 'marked';\r\nimport SubmissionService from '~/services/Submission.service';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\n\r\nimport styles from './ViewTooltip.module.scss';\r\nimport editorTooltipStyles from '../EditorTooltip.module.scss';\r\nimport Button from '~/components/Button';\r\n\r\ninterface Feedback {\r\n  _id: string;\r\n  // This should be tied to feedback types!\r\n  type: string;\r\n  body: string;\r\n  readOnly: boolean;\r\n}\r\n\r\ninterface State {\r\n  loading: boolean;\r\n  forceShow: boolean;\r\n}\r\n\r\ninterface Props {\r\n  visible: boolean;\r\n  feedback: Feedback,\r\n  onFeedbackDone: (feedbackId: string) => void;\r\n}\r\n\r\nclass ViewTooltip extends React.Component<Props, State> {\r\n  private timeoutId: NodeJS.Timeout;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: false,\r\n      forceShow: false,\r\n    };\r\n    this.timeoutId = null;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { loading } = this.state;\r\n    const { feedback } = this.props;\r\n\r\n    if (!feedback._id && loading) {\r\n      // eslint-disable-next-line react/no-did-update-set-state\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  onFeedbackDone = () => {\r\n    this.setState({ loading: true });\r\n    const { feedback, onFeedbackDone } = this.props;\r\n\r\n    SubmissionService.markFeedbackAsDone(feedback._id)\r\n      .then((resp) => {\r\n        onFeedbackDone(feedback._id);\r\n\r\n        this.setState({\r\n          loading: false,\r\n          forceShow: false,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          loading: false,\r\n          forceShow: false,\r\n        });\r\n\r\n        SweetAlertService.toast({\r\n          type: 'error',\r\n          text: err.reason,\r\n        });\r\n      });\r\n  }\r\n\r\n  onMouseEnter = () => {\r\n    clearTimeout(this.timeoutId);\r\n    this.setState({\r\n      forceShow: true,\r\n    });\r\n  }\r\n\r\n  onMouseLeave = () => {\r\n    this.timeoutId = setTimeout(() => {\r\n      this.setState({\r\n        forceShow: false,\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    const { feedback, visible } = this.props;\r\n    const { forceShow, loading } = this.state;\r\n\r\n    return (\r\n      <div\r\n        className={`\r\n          ${styles['view-tooltip']}\r\n          ${editorTooltipStyles['feedback-tooltip']}\r\n          ${editorTooltipStyles[`feedback--${feedback.type}`]}\r\n          ${visible || forceShow ? editorTooltipStyles['feedback-tooltip--visible'] : ''}\r\n        `}\r\n        onMouseEnter={this.onMouseEnter}\r\n        onMouseLeave={this.onMouseLeave}\r\n      >\r\n        {/* eslint-disable-next-line react/no-danger */}\r\n        <div className=\"markdown\" dangerouslySetInnerHTML={{ __html: marked(feedback.body || '') }} />\r\n\r\n        {!feedback.readOnly && (\r\n          <div className=\"feedback-tooltip__controls\">\r\n            <Button loading={loading} variant=\"light\" onClick={this.onFeedbackDone}>\r\n              <span>Done</span>\r\n              <i className=\"icon-check\" />\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ViewTooltip;\r\n"]},"metadata":{},"sourceType":"module"}