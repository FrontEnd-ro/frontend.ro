{"ast":null,"code":"import _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar ZipService = /*#__PURE__*/function () {\n  function ZipService() {\n    _classCallCheck(this, ZipService);\n  }\n\n  _createClass(ZipService, null, [{\n    key: \"generate\",\n    value: function generate(rootNode) {\n      if (!validateNode(rootNode)) {\n        console.error('[ZipService.validateNode]: \"rootNode\" param does not respect the required format');\n        return;\n      }\n\n      return Promise.all([import('jszip'), import('file-saver')]).then(function (modules) {\n        var JSZip = modules[0][\"default\"];\n        var FileSaver = modules[1][\"default\"];\n        var zip = new JSZip();\n        createArhiveFromNode(zip, rootNode);\n        return zip.generateAsync({\n          type: 'blob'\n        }).then(function (content) {\n          return FileSaver.saveAs(content, rootNode.name);\n        });\n      });\n    }\n  }]);\n\n  return ZipService;\n}();\n\nexport default ZipService;\n\nfunction validateNode(node) {\n  if (node.hasOwnProperty('name') && Array.isArray(node.files) && Array.isArray(node.folders)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction createArhiveFromNode(zip, node) {\n  node.files.forEach(function (file) {\n    zip.file(file.name, file.content);\n  });\n  node.folders.forEach(function (folderInfo) {\n    var subfolder = zip.folder(folderInfo.name);\n    createArhiveFromNode(subfolder, folderInfo);\n  });\n  return zip;\n}","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/utils/ZipService.ts"],"names":["ZipService","rootNode","validateNode","console","error","Promise","all","then","modules","JSZip","FileSaver","zip","createArhiveFromNode","generateAsync","type","content","saveAs","name","node","hasOwnProperty","Array","isArray","files","folders","forEach","file","folderInfo","subfolder","folder"],"mappings":";;;IAAMA,U;;;;;;;6BACYC,Q,EAAU;AACxB,UAAI,CAACC,YAAY,CAACD,QAAD,CAAjB,EAA6B;AAC3BE,QAAAA,OAAO,CAACC,KAAR,CACE,kFADF;AAGA;AACD;;AAED,aAAOC,OAAO,CAACC,GAAR,CAAY,CAAC,OAAO,OAAP,CAAD,EAAkB,OAAO,YAAP,CAAlB,CAAZ,EAAqDC,IAArD,CACL,UAACC,OAAD,EAAa;AACX,YAAIC,KAAK,GAAGD,OAAO,CAAC,CAAD,CAAP,WAAZ;AACA,YAAIE,SAAS,GAAGF,OAAO,CAAC,CAAD,CAAP,WAAhB;AAEA,YAAIG,GAAG,GAAG,IAAIF,KAAJ,EAAV;AAEAG,QAAAA,oBAAoB,CAACD,GAAD,EAAMV,QAAN,CAApB;AAEA,eAAOU,GAAG,CACPE,aADI,CACU;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADV,EAEJP,IAFI,CAEC,UAACQ,OAAD;AAAA,iBAAaL,SAAS,CAACM,MAAV,CAAiBD,OAAjB,EAA0Bd,QAAQ,CAACgB,IAAnC,CAAb;AAAA,SAFD,CAAP;AAGD,OAZI,CAAP;AAcD;;;;;;AAGH,eAAejB,UAAf;;AAEA,SAASE,YAAT,CAAsBgB,IAAtB,EAA4B;AAC1B,MACEA,IAAI,CAACC,cAAL,CAAoB,MAApB,KACGC,KAAK,CAACC,OAAN,CAAcH,IAAI,CAACI,KAAnB,CADH,IAEGF,KAAK,CAACC,OAAN,CAAcH,IAAI,CAACK,OAAnB,CAHL,EAIE;AACA,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED,SAASX,oBAAT,CAA8BD,GAA9B,EAAmCO,IAAnC,EAAyC;AACvCA,EAAAA,IAAI,CAACI,KAAL,CAAWE,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC3Bd,IAAAA,GAAG,CAACc,IAAJ,CAASA,IAAI,CAACR,IAAd,EAAoBQ,IAAI,CAACV,OAAzB;AACD,GAFD;AAIAG,EAAAA,IAAI,CAACK,OAAL,CAAaC,OAAb,CAAqB,UAACE,UAAD,EAAgB;AACnC,QAAIC,SAAS,GAAGhB,GAAG,CAACiB,MAAJ,CAAWF,UAAU,CAACT,IAAtB,CAAhB;AACAL,IAAAA,oBAAoB,CAACe,SAAD,EAAYD,UAAZ,CAApB;AACD,GAHD;AAKA,SAAOf,GAAP;AACD","sourcesContent":["class ZipService {\r\n  static generate(rootNode) {\r\n    if (!validateNode(rootNode)) {\r\n      console.error(\r\n        '[ZipService.validateNode]: \"rootNode\" param does not respect the required format',\r\n      );\r\n      return;\r\n    }\r\n\r\n    return Promise.all([import('jszip'), import('file-saver')]).then(\r\n      (modules) => {\r\n        let JSZip = modules[0].default;\r\n        let FileSaver = modules[1].default;\r\n\r\n        let zip = new JSZip();\r\n\r\n        createArhiveFromNode(zip, rootNode);\r\n\r\n        return zip\r\n          .generateAsync({ type: 'blob' })\r\n          .then((content) => FileSaver.saveAs(content, rootNode.name));\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZipService;\r\n\r\nfunction validateNode(node) {\r\n  if (\r\n    node.hasOwnProperty('name')\r\n    && Array.isArray(node.files)\r\n    && Array.isArray(node.folders)\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction createArhiveFromNode(zip, node) {\r\n  node.files.forEach((file) => {\r\n    zip.file(file.name, file.content);\r\n  });\r\n\r\n  node.folders.forEach((folderInfo) => {\r\n    let subfolder = zip.folder(folderInfo.name);\r\n    createArhiveFromNode(subfolder, folderInfo);\r\n  });\r\n\r\n  return zip;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}