{"ast":null,"code":"import _extends from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\notification-tooltip\\\\NotificationTooltip.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBell, faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { loadNotificationsSuccess, markNotificationAsRead, markNotificationAsUnread, markAllAsRead } from '../../redux/user/user.actions';\nimport UserService from '../../services/User.service';\nimport NotificationSkeleton from './notification/NotificationSkeleton';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport Notification from './notification/Notification';\nimport styles from './NotificationTooltip.module.scss';\n\nvar NotificationsTooltip = /*#__PURE__*/function (_React$Component) {\n  _inherits(NotificationsTooltip, _React$Component);\n\n  var _super = _createSuper(NotificationsTooltip);\n\n  function NotificationsTooltip(props) {\n    var _this;\n\n    _classCallCheck(this, NotificationsTooltip);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"hiddenRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"observer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"initIntersectionObserver\", function () {\n      var options = {\n        threshold: 0.3\n      };\n      _this.observer = new IntersectionObserver(_this.loadMore, options);\n\n      _this.observer.observe(_this.hiddenRef.current);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"loadMore\", function (entries) {\n      entries.forEach(function (entry) {\n        if (entry.isIntersecting) {\n          _this.loadNextPage();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"loadNextPage\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this$props, user, dispatch, notifications, newNotifications;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, user = _this$props.user, dispatch = _this$props.dispatch;\n              notifications = user.notifications;\n\n              _this.setState({\n                loading: true\n              });\n\n              _context.prev = 3;\n              _context.next = 6;\n              return UserService.getNotifications(notifications.page);\n\n            case 6:\n              newNotifications = _context.sent;\n              dispatch(loadNotificationsSuccess(newNotifications));\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n              SweetAlertService.toast({\n                type: 'error',\n                text: _context.t0\n              });\n\n            case 13:\n              _context.prev = 13;\n\n              _this.setState({\n                loading: false\n              });\n\n              return _context.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 10, 13, 16]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"markAsRead\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n        var user, notifications, dispatch;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                user = _this.props.user;\n                notifications = user.notifications;\n                dispatch = _this.props.dispatch;\n\n                if (!notifications.list.find(function (n) {\n                  return n._id === id;\n                }).isUnread) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.prev = 4;\n                dispatch(markNotificationAsRead(id));\n                _context2.next = 8;\n                return UserService.markAsRead(id);\n\n              case 8:\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](4);\n                dispatch(markNotificationAsUnread(id));\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[4, 10]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"markAllAsRead\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var dispatch;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch = _this.props.dispatch;\n              _context3.prev = 1;\n              dispatch(markAllAsRead());\n              _context3.next = 5;\n              return UserService.markAllAsRead();\n\n            case 5:\n              _context3.next = 10;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](1);\n              SweetAlertService.toast({\n                type: 'error',\n                text: _context3.t0\n              });\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 7]]);\n    })));\n\n    _this.state = {\n      loading: false,\n\n      /** at this point isOpen is true so we can see the notifications when we enter the page */\n      isOpen: true\n    };\n    _this.hiddenRef = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(NotificationsTooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var user = this.props.user;\n      var notifications = user.notifications;\n\n      if (!notifications.end) {\n        this.initIntersectionObserver();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var user = this.props.user;\n\n      if (prevProps.user.notifications.end !== user.notifications.end && user.notifications.end) {\n        this.observer.disconnect();\n      }\n\n      if (prevProps.user.notifications.end !== user.notifications.end && !user.notifications.end) {\n        this.initIntersectionObserver();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var user = this.props.user;\n      var notifications = user.notifications;\n\n      if (!notifications.end) {\n        this.observer.disconnect();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var user = this.props.user;\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          isOpen = _this$state.isOpen;\n      var notifications = user.notifications.list || [];\n      return __jsx(\"div\", {\n        className: \"\".concat(styles['notification-tooltip']),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: styles.icon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, __jsx(FontAwesomeIcon, {\n        width: \"16\",\n        icon: loading ? faSpinner : faBell,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      }), user.notifications.unreadCount > 0 && __jsx(\"span\", {\n        className: \"\".concat(styles['unread-badge'], \" text-white text-center text-xs\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }\n      }, user.notifications.unreadCount)), isOpen && __jsx(\"ul\", {\n        className: styles.notifications,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }\n      }, __jsx(\"li\", {\n        className: \"text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }\n      }, __jsx(\"button\", {\n        type: \"button\",\n        className: \"\".concat(styles['mark-all-as-read-btn'], \" outline-none d-inline-block border-none\"),\n        onClick: this.markAllAsRead,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }\n      }, \"Mark all as read\")), notifications.map(function (notificationProps) {\n        return __jsx(Notification, _extends({}, notificationProps, {\n          key: notificationProps._id,\n          onMarkAsRead: function onMarkAsRead() {\n            return _this2.markAsRead(notificationProps._id);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }\n        }));\n      }), loading && __jsx(React.Fragment, null, __jsx(NotificationSkeleton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }\n      }), __jsx(NotificationSkeleton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      }), __jsx(NotificationSkeleton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }\n      }), __jsx(NotificationSkeleton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      }), __jsx(NotificationSkeleton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 17\n        }\n      })), __jsx(\"li\", {\n        className: \"invisible\",\n        ref: this.hiddenRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return NotificationsTooltip;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nvar connector = connect(mapStateToProps);\nexport default _c = connector(NotificationsTooltip);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/notification-tooltip/NotificationTooltip.tsx"],"names":["React","connect","FontAwesomeIcon","faBell","faSpinner","loadNotificationsSuccess","markNotificationAsRead","markNotificationAsUnread","markAllAsRead","UserService","NotificationSkeleton","SweetAlertService","Notification","styles","NotificationsTooltip","props","options","threshold","observer","IntersectionObserver","loadMore","observe","hiddenRef","current","entries","forEach","entry","isIntersecting","loadNextPage","user","dispatch","notifications","setState","loading","getNotifications","page","newNotifications","toast","type","text","id","list","find","n","_id","isUnread","markAsRead","state","isOpen","createRef","end","initIntersectionObserver","prevProps","disconnect","icon","unreadCount","map","notificationProps","Component","mapStateToProps","connector"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwC,aAAxC;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,mCAAlC;AACA,SACEC,wBADF,EAEEC,sBAFF,EAGEC,wBAHF,EAIEC,aAJF,QAKO,+BALP;AAMA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,OAAOC,oBAAP,MAAiC,qCAAjC;AAEA,OAAOC,iBAAP,MAA8B,2CAA9B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;;IAOMC,oB;;;;;AAQJ,gCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB;;AAAA;;AAAA,+EA0CQ,YAAM;AAC/B,UAAMC,OAAO,GAAG;AACdC,QAAAA,SAAS,EAAE;AADG,OAAhB;AAGA,YAAKC,QAAL,GAAgB,IAAIC,oBAAJ,CAAyB,MAAKC,QAA9B,EAAwCJ,OAAxC,CAAhB;;AACA,YAAKE,QAAL,CAAcG,OAAd,CAAsB,MAAKC,SAAL,CAAeC,OAArC;AACD,KAhDkB;;AAAA,+DAkDR,UAACC,OAAD,EAAa;AACtBA,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,KAAD,EAAW;AACzB,YAAIA,KAAK,CAACC,cAAV,EAA0B;AACxB,gBAAKC,YAAL;AACD;AACF,OAJD;AAKD,KAxDkB;;AAAA,yIA0DJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACc,MAAKb,KADnB,EACLc,IADK,eACLA,IADK,EACCC,QADD,eACCA,QADD;AAELC,cAAAA,aAFK,GAEaF,IAFb,CAELE,aAFK;;AAGb,oBAAKC,QAAL,CAAc;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AAHa;AAAA;AAAA,qBAMoBxB,WAAW,CAACyB,gBAAZ,CAA6BH,aAAa,CAACI,IAA3C,CANpB;;AAAA;AAMLC,cAAAA,gBANK;AAOXN,cAAAA,QAAQ,CAACzB,wBAAwB,CAAC+B,gBAAD,CAAzB,CAAR;AAPW;AAAA;;AAAA;AAAA;AAAA;AASXzB,cAAAA,iBAAiB,CAAC0B,KAAlB,CAAwB;AAAEC,gBAAAA,IAAI,EAAE,OAAR;AAAiBC,gBAAAA,IAAI;AAArB,eAAxB;;AATW;AAAA;;AAWX,oBAAKP,QAAL,CAAc;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AAXW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1DI;;AAAA;AAAA,2EAyEN,kBAAOO,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACHX,gBAAAA,IADG,GACM,MAAKd,KADX,CACHc,IADG;AAEHE,gBAAAA,aAFG,GAEeF,IAFf,CAEHE,aAFG;AAGHD,gBAAAA,QAHG,GAGU,MAAKf,KAHf,CAGHe,QAHG;;AAAA,qBAKPC,aAAa,CAACU,IAAd,CAAmBC,IAAnB,CAAwB,UAACC,CAAD;AAAA,yBAAOA,CAAC,CAACC,GAAF,KAAUJ,EAAjB;AAAA,iBAAxB,EAA6CK,QALtC;AAAA;AAAA;AAAA;;AAAA;AAOPf,gBAAAA,QAAQ,CAACxB,sBAAsB,CAACkC,EAAD,CAAvB,CAAR;AAPO;AAAA,uBAQD/B,WAAW,CAACqC,UAAZ,CAAuBN,EAAvB,CARC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUPV,gBAAAA,QAAQ,CAACvB,wBAAwB,CAACiC,EAAD,CAAzB,CAAR;;AAVO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAzEM;;AAAA;AAAA;AAAA;AAAA;;AAAA,0IAwFH;AAAA;AAAA;AAAA;AAAA;AAAA;AACNV,cAAAA,QADM,GACO,MAAKf,KADZ,CACNe,QADM;AAAA;AAIZA,cAAAA,QAAQ,CAACtB,aAAa,EAAd,CAAR;AAJY;AAAA,qBAKNC,WAAW,CAACD,aAAZ,EALM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOZG,cAAAA,iBAAiB,CAAC0B,KAAlB,CAAwB;AAAEC,gBAAAA,IAAI,EAAE,OAAR;AAAiBC,gBAAAA,IAAI;AAArB,eAAxB;;AAPY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxFG;;AAGjB,UAAKQ,KAAL,GAAa;AACXd,MAAAA,OAAO,EAAE,KADE;;AAEX;AACAe,MAAAA,MAAM,EAAE;AAHG,KAAb;AAMA,UAAK1B,SAAL,gBAAiBtB,KAAK,CAACiD,SAAN,EAAjB;AATiB;AAUlB;;;;wCAEmB;AAAA,UACVpB,IADU,GACD,KAAKd,KADJ,CACVc,IADU;AAAA,UAEVE,aAFU,GAEQF,IAFR,CAEVE,aAFU;;AAIlB,UAAI,CAACA,aAAa,CAACmB,GAAnB,EAAwB;AACtB,aAAKC,wBAAL;AACD;AACF;;;uCAEkBC,S,EAAW;AAAA,UACpBvB,IADoB,GACX,KAAKd,KADM,CACpBc,IADoB;;AAG5B,UAAIuB,SAAS,CAACvB,IAAV,CAAeE,aAAf,CAA6BmB,GAA7B,KAAqCrB,IAAI,CAACE,aAAL,CAAmBmB,GAAxD,IAA+DrB,IAAI,CAACE,aAAL,CAAmBmB,GAAtF,EAA2F;AACzF,aAAKhC,QAAL,CAAcmC,UAAd;AACD;;AAED,UAAID,SAAS,CAACvB,IAAV,CAAeE,aAAf,CAA6BmB,GAA7B,KAAqCrB,IAAI,CAACE,aAAL,CAAmBmB,GAAxD,IAA+D,CAACrB,IAAI,CAACE,aAAL,CAAmBmB,GAAvF,EAA4F;AAC1F,aAAKC,wBAAL;AACD;AACF;;;2CAEsB;AAAA,UACbtB,IADa,GACJ,KAAKd,KADD,CACbc,IADa;AAAA,UAEbE,aAFa,GAEKF,IAFL,CAEbE,aAFa;;AAIrB,UAAI,CAACA,aAAa,CAACmB,GAAnB,EAAwB;AACtB,aAAKhC,QAAL,CAAcmC,UAAd;AACD;AACF;;;6BA2DQ;AAAA;;AAAA,UACCxB,IADD,GACU,KAAKd,KADf,CACCc,IADD;AAAA,wBAEqB,KAAKkB,KAF1B;AAAA,UAECd,OAFD,eAECA,OAFD;AAAA,UAEUe,MAFV,eAEUA,MAFV;AAIP,UAAMjB,aAAa,GAAGF,IAAI,CAACE,aAAL,CAAmBU,IAAnB,IAA2B,EAAjD;AAEA,aACE;AAAK,QAAA,SAAS,YAAK5B,MAAM,CAAC,sBAAD,CAAX,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAEA,MAAM,CAACyC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,eAAD;AAAiB,QAAA,KAAK,EAAC,IAAvB;AAA4B,QAAA,IAAI,EAAErB,OAAO,GAAG7B,SAAH,GAAeD,MAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEG0B,IAAI,CAACE,aAAL,CAAmBwB,WAAnB,GAAiC,CAAjC,IACC;AAAM,QAAA,SAAS,YAAK1C,MAAM,CAAC,cAAD,CAAX,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGgB,IAAI,CAACE,aAAL,CAAmBwB,WADtB,CAHJ,CADF,EASGP,MAAM,IAEL;AAAI,QAAA,SAAS,EAAEnC,MAAM,CAACkB,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,YAAKlB,MAAM,CAAC,sBAAD,CAAX,6CAFX;AAGE,QAAA,OAAO,EAAE,KAAKL,aAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,CADF,EAUGuB,aAAa,CAACyB,GAAd,CAAkB,UAACC,iBAAD;AAAA,eACjB,MAAC,YAAD,eACMA,iBADN;AAEE,UAAA,GAAG,EAAEA,iBAAiB,CAACb,GAFzB;AAGE,UAAA,YAAY,EAAE;AAAA,mBAAM,MAAI,CAACE,UAAL,CAAgBW,iBAAiB,CAACb,GAAlC,CAAN;AAAA,WAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADiB;AAAA,OAAlB,CAVH,EAiBGX,OAAO,IACN,4BACE,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIE,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CAlBJ,EA0BE;AAAI,QAAA,SAAS,EAAC,WAAd;AAA0B,QAAA,GAAG,EAAE,KAAKX,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1BF,CAXJ,CADF;AA2CD;;;;EA5JgCtB,KAAK,CAAC0D,S;;AA+JzC,SAASC,eAAT,CAAyBZ,KAAzB,EAA2C;AACzC,SAAO;AACLlB,IAAAA,IAAI,EAAEkB,KAAK,CAAClB;AADP,GAAP;AAGD;;AAED,IAAM+B,SAAS,GAAG3D,OAAO,CAAC0D,eAAD,CAAzB;AAEA,oBAAeC,SAAS,CAAC9C,oBAAD,CAAxB","sourcesContent":["import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n  loadNotificationsSuccess,\r\n  markNotificationAsRead,\r\n  markNotificationAsUnread,\r\n  markAllAsRead,\r\n} from '../../redux/user/user.actions';\r\nimport UserService from '../../services/User.service';\r\n\r\nimport NotificationSkeleton from './notification/NotificationSkeleton';\r\nimport { RootState } from '~/redux/root.reducer';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\nimport Notification from './notification/Notification';\r\n\r\nimport styles from './NotificationTooltip.module.scss';\r\n\r\ninterface State {\r\n  loading: boolean;\r\n  isOpen: boolean;\r\n}\r\n\r\nclass NotificationsTooltip extends React.Component<\r\n  ConnectedProps<typeof connector>,\r\n  State\r\n  > {\r\n  hiddenRef: React.RefObject<HTMLLIElement>;\r\n\r\n  private observer: IntersectionObserver;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loading: false,\r\n      /** at this point isOpen is true so we can see the notifications when we enter the page */\r\n      isOpen: true,\r\n    };\r\n\r\n    this.hiddenRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { user } = this.props;\r\n    const { notifications } = user;\r\n\r\n    if (!notifications.end) {\r\n      this.initIntersectionObserver();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { user } = this.props;\r\n\r\n    if (prevProps.user.notifications.end !== user.notifications.end && user.notifications.end) {\r\n      this.observer.disconnect();\r\n    }\r\n\r\n    if (prevProps.user.notifications.end !== user.notifications.end && !user.notifications.end) {\r\n      this.initIntersectionObserver();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { user } = this.props;\r\n    const { notifications } = user;\r\n\r\n    if (!notifications.end) {\r\n      this.observer.disconnect();\r\n    }\r\n  }\r\n\r\n  initIntersectionObserver = () => {\r\n    const options = {\r\n      threshold: 0.3,\r\n    };\r\n    this.observer = new IntersectionObserver(this.loadMore, options);\r\n    this.observer.observe(this.hiddenRef.current);\r\n  };\r\n\r\n  loadMore = (entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting) {\r\n        this.loadNextPage();\r\n      }\r\n    });\r\n  };\r\n\r\n  loadNextPage = async () => {\r\n    const { user, dispatch } = this.props;\r\n    const { notifications } = user;\r\n    this.setState({ loading: true });\r\n\r\n    try {\r\n      const newNotifications = await UserService.getNotifications(notifications.page);\r\n      dispatch(loadNotificationsSuccess(newNotifications));\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  markAsRead = async (id) => {\r\n    const { user } = this.props;\r\n    const { notifications } = user;\r\n    const { dispatch } = this.props;\r\n\r\n    if (notifications.list.find((n) => n._id === id).isUnread) {\r\n      try {\r\n        dispatch(markNotificationAsRead(id));\r\n        await UserService.markAsRead(id);\r\n      } catch (err) {\r\n        dispatch(markNotificationAsUnread(id));\r\n      }\r\n    }\r\n  };\r\n\r\n  markAllAsRead = async () => {\r\n    const { dispatch } = this.props;\r\n\r\n    try {\r\n      dispatch(markAllAsRead());\r\n      await UserService.markAllAsRead();\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    const { loading, isOpen } = this.state;\r\n\r\n    const notifications = user.notifications.list || [];\r\n\r\n    return (\r\n      <div className={`${styles['notification-tooltip']}`}>\r\n        <div className={styles.icon}>\r\n          <FontAwesomeIcon width=\"16\" icon={loading ? faSpinner : faBell} />\r\n          {user.notifications.unreadCount > 0 && (\r\n            <span className={`${styles['unread-badge']} text-white text-center text-xs`}>\r\n              {user.notifications.unreadCount}\r\n            </span>\r\n          )}\r\n        </div>\r\n        {isOpen && (\r\n\r\n          <ul className={styles.notifications}>\r\n            <li className=\"text-right\">\r\n              <button\r\n                type=\"button\"\r\n                className={`${styles['mark-all-as-read-btn']} outline-none d-inline-block border-none`}\r\n                onClick={this.markAllAsRead}\r\n              >\r\n                Mark all as read\r\n              </button>\r\n            </li>\r\n            {notifications.map((notificationProps) => (\r\n              <Notification\r\n                {...notificationProps}\r\n                key={notificationProps._id}\r\n                onMarkAsRead={() => this.markAsRead(notificationProps._id)}\r\n              />\r\n            ))}\r\n            {loading && (\r\n              <>\r\n                <NotificationSkeleton />\r\n                <NotificationSkeleton />\r\n                <NotificationSkeleton />\r\n                <NotificationSkeleton />\r\n                <NotificationSkeleton />\r\n              </>\r\n            )}\r\n            <li className=\"invisible\" ref={this.hiddenRef} />\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: RootState) {\r\n  return {\r\n    user: state.user,\r\n  };\r\n}\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport default connector(NotificationsTooltip);\r\n"]},"metadata":{},"sourceType":"module"}