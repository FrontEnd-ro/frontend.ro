{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\pages\\\\demo\\\\html\\\\atributul-type-pentru-liste-ordonate.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport Demo, { DemoPreview } from '~/components/demo';\nimport Header from '~/components/Header';\nimport Footer from '~/components/Footer';\nimport Highlight from '~/components/Highlight/Highlight';\nexport default function OrderedListsType() {\n  const title = 'Atributul \\'type\\' pentru liste ordonate';\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, title, ' ', \"| FrontEnd.ro\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  })), __jsx(React.Fragment, null, __jsx(Header, {\n    demoPage: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }), __jsx(Demo, {\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, \"Dac\\u0103 vrem ca enumerarea elementelor din list\\u0103 s\\u0103 se fac\\u0103 cu un anumit tip de cifr\\u0103 sau cu litere, ne putem folosi de atributul\", ' ', __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"type\"), \":\"), __jsx(DemoPreview, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, __jsx(\"ol\", {\n    type: \"I\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, \" Porne\\u0219te laptopul \"), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 15\n    }\n  }, \" Deschide Visual Studio Code \"), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  }, \" \\xCEncepe s\\u0103 codezi \"))), __jsx(Highlight, {\n    className: \"my-5\",\n    language: \"html\",\n    code: `\n<ol type=\"I\">\n  <li> Pornește laptopul </li>\n  <li> Deschide Visual Studio Code </li>\n  <li> Începe să codezi </li>\n</ol>\n                   \n`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \"Acesta accept\\u0103 \\u0219i alte valori:\"), __jsx(\"ul\", {\n    className: \"with--bullets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, __jsx(\"li\", {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, __jsx(\"strong\", {\n    className: \"formatted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, \"1\"), ' ', \"\\u2013 pentru enumerare cu\", ' ', \"cifre arabe\"), __jsx(\"li\", {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, __jsx(\"strong\", {\n    className: \"formatted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, \"i\"), ' ', \"\\u2013 pentru enumerare cifre romane mici\"), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, __jsx(\"strong\", {\n    className: \"formatted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }, \"a\"), ' ', \"sau\", ' ', __jsx(\"strong\", {\n    className: \"formatted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, \"A\"), ' ', \"\\u2013 pentru enumerare cu litere mici, respectiv mari\"))), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/pages/demo/html/atributul-type-pentru-liste-ordonate.tsx"],"names":["React","Head","Demo","DemoPreview","Header","Footer","Highlight","OrderedListsType","title"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,IAAP,IAAeC,WAAf,QAAkC,mBAAlC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AAEA,eAAe,SAASC,gBAAT,GAA4B;AACzC,QAAMC,KAAK,GAAG,0CAAd;AAEA,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KADH,EAEG,GAFH,kBADF,EAME;AAAM,IAAA,GAAG,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF,EASE,4BACE,MAAC,MAAD;AAAQ,IAAA,QAAQ,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gKAGG,GAHH,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,MADF,EAQE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,IAAI,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAHF,CADF,CARF,EAeE,MAAC,SAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,QAAQ,EAAC,MAFX;AAGE,IAAA,IAAI,EAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,CAVU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,EA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDA3BF,EA8BE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAEG,GAFH,gCAIG,GAJH,gBADF,EAQE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAEG,GAFH,8CARF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAEG,GAFH,SAIG,GAJH,EAKE;AAAQ,IAAA,SAAS,EAAC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SALF,EAMG,GANH,2DAbF,CA9BF,CAFF,EAwDE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxDF,CATF,CADF;AAsED","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\n\r\nimport Demo, { DemoPreview } from '~/components/demo';\r\nimport Header from '~/components/Header';\r\nimport Footer from '~/components/Footer';\r\nimport Highlight from '~/components/Highlight/Highlight';\r\n\r\nexport default function OrderedListsType() {\r\n  const title = 'Atributul \\'type\\' pentru liste ordonate';\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>\r\n          {title}\r\n          {' '}\r\n          | FrontEnd.ro\r\n        </title>\r\n        <link rel=\"icon\" href=\"/favicon.ico\" />\r\n      </Head>\r\n      <>\r\n        <Header demoPage />\r\n        <Demo title={title}>\r\n          <p>\r\n            Dacă vrem ca enumerarea elementelor din listă să se facă cu un\r\n            anumit tip de cifră sau cu litere, ne putem folosi de atributul\r\n            {' '}\r\n            <strong>type</strong>\r\n            :\r\n          </p>\r\n          <DemoPreview>\r\n            <ol type=\"I\">\r\n              <li> Pornește laptopul </li>\r\n              <li> Deschide Visual Studio Code </li>\r\n              <li> Începe să codezi </li>\r\n            </ol>\r\n          </DemoPreview>\r\n          <Highlight\r\n            className=\"my-5\"\r\n            language=\"html\"\r\n            code={`\r\n<ol type=\"I\">\r\n  <li> Pornește laptopul </li>\r\n  <li> Deschide Visual Studio Code </li>\r\n  <li> Începe să codezi </li>\r\n</ol>\r\n                   \r\n`}\r\n          />\r\n          <p>\r\n            Acesta acceptă și alte valori:\r\n          </p>\r\n          <ul className=\"with--bullets\">\r\n            <li className=\"mb-4\">\r\n              <strong className=\"formatted\">1</strong>\r\n              {' '}\r\n              – pentru enumerare cu\r\n              {' '}\r\n              cifre arabe\r\n            </li>\r\n            <li className=\"mb-4\">\r\n              <strong className=\"formatted\">i</strong>\r\n              {' '}\r\n              – pentru enumerare cifre romane mici\r\n            </li>\r\n            <li>\r\n              <strong className=\"formatted\">a</strong>\r\n              {' '}\r\n              sau\r\n              {' '}\r\n              <strong className=\"formatted\">A</strong>\r\n              {' '}\r\n              – pentru enumerare cu litere mici, respectiv mari\r\n            </li>\r\n          </ul>\r\n        </Demo>\r\n        <Footer />\r\n      </>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}