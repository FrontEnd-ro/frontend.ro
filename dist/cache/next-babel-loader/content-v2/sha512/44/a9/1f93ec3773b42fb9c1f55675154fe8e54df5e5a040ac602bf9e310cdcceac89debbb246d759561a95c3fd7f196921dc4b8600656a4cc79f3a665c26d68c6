{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Settings\\\\Settings.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { loadInfo, logoutUser } from '~/redux/user/user.actions';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport PageContainer from '../PageContainer';\nimport ChangeDescription from './components/ChangeDescription';\nimport ChangeEmail from './components/ChangeEmail';\nimport ChangeName from './components/ChangeName';\nimport ChangePassword from './components/ChangePassword';\nimport ChangeUsername from './components/ChangeUsername';\nimport DeleteAccount from './components/DeleteAccount';\nimport styles from './Settings.module.scss';\n/**\r\n * If this page is being rendered we're sure the user\r\n * is already logged in!\r\n */\n\nfunction Settings(_ref) {\n  _s();\n\n  var user = _ref.user,\n      dispatch = _ref.dispatch;\n  var router = useRouter();\n\n  var updateUserStore = function updateUserStore(updatedUser) {\n    dispatch(loadInfo(updatedUser));\n  };\n\n  var deleteUserSuccess = function deleteUserSuccess() {\n    SweetAlertService.toast({\n      type: 'success',\n      text: 'ðŸ‘‹ Contul a fost È™ters cu succes'\n    });\n    router.replace('/').then(function () {\n      dispatch(logoutUser());\n    });\n  };\n\n  return __jsx(PageContainer, {\n    className: styles.settings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \" Set\\u0103ri \"), __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, __jsx(ChangeName, {\n    onSuccess: updateUserStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), __jsx(ChangeDescription, {\n    onSuccess: updateUserStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), __jsx(ChangeUsername, {\n    onSuccess: updateUserStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), __jsx(ChangeEmail, {\n    onSuccess: updateUserStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), __jsx(ChangePassword, {\n    onSuccess: updateUserStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  })), __jsx(\"section\", {\n    className: styles.danger,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(DeleteAccount, {\n    onSuccess: deleteUserSuccess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Settings, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Settings;\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nvar connector = connect(mapStateToProps);\nexport default _c2 = connector(Settings);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Settings\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Settings/Settings.tsx"],"names":["useRouter","React","connect","loadInfo","logoutUser","SweetAlertService","PageContainer","ChangeDescription","ChangeEmail","ChangeName","ChangePassword","ChangeUsername","DeleteAccount","styles","Settings","user","dispatch","router","updateUserStore","updatedUser","deleteUserSuccess","toast","type","text","replace","then","settings","danger","mapStateToProps","state","connector"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwC,aAAxC;AAEA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,2BAArC;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA;AACA;AACA;AACA;;AACA,SAASC,QAAT,OAAwE;AAAA;;AAAA,MAApDC,IAAoD,QAApDA,IAAoD;AAAA,MAA9CC,QAA8C,QAA9CA,QAA8C;AACtE,MAAMC,MAAM,GAAGjB,SAAS,EAAxB;;AACA,MAAMkB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAsB;AAC5CH,IAAAA,QAAQ,CAACb,QAAQ,CAACgB,WAAD,CAAT,CAAR;AACD,GAFD;;AAIA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9Bf,IAAAA,iBAAiB,CAACgB,KAAlB,CAAwB;AACtBC,MAAAA,IAAI,EAAE,SADgB;AAEtBC,MAAAA,IAAI,EAAE;AAFgB,KAAxB;AAKAN,IAAAA,MAAM,CAACO,OAAP,CAAe,GAAf,EAAoBC,IAApB,CAAyB,YAAM;AAC7BT,MAAAA,QAAQ,CAACZ,UAAU,EAAX,CAAR;AACD,KAFD;AAGD,GATD;;AAWA,SACE,MAAC,aAAD;AAAe,IAAA,SAAS,EAAES,MAAM,CAACa,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAER,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,iBAAD;AAAmB,IAAA,SAAS,EAAEA,eAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAEA,eAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEA,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAEA,eAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAFF,EASE;AAAS,IAAA,SAAS,EAAEL,MAAM,CAACc,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,SAAS,EAAEP,iBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CADF;AAeD;;GAhCQN,Q;UACQd,S;;;KADRc,Q;;AAkCT,SAASc,eAAT,CAAyBC,KAAzB,EAA2C;AACzC,SAAO;AACLd,IAAAA,IAAI,EAAEc,KAAK,CAACd;AADP,GAAP;AAGD;;AAED,IAAMe,SAAS,GAAG5B,OAAO,CAAC0B,eAAD,CAAzB;AAEA,qBAAeE,SAAS,CAAChB,QAAD,CAAxB","sourcesContent":["import { useRouter } from 'next/router';\r\nimport React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { RootState } from '~/redux/root.reducer';\r\nimport { loadInfo, logoutUser } from '~/redux/user/user.actions';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\nimport PageContainer from '../PageContainer';\r\nimport ChangeDescription from './components/ChangeDescription';\r\nimport ChangeEmail from './components/ChangeEmail';\r\nimport ChangeName from './components/ChangeName';\r\nimport ChangePassword from './components/ChangePassword';\r\nimport ChangeUsername from './components/ChangeUsername';\r\nimport DeleteAccount from './components/DeleteAccount';\r\n\r\nimport styles from './Settings.module.scss';\r\n\r\n/**\r\n * If this page is being rendered we're sure the user\r\n * is already logged in!\r\n */\r\nfunction Settings({ user, dispatch }: ConnectedProps<typeof connector>) {\r\n  const router = useRouter();\r\n  const updateUserStore = (updatedUser: any) => {\r\n    dispatch(loadInfo(updatedUser));\r\n  };\r\n\r\n  const deleteUserSuccess = () => {\r\n    SweetAlertService.toast({\r\n      type: 'success',\r\n      text: 'ðŸ‘‹ Contul a fost È™ters cu succes',\r\n    });\r\n\r\n    router.replace('/').then(() => {\r\n      dispatch(logoutUser());\r\n    });\r\n  };\r\n\r\n  return (\r\n    <PageContainer className={styles.settings}>\r\n      <h1 className=\"mb-4\"> SetÄƒri </h1>\r\n      <section>\r\n        <ChangeName onSuccess={updateUserStore} />\r\n        <ChangeDescription onSuccess={updateUserStore} />\r\n        <ChangeUsername onSuccess={updateUserStore} />\r\n        <ChangeEmail onSuccess={updateUserStore} />\r\n        <ChangePassword onSuccess={updateUserStore} />\r\n      </section>\r\n      <section className={styles.danger}>\r\n        <DeleteAccount onSuccess={deleteUserSuccess} />\r\n      </section>\r\n    </PageContainer>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state: RootState) {\r\n  return {\r\n    user: state.user,\r\n  };\r\n}\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport default connector(Settings);\r\n"]},"metadata":{},"sourceType":"module"}