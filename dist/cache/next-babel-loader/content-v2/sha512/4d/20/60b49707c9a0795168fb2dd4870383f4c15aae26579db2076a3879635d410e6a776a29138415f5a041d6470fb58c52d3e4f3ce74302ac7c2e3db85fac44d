{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\LivePreviewDemo\\\\LivePreviewDemo.tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from 'react';\nimport BasicEditorLazy from '../Editor/BasicEditor/BasicEditor.lazy';\nimport FolderStructure from '~/services/utils/FolderStructure';\nimport { uuid } from '~/services/Utils';\nimport IframeDemo from './IframeDemo';\nimport styles from './LivePreviewDemo.module.scss';\nexport default function LivePreviewDemo({\n  code,\n  language,\n  alt,\n  demo,\n  className\n}) {\n  const codeRef = useRef(null);\n  const {\n    0: value,\n    1: setValue\n  } = useState(code);\n  const {\n    0: suggestion,\n    1: setSuggestion\n  } = useState(null);\n  const defaultFile = {\n    suggestion,\n    key: uuid(),\n    name: `demo.${language}`,\n    content: code\n  };\n  /**\r\n  ➤ Calling setValue in onEditorChange, causes a re-render of the component which recreates\r\n  folderStructure everytime\r\n  ➤ folderStructure is sent to editor this way\r\n  ➤ something crashes in the editor\r\n  So to avoid this to happen, we use React.useMemo() to create folderStructure only once,\r\n  at the beginning and we'll have the same value of it.\r\n  */\n\n  const folderStructure = React.useMemo(() => new FolderStructure({\n    folders: [],\n    files: [defaultFile]\n  }), []);\n\n  const onEditorChange = e => {\n    const {\n      content\n    } = e.files[0];\n    setSuggestion(content);\n    setValue(content);\n  };\n\n  return __jsx(\"div\", {\n    className: `${styles['live-preview']} my-5`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(BasicEditorLazy, {\n    ref: codeRef,\n    folderStructure: folderStructure,\n    onChange: onEditorChange,\n    showFileSwitcher: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), __jsx(IframeDemo, {\n    sourceCode: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  })), __jsx(\"figcaption\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, alt, demo && __jsx(React.Fragment, null, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), __jsx(\"a\", {\n    href: demo,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"Demo complet\"))));\n}","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/LivePreviewDemo/LivePreviewDemo.tsx"],"names":["React","useRef","useState","BasicEditorLazy","FolderStructure","uuid","IframeDemo","styles","LivePreviewDemo","code","language","alt","demo","className","codeRef","value","setValue","suggestion","setSuggestion","defaultFile","key","name","content","folderStructure","useMemo","folders","files","onEditorChange","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AAEA,OAAOC,eAAP,MAA4B,wCAA5B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AAEA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAOC,MAAP,MAAmB,+BAAnB;AAmBA,eAAe,SAASC,eAAT,CAAyB;AACtCC,EAAAA,IADsC;AAChCC,EAAAA,QADgC;AACtBC,EAAAA,GADsB;AACjBC,EAAAA,IADiB;AACXC,EAAAA;AADW,CAAzB,EAEL;AACR,QAAMC,OAAO,GAAGb,MAAM,CAAC,IAAD,CAAtB;AACA,QAAM;AAAA,OAACc,KAAD;AAAA,OAAQC;AAAR,MAAoBd,QAAQ,CAACO,IAAD,CAAlC;AACA,QAAM;AAAA,OAACQ,UAAD;AAAA,OAAaC;AAAb,MAA8BhB,QAAQ,CAAC,IAAD,CAA5C;AAEA,QAAMiB,WAAwB,GAAG;AAC/BF,IAAAA,UAD+B;AAE/BG,IAAAA,GAAG,EAAEf,IAAI,EAFsB;AAG/BgB,IAAAA,IAAI,EAAG,QAAOX,QAAS,EAHQ;AAI/BY,IAAAA,OAAO,EAAEb;AAJsB,GAAjC;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,QAAMc,eAAe,GAAGvB,KAAK,CAACwB,OAAN,CACtB,MAAM,IAAIpB,eAAJ,CAAoB;AACxBqB,IAAAA,OAAO,EAAE,EADe;AAExBC,IAAAA,KAAK,EAAE,CAACP,WAAD;AAFiB,GAApB,CADgB,EAKtB,EALsB,CAAxB;;AAQA,QAAMQ,cAAc,GAAIC,CAAD,IAAO;AAC5B,UAAM;AAAEN,MAAAA;AAAF,QAAcM,CAAC,CAACF,KAAF,CAAQ,CAAR,CAApB;AAEAR,IAAAA,aAAa,CAACI,OAAD,CAAb;AACAN,IAAAA,QAAQ,CAACM,OAAD,CAAR;AACD,GALD;;AAOA,SACE;AAAK,IAAA,SAAS,EAAG,GAAEf,MAAM,CAAC,cAAD,CAAiB,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEM,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD;AACE,IAAA,GAAG,EAAEC,OADP;AAEE,IAAA,eAAe,EAAES,eAFnB;AAGE,IAAA,QAAQ,EAAEI,cAHZ;AAIE,IAAA,gBAAgB,EAAE,KAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,MAAC,UAAD;AAAY,IAAA,UAAU,EAAEZ,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,GADH,EAEGC,IAAI,IACL,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAG,IAAA,IAAI,EAAEA,IAAT;AAAe,IAAA,MAAM,EAAC,QAAtB;AAA+B,IAAA,GAAG,EAAC,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CAHF,CAZF,CADF;AAyBD","sourcesContent":["import React, { useRef, useState } from 'react';\r\n\r\nimport BasicEditorLazy from '../Editor/BasicEditor/BasicEditor.lazy';\r\nimport FolderStructure from '~/services/utils/FolderStructure';\r\n\r\nimport { uuid } from '~/services/Utils';\r\n\r\nimport IframeDemo from './IframeDemo';\r\n\r\nimport styles from './LivePreviewDemo.module.scss';\r\n\r\ninterface Props {\r\n  code: string;\r\n  language: Language;\r\n  alt: string;\r\n  demo: string;\r\n  className?: string;\r\n}\r\n\r\ninterface FilePreview {\r\n  suggestion\r\n  key: string;\r\n  name: string;\r\n  content: string;\r\n}\r\n\r\ntype Language = 'html' | 'css' | 'json' | 'javascript';\r\n\r\nexport default function LivePreviewDemo({\r\n  code, language, alt, demo, className,\r\n}: Props) {\r\n  const codeRef = useRef(null);\r\n  const [value, setValue] = useState(code);\r\n  const [suggestion, setSuggestion] = useState(null);\r\n\r\n  const defaultFile: FilePreview = {\r\n    suggestion,\r\n    key: uuid(),\r\n    name: `demo.${language}`,\r\n    content: code,\r\n  };\r\n\r\n  /**\r\n  ➤ Calling setValue in onEditorChange, causes a re-render of the component which recreates\r\n  folderStructure everytime\r\n  ➤ folderStructure is sent to editor this way\r\n  ➤ something crashes in the editor\r\n  So to avoid this to happen, we use React.useMemo() to create folderStructure only once,\r\n  at the beginning and we'll have the same value of it.\r\n */\r\n\r\n  const folderStructure = React.useMemo(\r\n    () => new FolderStructure({\r\n      folders: [],\r\n      files: [defaultFile],\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const onEditorChange = (e) => {\r\n    const { content } = e.files[0];\r\n    \r\n    setSuggestion(content);\r\n    setValue(content);\r\n  };\r\n\r\n  return (\r\n    <div className={`${styles['live-preview']} my-5`}>\r\n      <div className={className}>\r\n        <BasicEditorLazy\r\n          ref={codeRef}\r\n          folderStructure={folderStructure}\r\n          onChange={onEditorChange}\r\n          showFileSwitcher={false}\r\n        />\r\n        <IframeDemo sourceCode={value} />\r\n\r\n      </div>\r\n\r\n      <figcaption>\r\n        {alt}\r\n        {demo && (\r\n        <>\r\n          <br />\r\n          <a href={demo} target=\"_blank\" rel=\"noreferrer\">Demo complet</a>\r\n        </>\r\n        )}\r\n      </figcaption>\r\n\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}