{"ast":null,"code":"import _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\SolveExercise\\\\SolveExercise.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Link from 'next/link';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '~/components/Header';\nimport Footer from '~/components/Footer';\nimport Spinner from '~/components/Spinner';\nimport Markdown from '~/components/Markdown';\nimport { withAuthModal } from '~/services/Hooks';\nimport TableOfContents from '~/components/TableOfContents';\nimport PageContainer from '~/components/PageContainer';\nimport StatusBanner from './StatusBanner/StatusBanner';\nimport SubmissionService from '~/services/Submission.service';\nimport { SUBMISSION_STATUS } from '~/../shared/SharedConstants';\nimport LessonExerciseService from '~/services/LessonExercise.service';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport PageWithAsideMenu from '~/components/layout/PageWithAsideMenu/PageWithAsideMenu';\nimport styles from './SolveExercise.module.scss';\nimport { getLessonById } from '~/services/Constants';\nimport CompleteEditorLazy from '../Editor/CompleteEditor/CompleteEditor.lazy';\nimport Button from '../Button';\n\nfunction SolveExercise(_ref) {\n  _s();\n\n  var exerciseId = _ref.exerciseId,\n      userInfo = _ref.userInfo;\n  var solutionRef = useRef(null);\n\n  var _useState = useState(null),\n      submission = _useState[0],\n      setSubmission = _useState[1];\n\n  var _useState2 = useState(false),\n      fetchError = _useState2[0],\n      setFetchError = _useState2[1];\n\n  var _useState3 = useState(false),\n      isSubmitting = _useState3[0],\n      setIsSubmitting = _useState3[1];\n\n  var _useState4 = useState([]),\n      lessonExercises = _useState4[0],\n      setLessonExercises = _useState4[1];\n\n  var readonly = submission && (submission.status === SUBMISSION_STATUS.DONE || submission.status === SUBMISSION_STATUS.AWAITING_REVIEW);\n  var exerciseIndex = lessonExercises.findIndex(function (ex) {\n    var _submission$exercise;\n\n    return ex._id === (submission === null || submission === void 0 ? void 0 : (_submission$exercise = submission.exercise) === null || _submission$exercise === void 0 ? void 0 : _submission$exercise._id);\n  });\n  var folderStructure = React.useMemo(function () {\n    if (!submission) {\n      return null;\n    }\n\n    return JSON.parse(submission.code || submission.exercise.example);\n  }, [submission]);\n\n  var submitSolution = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var code, updatedSubmission;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              code = solutionRef.current.getFolderStructure();\n\n              if (code) {\n                _context.next = 4;\n                break;\n              }\n\n              SweetAlertService.toast({\n                timer: 5000,\n                type: 'error',\n                text: 'Hmm, dacă nu introduci o soluție pe ce să-ți dăm feedback?'\n              });\n              return _context.abrupt(\"return\");\n\n            case 4:\n              if (!(submission.feedbacks.length > 0)) {\n                _context.next = 7;\n                break;\n              }\n\n              SweetAlertService.toast({\n                timer: 5000,\n                type: 'error',\n                text: 'Mai sunt câteva feedback-uri nerezolvate.'\n              });\n              return _context.abrupt(\"return\");\n\n            case 7:\n              setIsSubmitting(true);\n\n              if (!submission._id) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 11;\n              return SubmissionService.updateSubmission(submission._id, {\n                status: SUBMISSION_STATUS.AWAITING_REVIEW,\n                code: code\n              });\n\n            case 11:\n              updatedSubmission = _context.sent;\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.next = 16;\n              return SubmissionService.submitSubmission(exerciseId, code);\n\n            case 16:\n              updatedSubmission = _context.sent;\n\n            case 17:\n              setIsSubmitting(false);\n              setSubmission(updatedSubmission);\n              SweetAlertService.toast({\n                type: 'success',\n                text: 'Ai trimis soluția cu succes'\n              });\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submitSolution() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var exitReadonly = function exitReadonly() {\n    return SubmissionService.updateSubmission(submission._id, {\n      status: SUBMISSION_STATUS.IN_PROGRESS\n    }).then(setSubmission)[\"catch\"](function (err) {\n      console.error('[exitReadonly]', err);\n      SweetAlertService.toast({\n        type: 'error',\n        text: 'Oops! Nu am putut să edităm acest exercițiu. Încearcă din nou!'\n      });\n    });\n  };\n\n  var fetchExercise = function fetchExercise() {\n    return LessonExerciseService.getLessonExercise(exerciseId).then(function (exercise) {\n      setSubmission({\n        user: null,\n        exercise: exercise,\n        code: null,\n        feedbacks: [],\n        assignee: null,\n        status: SUBMISSION_STATUS.IN_PROGRESS\n      });\n    })[\"catch\"](function (err) {\n      console.error('[fetchExercise]', err);\n      setFetchError(true);\n    });\n  };\n\n  var fetchSubmission = function fetchSubmission() {\n    return SubmissionService.getOwnSubmission(exerciseId).then(function (submission) {\n      setSubmission(submission);\n    })[\"catch\"](function (err) {\n      if (err.code === 404) {\n        fetchExercise();\n        return;\n      }\n\n      console.error('[fetchSubmission]', err);\n      setFetchError(true);\n    });\n  };\n\n  var fetchExercisesFromLesson = function fetchExercisesFromLesson(lessonId) {\n    return LessonExerciseService.getAllExercisesForLessons(lessonId).then(function (lessonExercises) {\n      return setLessonExercises(lessonExercises);\n    })[\"catch\"](function (err) {\n      // Do nothing since the default value is empty Array\n      // so the UI is non-breaking\n      console.error('[SolveExercise.fetchExercisesFromLesson]', err);\n    });\n  };\n\n  var onFeedbackDone = function onFeedbackDone(_id) {\n    console.log(_id, submission.feedbacks.filter(function (f) {\n      return f._id !== _id;\n    }));\n    setSubmission(_objectSpread(_objectSpread({}, submission), {}, {\n      feedbacks: submission.feedbacks.filter(function (f) {\n        return f._id !== _id;\n      })\n    }));\n  };\n\n  useEffect(function () {\n    var isLoggedIn = !!userInfo;\n\n    if (isLoggedIn) {\n      fetchSubmission();\n    } else {\n      fetchExercise();\n    }\n  }, [exerciseId]);\n  useEffect(function () {\n    if (submission) {\n      fetchExercisesFromLesson(submission.exercise.lesson);\n    }\n  }, [submission]);\n\n  if (fetchError) {\n    return __jsx(React.Fragment, null, __jsx(Header, {\n      withNavMenu: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }), __jsx(PageContainer, {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }\n    }, \" Oops \\uD83D\\uDE1F\"), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, \" Exerci\\u021Biul e privat sau nu exist\\u0103 \"), __jsx(Link, {\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      className: \"btn btn--blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, \"Navigheaz\\u0103 acas\\u0103\"))), __jsx(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if (!submission) {\n    return __jsx(PageContainer, {\n      className: \"relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 7\n      }\n    }, __jsx(Spinner, {\n      showText: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return __jsx(PageWithAsideMenu, {\n    menu: {\n      title: getLessonById(submission.exercise.lesson).title,\n      Component: __jsx(TableOfContents, {\n        chapters: lessonExercises.map(function (lessonEx, index) {\n          return {\n            id: lessonEx._id,\n            title: \"Exerci\\u021Biu #\".concat(index + 1),\n            href: \"/rezolva/\".concat(lessonEx._id)\n          };\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 9\n        }\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }\n  }, readonly && __jsx(StatusBanner, {\n    status: submission.status,\n    onExitReadonly: exitReadonly,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }), __jsx(PageContainer, {\n    className: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, \"Exerci\\u021Biu\", ' ', submission.exercise.type.toUpperCase()), __jsx(\"p\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, \"Creat de\", ' ', __jsx(Link, {\n    href: \"/\".concat(submission.exercise.user.username),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }\n  }, submission.exercise.user.name || submission.exercise.user.username))), __jsx(Markdown, {\n    markdownString: submission.exercise.body,\n    className: styles.bodyMarkdown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, \" Rezolv\\u0103 exerci\\u021Biul \"), __jsx(CompleteEditorLazy, {\n    readOnly: readonly,\n    key: exerciseId,\n    ref: solutionRef,\n    askTooltip: false,\n    onFeedbackDone: onFeedbackDone,\n    feedbacks: submission.feedbacks,\n    folderStructure: folderStructure,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 11\n    }\n  })), __jsx(\"section\", {\n    className: \"my-5 d-flex align-items-center justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    disabled: readonly,\n    loading: isSubmitting,\n    variant: \"success\",\n    onClick: withAuthModal(!!userInfo, submitSolution),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 11\n    }\n  }, userInfo ? 'Trimite' : 'Autentifică-te și trimite soluția'), submission.status !== SUBMISSION_STATUS.IN_PROGRESS && exerciseIndex + 1 < lessonExercises.length && __jsx(Link, {\n    href: \"/rezolva/\".concat(lessonExercises[exerciseIndex + 1]._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 15\n    }\n  }, __jsx(\"a\", {\n    className: \"btn btn--default no-underline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  }, \"Rezolv\\u0103 urm\\u0103torul exerci\\u021Biu!\")))));\n}\n\n_s(SolveExercise, \"/7AM917c/CjkxFTNkQOKavmS3Jk=\");\n\n_c = SolveExercise;\n\nfunction mapStateToProps(state) {\n  return {\n    userInfo: state.user.info\n  };\n}\n\nvar connector = connect(mapStateToProps);\nexport default _c2 = connector(SolveExercise);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SolveExercise\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/SolveExercise/SolveExercise.tsx"],"names":["Link","React","useState","useEffect","useRef","connect","Header","Footer","Spinner","Markdown","withAuthModal","TableOfContents","PageContainer","StatusBanner","SubmissionService","SUBMISSION_STATUS","LessonExerciseService","SweetAlertService","PageWithAsideMenu","styles","getLessonById","CompleteEditorLazy","Button","SolveExercise","exerciseId","userInfo","solutionRef","submission","setSubmission","fetchError","setFetchError","isSubmitting","setIsSubmitting","lessonExercises","setLessonExercises","readonly","status","DONE","AWAITING_REVIEW","exerciseIndex","findIndex","ex","_id","exercise","folderStructure","useMemo","JSON","parse","code","example","submitSolution","current","getFolderStructure","toast","timer","type","text","feedbacks","length","updateSubmission","updatedSubmission","submitSubmission","exitReadonly","IN_PROGRESS","then","err","console","error","fetchExercise","getLessonExercise","user","assignee","fetchSubmission","getOwnSubmission","fetchExercisesFromLesson","lessonId","getAllExercisesForLessons","onFeedbackDone","log","filter","f","isLoggedIn","lesson","title","Component","map","lessonEx","index","id","href","toUpperCase","username","name","body","bodyMarkdown","mapStateToProps","state","info","connector"],"mappings":"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","sourcesContent":["import Link from 'next/link';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\n\r\nimport Header from '~/components/Header';\r\nimport Footer from '~/components/Footer';\r\nimport Spinner from '~/components/Spinner';\r\nimport Markdown from '~/components/Markdown';\r\nimport { RootState } from '~/redux/root.reducer';\r\nimport { withAuthModal } from '~/services/Hooks';\r\nimport TableOfContents from '~/components/TableOfContents';\r\nimport PageContainer from '~/components/PageContainer';\r\nimport StatusBanner from './StatusBanner/StatusBanner';\r\nimport SubmissionService from '~/services/Submission.service';\r\nimport { UserState, LessonExercise } from '~/redux/user/types';\r\nimport { SUBMISSION_STATUS } from '~/../shared/SharedConstants';\r\nimport LessonExerciseService from '~/services/LessonExercise.service';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\nimport PageWithAsideMenu from '~/components/layout/PageWithAsideMenu/PageWithAsideMenu';\r\n\r\nimport styles from './SolveExercise.module.scss';\r\nimport { getLessonById } from '~/services/Constants';\r\nimport CompleteEditorLazy from '../Editor/CompleteEditor/CompleteEditor.lazy';\r\nimport Feedbacks from '../Editor/Feedbacks';\r\nimport Button from '../Button';\r\n\r\ninterface Props {\r\n  exerciseId: string;\r\n}\r\n\r\ninterface Submission {\r\n  _id?: string;\r\n  user: UserState['info'];\r\n  exercise: LessonExercise;\r\n  code: string;\r\n  assignee: UserState['info'];\r\n  status: string;\r\n  feedbacks: {\r\n    _id: string;\r\n    type: string;\r\n    body: string;\r\n  }[]\r\n}\r\n\r\nfunction SolveExercise({ exerciseId, userInfo }: ConnectedProps<typeof connector> & Props) {\r\n  const solutionRef = useRef(null);\r\n  const [submission, setSubmission] = useState<Submission>(null);\r\n  const [fetchError, setFetchError] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [lessonExercises, setLessonExercises] = useState<LessonExercise[]>([]);\r\n\r\n  const readonly = submission && (\r\n    submission.status === SUBMISSION_STATUS.DONE\r\n    || submission.status === SUBMISSION_STATUS.AWAITING_REVIEW\r\n  );\r\n\r\n  const exerciseIndex = lessonExercises.findIndex((ex) => {\r\n    return ex._id === submission?.exercise?._id;\r\n  });\r\n\r\n  const folderStructure = React.useMemo(() => {\r\n    if (!submission) {\r\n      return null;\r\n    }\r\n\r\n    return JSON.parse(submission.code || submission.exercise.example);\r\n  }, [submission]);\r\n\r\n  const submitSolution = async () => {\r\n    const code = solutionRef.current.getFolderStructure();\r\n\r\n    if (!code) {\r\n      SweetAlertService.toast({\r\n        timer: 5000,\r\n        type: 'error',\r\n        text: 'Hmm, dacă nu introduci o soluție pe ce să-ți dăm feedback?',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (submission.feedbacks.length > 0) {\r\n      SweetAlertService.toast({\r\n        timer: 5000,\r\n        type: 'error',\r\n        text: 'Mai sunt câteva feedback-uri nerezolvate.',\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    let updatedSubmission;\r\n    if (submission._id) {\r\n      updatedSubmission = await SubmissionService.updateSubmission(submission._id, {\r\n        status: SUBMISSION_STATUS.AWAITING_REVIEW,\r\n        code,\r\n      });\r\n    } else {\r\n      updatedSubmission = await SubmissionService.submitSubmission(exerciseId, code);\r\n    }\r\n\r\n    setIsSubmitting(false);\r\n    setSubmission(updatedSubmission);\r\n\r\n    SweetAlertService.toast({\r\n      type: 'success',\r\n      text: 'Ai trimis soluția cu succes',\r\n    });\r\n  };\r\n\r\n  const exitReadonly = () => {\r\n    return SubmissionService.updateSubmission(submission._id, {\r\n      status: SUBMISSION_STATUS.IN_PROGRESS,\r\n    })\r\n      .then(setSubmission)\r\n      .catch((err) => {\r\n        console.error('[exitReadonly]', err);\r\n        SweetAlertService.toast({\r\n          type: 'error',\r\n          text: 'Oops! Nu am putut să edităm acest exercițiu. Încearcă din nou!',\r\n        });\r\n      });\r\n  };\r\n\r\n  const fetchExercise = () => {\r\n    return LessonExerciseService\r\n      .getLessonExercise(exerciseId)\r\n      .then((exercise) => {\r\n        setSubmission({\r\n          user: null,\r\n          exercise,\r\n          code: null,\r\n          feedbacks: [],\r\n          assignee: null,\r\n          status: SUBMISSION_STATUS.IN_PROGRESS,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error('[fetchExercise]', err);\r\n        setFetchError(true);\r\n      });\r\n  };\r\n\r\n  const fetchSubmission = () => {\r\n    return SubmissionService\r\n      .getOwnSubmission(exerciseId)\r\n      .then((submission) => {\r\n        setSubmission(submission);\r\n      })\r\n      .catch((err) => {\r\n        if (err.code === 404) {\r\n          fetchExercise();\r\n          return;\r\n        }\r\n        console.error('[fetchSubmission]', err);\r\n        setFetchError(true);\r\n      });\r\n  };\r\n\r\n  const fetchExercisesFromLesson = (lessonId) => {\r\n    return LessonExerciseService\r\n      .getAllExercisesForLessons(lessonId)\r\n      .then((lessonExercises) => setLessonExercises(lessonExercises))\r\n      .catch((err) => {\r\n        // Do nothing since the default value is empty Array\r\n        // so the UI is non-breaking\r\n        console.error('[SolveExercise.fetchExercisesFromLesson]', err);\r\n      });\r\n  };\r\n\r\n  const onFeedbackDone = (_id: string) => {\r\n    console.log(_id, submission.feedbacks.filter((f) => f._id !== _id));\r\n    setSubmission({\r\n      ...submission,\r\n      feedbacks: submission.feedbacks.filter((f) => f._id !== _id),\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const isLoggedIn = !!userInfo;\r\n\r\n    if (isLoggedIn) {\r\n      fetchSubmission();\r\n    } else {\r\n      fetchExercise();\r\n    }\r\n  }, [exerciseId]);\r\n\r\n  useEffect(() => {\r\n    if (submission) {\r\n      fetchExercisesFromLesson(submission.exercise.lesson);\r\n    }\r\n  }, [submission]);\r\n\r\n  if (fetchError) {\r\n    return (\r\n      <>\r\n        <Header withNavMenu />\r\n        <PageContainer className=\"text-center\">\r\n          <h1> Oops 😟</h1>\r\n          <h2> Exercițiul e privat sau nu există </h2>\r\n\r\n          <Link href=\"/\">\r\n            <a className=\"btn btn--blue\">\r\n              Navighează acasă\r\n            </a>\r\n          </Link>\r\n        </PageContainer>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n  if (!submission) {\r\n    return (\r\n      <PageContainer className=\"relative\">\r\n        <Spinner showText />\r\n      </PageContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <PageWithAsideMenu menu={{\r\n      title: getLessonById(submission.exercise.lesson).title,\r\n      Component: (\r\n        <TableOfContents\r\n          chapters={lessonExercises.map((lessonEx, index) => ({\r\n            id: lessonEx._id,\r\n            title: `Exercițiu #${index + 1}`,\r\n            href: `/rezolva/${lessonEx._id}`,\r\n          }))}\r\n        />\r\n      ),\r\n    }}\r\n    >\r\n      {readonly && (\r\n        <StatusBanner\r\n          status={submission.status}\r\n          onExitReadonly={exitReadonly}\r\n        />\r\n      )}\r\n      <PageContainer className=\"relative\">\r\n        <h1 className=\"mb-0\">\r\n          Exercițiu\r\n          {' '}\r\n          {submission.exercise.type.toUpperCase()}\r\n        </h1>\r\n        <p className=\"m-0\">\r\n          Creat de\r\n          {' '}\r\n          <Link href={`/${submission.exercise.user.username}`}>\r\n            <a>\r\n              {submission.exercise.user.name || submission.exercise.user.username}\r\n            </a>\r\n          </Link>\r\n\r\n        </p>\r\n        <Markdown markdownString={submission.exercise.body} className={styles.bodyMarkdown} />\r\n        <section>\r\n          <h2> Rezolvă exercițiul </h2>\r\n          <CompleteEditorLazy\r\n            readOnly={readonly}\r\n            key={exerciseId}\r\n            ref={solutionRef}\r\n            askTooltip={false}\r\n            onFeedbackDone={onFeedbackDone}\r\n            feedbacks={submission.feedbacks}\r\n            folderStructure={folderStructure}\r\n          />\r\n        </section>\r\n        <section className=\"my-5 d-flex align-items-center justify-content-between\">\r\n          <Button\r\n            disabled={readonly}\r\n            loading={isSubmitting}\r\n            variant=\"success\"\r\n            onClick={withAuthModal(!!userInfo, submitSolution)}\r\n          >\r\n            {userInfo ? 'Trimite' : 'Autentifică-te și trimite soluția'}\r\n          </Button>\r\n          {\r\n            (submission.status !== SUBMISSION_STATUS.IN_PROGRESS)\r\n            && (exerciseIndex + 1 < lessonExercises.length) && (\r\n              <Link href={`/rezolva/${lessonExercises[exerciseIndex + 1]._id}`}>\r\n                <a className=\"btn btn--default no-underline\">\r\n                  Rezolvă următorul exercițiu!\r\n                </a>\r\n              </Link>\r\n            )\r\n          }\r\n        </section>\r\n      </PageContainer>\r\n    </PageWithAsideMenu>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state: RootState) {\r\n  return {\r\n    userInfo: state.user.info,\r\n  };\r\n}\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport default connector(SolveExercise);\r\n"]},"metadata":{},"sourceType":"module"}