{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\user-profile\\\\ChangeAvatar\\\\ChangeAvatar.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { faCamera, faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { connect } from 'react-redux';\nimport { IMAGES_MIME_TYPES } from '~/services/Constants';\nimport { cropImage, filterFiles, loadImage } from '~/services/utils/FileUtils';\nimport Button from '~/components/Button';\nimport UserService from '~/services/User.service';\nimport { loadInfo } from '~/redux/user/user.actions';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport styles from './ChangeAvatar.module.scss';\n\nfunction ChangeAvatar({\n  user,\n  dispatch\n}) {\n  const {\n    0: newAvatar,\n    1: setNewAvatar\n  } = useState(null);\n  const {\n    0: isUploading,\n    1: setIsUploading\n  } = useState(false);\n  const {\n    0: isLoadingBlob,\n    1: setIsLoadingBlob\n  } = useState(false);\n  const cropedImage = useRef(null);\n\n  const changeAvatar = async e => {\n    e.persist();\n\n    if (filterFiles([e.target.files[0]], IMAGES_MIME_TYPES).length === 0) {\n      return;\n    }\n\n    setIsLoadingBlob(true);\n    const imgUrl = URL.createObjectURL(e.target.files[0]);\n    cropedImage.current = await cropImage(imgUrl);\n    const src = URL.createObjectURL(cropedImage.current);\n    await loadImage(src);\n    setNewAvatar(src);\n    e.target.value = null;\n    setIsLoadingBlob(false);\n  };\n\n  const cancel = () => setNewAvatar(null);\n\n  const save = async () => {\n    setIsUploading(true);\n\n    try {\n      const newUserData = await UserService.uploadAvatar(cropedImage.current);\n      dispatch(loadInfo(newUserData));\n    } catch (err) {\n      SweetAlertService.toast({\n        type: 'error',\n        text: err.message || 'Oops! Nu am putut încărca avatarul'\n      });\n    } finally {\n      setNewAvatar(null);\n      setIsUploading(false);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: `${styles['change-avatar']} ${newAvatar ? styles['change-avatar--new'] : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, __jsx(\"label\", {\n    className: \"relative d-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, !newAvatar && __jsx(React.Fragment, null, !isLoadingBlob && !isUploading && __jsx(\"div\", {\n    className: `${styles.overlay} pin-full d-flex align-items-center justify-content-center`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, __jsx(FontAwesomeIcon, {\n    width: \"48\",\n    icon: faCamera,\n    className: \"text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  })), isLoadingBlob && __jsx(\"div\", {\n    className: `${styles['spinner-overlay']} pin-full d-flex align-items-center justify-content-center`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, __jsx(FontAwesomeIcon, {\n    width: \"48\",\n    icon: faSpinner,\n    className: \"text-white rotate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }))), __jsx(\"img\", {\n    src: newAvatar || user.info.avatar,\n    alt: `${user.info.name || user.info.username} avatar`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    disabled: isUploading,\n    hidden: true,\n    type: \"file\",\n    multiple: false,\n    onChange: changeAvatar,\n    accept: IMAGES_MIME_TYPES.join(','),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  })), newAvatar && __jsx(\"div\", {\n    className: `${styles.controls} d-flex justify-content-between`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"light\",\n    disabled: isUploading,\n    onClick: cancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \" Cancel \"), __jsx(Button, {\n    variant: \"blue\",\n    disabled: isUploading,\n    className: `${isUploading ? 'btn--loading' : ''}`,\n    onClick: save,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \" Save \")));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nconst connector = connect(mapStateToProps);\nexport default connector(ChangeAvatar);","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/user-profile/ChangeAvatar/ChangeAvatar.tsx"],"names":["React","useState","useRef","faCamera","faSpinner","FontAwesomeIcon","connect","IMAGES_MIME_TYPES","cropImage","filterFiles","loadImage","Button","UserService","loadInfo","SweetAlertService","styles","ChangeAvatar","user","dispatch","newAvatar","setNewAvatar","isUploading","setIsUploading","isLoadingBlob","setIsLoadingBlob","cropedImage","changeAvatar","e","persist","target","files","length","imgUrl","URL","createObjectURL","current","src","value","cancel","save","newUserData","uploadAvatar","err","toast","type","text","message","overlay","info","avatar","name","username","join","controls","mapStateToProps","state","connector"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { faCamera, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { RootState } from '~/redux/root.reducer';\r\nimport { IMAGES_MIME_TYPES } from '~/services/Constants';\r\nimport { cropImage, filterFiles, loadImage } from '~/services/utils/FileUtils';\r\nimport Button from '~/components/Button';\r\n\r\nimport UserService from '~/services/User.service';\r\nimport { loadInfo } from '~/redux/user/user.actions';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\n\r\nimport styles from './ChangeAvatar.module.scss';\r\n\r\n\r\nfunction ChangeAvatar({ user, dispatch }: ConnectedProps<typeof connector>) {\r\n  const [newAvatar, setNewAvatar] = useState(null);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [isLoadingBlob, setIsLoadingBlob] = useState(false);\r\n\r\n  const cropedImage = useRef<Blob>(null);\r\n\r\n  const changeAvatar = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.persist();\r\n\r\n    if (filterFiles([e.target.files[0]], IMAGES_MIME_TYPES).length === 0) {\r\n      return;\r\n    }\r\n\r\n    setIsLoadingBlob(true);\r\n\r\n    const imgUrl = URL.createObjectURL(e.target.files[0]);\r\n    cropedImage.current = await cropImage(imgUrl);\r\n\r\n    const src = URL.createObjectURL(cropedImage.current);\r\n    await loadImage(src);\r\n    setNewAvatar(src);\r\n\r\n    e.target.value = null;\r\n    setIsLoadingBlob(false);\r\n  };\r\n\r\n  const cancel = () => setNewAvatar(null);\r\n  const save = async () => {\r\n    setIsUploading(true);\r\n    try {\r\n      const newUserData = await UserService.uploadAvatar(cropedImage.current);\r\n      dispatch(loadInfo(newUserData));\r\n    } catch (err) {\r\n      SweetAlertService.toast({\r\n        type: 'error',\r\n        text: err.message || 'Oops! Nu am putut încărca avatarul',\r\n      });\r\n    } finally {\r\n      setNewAvatar(null);\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`${styles['change-avatar']} ${newAvatar ? styles['change-avatar--new'] : ''}`}>\r\n      <label className=\"relative d-block\">\r\n        {!newAvatar && (\r\n          <>\r\n            {!isLoadingBlob && !isUploading && (\r\n            <div className={`${styles.overlay} pin-full d-flex align-items-center justify-content-center`}>\r\n              <FontAwesomeIcon width=\"48\" icon={faCamera} className=\"text-white\" />\r\n            </div>\r\n            )}\r\n            {isLoadingBlob && (\r\n            <div className={`${styles['spinner-overlay']} pin-full d-flex align-items-center justify-content-center`}>\r\n              <FontAwesomeIcon width=\"48\" icon={faSpinner} className=\"text-white rotate\" />\r\n            </div>\r\n            )}\r\n          </>\r\n        )}\r\n        <img src={newAvatar || user.info.avatar} alt={`${user.info.name || user.info.username} avatar`} />\r\n        <input disabled={isUploading} hidden type=\"file\" multiple={false} onChange={changeAvatar} accept={IMAGES_MIME_TYPES.join(',')} />\r\n      </label>\r\n      {newAvatar && (\r\n        <div className={`${styles.controls} d-flex justify-content-between`}>\r\n          <Button  variant=\"light\" disabled={isUploading} onClick={cancel}> Cancel </Button>\r\n          <Button  variant=\"blue\" disabled={isUploading} className={`${isUploading ? 'btn--loading' : ''}`} onClick={save}> Save </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state: RootState) {\r\n  return {\r\n    user: state.user,\r\n  };\r\n}\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport default connector(ChangeAvatar);\r\n"]},"metadata":{},"sourceType":"module"}