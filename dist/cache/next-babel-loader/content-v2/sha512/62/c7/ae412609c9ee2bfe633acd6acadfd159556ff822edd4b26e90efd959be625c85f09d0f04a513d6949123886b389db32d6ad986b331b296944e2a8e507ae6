{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\MarkdownTextarea\\\\MarkdownTextarea.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { faMarkdown } from '@fortawesome/free-brands-svg-icons';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IMAGES_MIME_TYPES } from '~/services/Constants';\nimport { filterFiles } from '~/services/utils/FileUtils';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport styles from './MarkdownTextarea.module.scss';\n\nfunction MarkdownTextarea({\n  title = 'Modifică',\n  markdown = '',\n  className = '',\n  disabled = false,\n  initialTab = 'EDIT',\n  onInput,\n  onUpload\n}) {\n  const previewRef = useRef(null);\n  const textareaRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const {\n    0: isPreview,\n    1: setIsPreview\n  } = useState(initialTab === 'PREVIEW');\n  const {\n    0: isFechingMarked,\n    1: setIsFetchingMarked\n  } = useState(false);\n  const {\n    0: isUploading,\n    1: setIsUploading\n  } = useState(false);\n\n  const textareaInput = e => {\n    const text = e.target.value;\n    onInput(text);\n  };\n\n  const fileInput = e => uploadFiles([...e.target.files]);\n\n  const uploadFiles = async files => {\n    const validFiles = filterFiles(files, IMAGES_MIME_TYPES);\n\n    if (!validFiles.length) {\n      return;\n    }\n\n    setIsUploading(true);\n    const cursorPosition = textareaRef.current.selectionStart;\n\n    try {\n      await onUpload(validFiles, cursorPosition);\n    } catch (err) {\n      SweetAlertService.toast({\n        text: err.message || 'Oops! Nu am putut încărca poza ta. Încearcă din nou!',\n        type: 'error'\n      });\n    } finally {\n      setIsUploading(false);\n      fileInputRef.current.value = null;\n    }\n  };\n\n  const paste = e => {\n    const first = e.clipboardData.items[0];\n\n    if ((first === null || first === void 0 ? void 0 : first.kind) === 'file') {\n      uploadFiles([first.getAsFile()]);\n    }\n  };\n\n  useEffect(() => {\n    if (isPreview) {\n      setIsFetchingMarked(true);\n      import('marked').then(module => {\n        const marked = module.default;\n        previewRef.current.innerHTML = marked(markdown);\n      }).catch(err => {\n        previewRef.current.innerHTML = '<p style=\"color: red;\"> Oops! Verifică conexiunea la net și încearcă din nou </p>';\n      }).finally(() => setIsFetchingMarked(false));\n    }\n  }, [isPreview]);\n  return __jsx(\"div\", {\n    className: `${styles['markdown-textarea']} ${className}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, __jsx(\"label\", {\n    className: `${styles.label} ${isPreview ? '' : `${styles['is--checked']}`}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, title, __jsx(\"input\", {\n    checked: !isPreview,\n    onChange: () => setIsPreview(false),\n    type: \"radio\",\n    name: \"nav\",\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })), __jsx(\"label\", {\n    className: `${styles.label} ${isPreview ? `${styles['is--checked']}` : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, isFechingMarked ? __jsx(FontAwesomeIcon, {\n    width: \"20\",\n    className: \"text-white rotate\",\n    icon: faSpinner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }) : 'Preview', __jsx(\"input\", {\n    checked: isPreview,\n    onChange: () => setIsPreview(true),\n    type: \"radio\",\n    name: \"nav\",\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, __jsx(\"textarea\", {\n    placeholder: \"Editeaz\\u0103 folosing Markdown...\",\n    ref: textareaRef,\n    disabled: isPreview || disabled,\n    className: `${isPreview ? 'd-none absolute' : ''}`,\n    value: markdown,\n    rows: 10,\n    onChange: textareaInput,\n    onPaste: paste,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    ref: previewRef,\n    className: `${isPreview ? '' : 'd-none absolute'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  })), !disabled && __jsx(\"footer\", {\n    className: \"text-right relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, !isPreview && __jsx(\"label\", {\n    className: \"absolute\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, isUploading ? __jsx(FontAwesomeIcon, {\n    className: \"rotate\",\n    icon: faSpinner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 28\n    }\n  }) : 'Adaugă imagini', __jsx(\"input\", {\n    ref: fileInputRef,\n    disabled: isUploading || disabled,\n    type: \"file\",\n    multiple: false,\n    accept: IMAGES_MIME_TYPES.join(','),\n    onChange: fileInput,\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  })), __jsx(FontAwesomeIcon, {\n    icon: faMarkdown,\n    width: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default MarkdownTextarea;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/MarkdownTextarea/MarkdownTextarea.tsx"],"names":["React","useEffect","useRef","useState","faMarkdown","faSpinner","FontAwesomeIcon","IMAGES_MIME_TYPES","filterFiles","SweetAlertService","styles","MarkdownTextarea","title","markdown","className","disabled","initialTab","onInput","onUpload","previewRef","textareaRef","fileInputRef","isPreview","setIsPreview","isFechingMarked","setIsFetchingMarked","isUploading","setIsUploading","textareaInput","e","text","target","value","fileInput","uploadFiles","files","validFiles","length","cursorPosition","current","selectionStart","err","toast","message","type","paste","first","clipboardData","items","kind","getAsFile","then","module","marked","default","innerHTML","catch","finally","label","join"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { faMarkdown } from '@fortawesome/free-brands-svg-icons';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IMAGES_MIME_TYPES } from '~/services/Constants';\r\nimport { filterFiles } from '~/services/utils/FileUtils';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\n\r\nimport styles from './MarkdownTextarea.module.scss';\r\n\r\ninterface Props {\r\n  title?: string;\r\n  markdown?: string;\r\n  className?: string;\r\n  disabled?: boolean;\r\n  initialTab?: 'EDIT' | 'PREVIEW';\r\n  onInput: (text: string) => void;\r\n  onUpload: (files: File[], cursorPosition: number) => void;\r\n}\r\n\r\nfunction MarkdownTextarea({\r\n  title = 'Modifică',\r\n  markdown = '',\r\n  className = '',\r\n  disabled = false,\r\n  initialTab = 'EDIT',\r\n  onInput,\r\n  onUpload,\r\n}: Props) {\r\n  const previewRef = useRef(null);\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const [isPreview, setIsPreview] = useState(initialTab === 'PREVIEW');\r\n  const [isFechingMarked, setIsFetchingMarked] = useState(false);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n\r\n  const textareaInput = (e) => {\r\n    const text = e.target.value;\r\n    onInput(text);\r\n  };\r\n\r\n  const fileInput = (e: React.ChangeEvent<HTMLInputElement>) => uploadFiles([...e.target.files]);\r\n\r\n  const uploadFiles = async (files: File[]) => {\r\n    const validFiles = filterFiles(files, IMAGES_MIME_TYPES);\r\n\r\n    if (!validFiles.length) {\r\n      return;\r\n    }\r\n\r\n    setIsUploading(true);\r\n    const cursorPosition = textareaRef.current.selectionStart;\r\n\r\n    try {\r\n      await onUpload(validFiles, cursorPosition);\r\n    } catch (err) {\r\n      SweetAlertService.toast({\r\n        text: err.message || 'Oops! Nu am putut încărca poza ta. Încearcă din nou!',\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setIsUploading(false);\r\n      fileInputRef.current.value = null;\r\n    }\r\n  };\r\n\r\n  const paste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\r\n    const first = e.clipboardData.items[0];\r\n\r\n    if (first?.kind === 'file') {\r\n      uploadFiles([first.getAsFile()]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isPreview) {\r\n      setIsFetchingMarked(true);\r\n      import('marked')\r\n        .then((module) => {\r\n          const marked = module.default;\r\n\r\n          previewRef.current.innerHTML = marked(markdown);\r\n        })\r\n        .catch((err) => {\r\n          previewRef.current.innerHTML = '<p style=\"color: red;\"> Oops! Verifică conexiunea la net și încearcă din nou </p>';\r\n        })\r\n        .finally(() => setIsFetchingMarked(false));\r\n    }\r\n  }, [isPreview]);\r\n\r\n  return (\r\n    <div className={`${styles['markdown-textarea']} ${className}`}>\r\n      <label className={`${styles.label} ${isPreview ? '' : `${styles['is--checked']}`}`}>\r\n        {title}\r\n        <input checked={!isPreview} onChange={() => setIsPreview(false)} type=\"radio\" name=\"nav\" hidden />\r\n      </label>\r\n      <label className={`${styles.label} ${isPreview ? `${styles['is--checked']}` : ''}`}>\r\n        {isFechingMarked\r\n          ? <FontAwesomeIcon width=\"20\" className=\"text-white rotate\" icon={faSpinner} />\r\n          : 'Preview'}\r\n        <input checked={isPreview} onChange={() => setIsPreview(true)} type=\"radio\" name=\"nav\" hidden />\r\n      </label>\r\n\r\n      <div>\r\n        <div className=\"relative\">\r\n          <textarea\r\n            placeholder=\"Editează folosing Markdown...\"\r\n            ref={textareaRef}\r\n            disabled={isPreview || disabled}\r\n            className={`${isPreview ? 'd-none absolute' : ''}`}\r\n            value={markdown}\r\n            rows={10}\r\n            onChange={textareaInput}\r\n            onPaste={paste}\r\n          />\r\n          <div ref={previewRef} className={`${isPreview ? '' : 'd-none absolute'}`} />\r\n        </div>\r\n        {!disabled && (\r\n        <footer className=\"text-right relative\">\r\n          {!isPreview && (\r\n          <label className=\"absolute\">\r\n            {isUploading ? <FontAwesomeIcon className=\"rotate\" icon={faSpinner} /> : 'Adaugă imagini'}\r\n            <input\r\n              ref={fileInputRef}\r\n              disabled={isUploading || disabled}\r\n              type=\"file\"\r\n              multiple={false}\r\n              accept={IMAGES_MIME_TYPES.join(',')}\r\n              onChange={fileInput}\r\n              hidden\r\n            />\r\n          </label>\r\n          )}\r\n\r\n          <FontAwesomeIcon icon={faMarkdown} width=\"20\" />\r\n        </footer>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MarkdownTextarea;\r\n"]},"metadata":{},"sourceType":"module"}