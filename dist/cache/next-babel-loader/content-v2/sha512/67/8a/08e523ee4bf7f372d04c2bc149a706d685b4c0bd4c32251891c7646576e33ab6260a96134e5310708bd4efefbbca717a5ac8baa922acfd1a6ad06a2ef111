{"ast":null,"code":"import _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { alphabeticSortComparator, uuid } from '../Utils';\nimport ZipService from './ZipService';\nvar ERROR_MESSAGES = {\n  FILE_MISSING: \"Hmm, there's a bug in here. File seems to be missing.\",\n  DUPLICATE_FILE_KEYS: \"Hmm, there's a bug in here. Duplicate file key found\",\n  DUPLICATE_FILE_NAMES: 'Cannot have duplicate file names inside the same folder',\n  FOLDER_MISSING: \"Hmm, there's a bug in here. Folder seems to be missing.\",\n  DUPLICATE_FOLDER_KEYS: \"Hmm, there's a bug in here. Duplicate folder key found\",\n  DUPLICATE_FOLDER_NAMES: 'Cannot have duplicate folder names inside the same folder'\n};\n\nvar FolderStructure = /*#__PURE__*/function () {\n  function FolderStructure() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$folders = _ref.folders,\n        folders = _ref$folders === void 0 ? [] : _ref$folders,\n        _ref$files = _ref.files,\n        files = _ref$files === void 0 ? [] : _ref$files;\n\n    _classCallCheck(this, FolderStructure);\n\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"folders\", void 0);\n\n    _defineProperty(this, \"files\", void 0);\n\n    this.key = null;\n    this.folders = folders;\n    this.files = files;\n  }\n  /** GETs */\n\n\n  _createClass(FolderStructure, [{\n    key: \"hasFile\",\n    value: function hasFile(key) {\n      var subFolder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n      return !!this.getFile(key, subFolder).file;\n    }\n  }, {\n    key: \"getFile\",\n    value: function getFile(key) {\n      var subFolder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n      var foundFile = subFolder.files.find(function (file) {\n        return file.key === key;\n      });\n\n      if (foundFile) {\n        return {\n          file: foundFile,\n          parentKey: subFolder.key\n        };\n      }\n\n      var _iterator = _createForOfIteratorHelper(subFolder.folders),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var folder = _step.value;\n\n          var _foundFile = this.getFile(key, folder);\n\n          if (_foundFile.file) {\n            return _foundFile;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return {\n        file: null\n      };\n    }\n  }, {\n    key: \"getFolder\",\n    value: function getFolder(key) {\n      var subFolder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n\n      if (!key) {\n        return {\n          folder: this,\n          parentKey: null\n        };\n      }\n\n      var foundFolder = subFolder.folders.find(function (folder) {\n        return folder.key === key;\n      });\n\n      if (foundFolder) {\n        return {\n          folder: foundFolder,\n          parentKey: subFolder.key\n        };\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(subFolder.folders),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var folder = _step2.value;\n\n          var _foundFolder = this.getFolder(key, folder);\n\n          if (_foundFolder.folder) {\n            return _foundFolder;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return {\n        folder: null\n      };\n    }\n    /** ADDs */\n\n  }, {\n    key: \"addFile\",\n    value: function addFile(parentKey) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$name = _ref2.name,\n          name = _ref2$name === void 0 ? '' : _ref2$name,\n          _ref2$content = _ref2.content,\n          content = _ref2$content === void 0 ? '' : _ref2$content,\n          _ref2$key = _ref2.key,\n          key = _ref2$key === void 0 ? uuid() : _ref2$key;\n\n      if (this.getFile(key).file) {\n        throw ERROR_MESSAGES.DUPLICATE_FILE_KEYS;\n      }\n\n      var siblingFiles = this.getFolder(parentKey).folder.files;\n\n      if (siblingFiles.find(function (file) {\n        return file.name === name;\n      })) {\n        throw ERROR_MESSAGES.DUPLICATE_FILE_NAMES;\n      }\n\n      siblingFiles.push({\n        key: key,\n        name: name,\n        content: content\n      });\n      siblingFiles.sort(function (fileA, fileB) {\n        return alphabeticSortComparator(fileA.name, fileB.name);\n      });\n      return key;\n    }\n  }, {\n    key: \"addFolder\",\n    value: function addFolder(parentKey) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$name = _ref3.name,\n          name = _ref3$name === void 0 ? '' : _ref3$name,\n          _ref3$key = _ref3.key,\n          key = _ref3$key === void 0 ? uuid() : _ref3$key,\n          _ref3$files = _ref3.files,\n          files = _ref3$files === void 0 ? [] : _ref3$files,\n          _ref3$folders = _ref3.folders,\n          folders = _ref3$folders === void 0 ? [] : _ref3$folders;\n\n      if (this.getFolder(key).folder) {\n        throw ERROR_MESSAGES.DUPLICATE_FOLDER_KEYS;\n      }\n\n      var siblingFolders = this.getFolder(parentKey).folder.folders;\n\n      if (siblingFolders.find(function (folder) {\n        return folder.name === name;\n      })) {\n        throw ERROR_MESSAGES.DUPLICATE_FOLDER_NAMES;\n      }\n\n      siblingFolders.push({\n        key: key,\n        name: name,\n        files: files,\n        folders: folders\n      });\n      siblingFolders.sort(function (folderA, folderB) {\n        return alphabeticSortComparator(folderA.name, folderB.name);\n      });\n      return key;\n    }\n    /** RENAMEs */\n\n  }, {\n    key: \"renameFile\",\n    value: function renameFile(key, name) {\n      var _this$getFile = this.getFile(key),\n          file = _this$getFile.file,\n          parentKey = _this$getFile.parentKey;\n\n      if (!file) {\n        throw ERROR_MESSAGES.FILE_MISSING;\n      }\n\n      var siblingFiles = this.getFolder(parentKey).folder.files;\n\n      if (siblingFiles.find(function (file) {\n        return file.name === name && file.key !== key;\n      })) {\n        throw ERROR_MESSAGES.DUPLICATE_FILE_NAMES;\n      }\n\n      file.name = name;\n      siblingFiles.sort(function (fileA, fileB) {\n        return alphabeticSortComparator(fileA.name, fileB.name);\n      });\n    }\n  }, {\n    key: \"setContent\",\n    value: function setContent(key, content) {\n      var _this$getFile2 = this.getFile(key),\n          file = _this$getFile2.file;\n\n      if (!file) {\n        throw ERROR_MESSAGES.FILE_MISSING;\n      }\n\n      file.content = content;\n    }\n  }, {\n    key: \"renameFolder\",\n    value: function renameFolder(key, name) {\n      var _this$getFolder = this.getFolder(key),\n          folder = _this$getFolder.folder,\n          parentKey = _this$getFolder.parentKey;\n\n      if (!folder) {\n        throw ERROR_MESSAGES.FOLDER_MISSING;\n      }\n\n      var siblingFolders = this.getFolder(parentKey).folder.folders;\n\n      if (siblingFolders.find(function (folder) {\n        return folder.name === name && folder.key !== key;\n      })) {\n        throw ERROR_MESSAGES.DUPLICATE_FOLDER_NAMES;\n      }\n\n      folder.name = name;\n    }\n    /** DELETEs */\n\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(key) {\n      var _this$getFile3 = this.getFile(key),\n          file = _this$getFile3.file,\n          parentKey = _this$getFile3.parentKey;\n\n      if (!file) {\n        throw ERROR_MESSAGES.FILE_MISSING;\n      }\n\n      var parentFolder = this.getFolder(parentKey).folder;\n      parentFolder.files = parentFolder.files.filter(function (file) {\n        return file.key !== key;\n      });\n    }\n  }, {\n    key: \"deleteFolder\",\n    value: function deleteFolder(key) {\n      var _this$getFolder2 = this.getFolder(key),\n          folder = _this$getFolder2.folder,\n          parentKey = _this$getFolder2.parentKey;\n\n      if (!folder) {\n        throw ERROR_MESSAGES.FOLDER_MISSING;\n      }\n\n      var parentFolder = this.getFolder(parentKey).folder;\n      parentFolder.folders = parentFolder.folders.filter(function (folder) {\n        return folder.key !== key;\n      });\n    }\n    /** MOVEs */\n\n  }, {\n    key: \"moveFile\",\n    value: function moveFile(key, newParentKey) {\n      var _this$getFile4 = this.getFile(key),\n          file = _this$getFile4.file,\n          parentKey = _this$getFile4.parentKey;\n\n      if (!file) {\n        throw ERROR_MESSAGES.FILE_MISSING;\n      }\n\n      try {\n        this.deleteFile(key);\n        this.addFile(newParentKey, file);\n      } catch (err) {\n        this.addFile(parentKey, file);\n        throw err;\n      }\n    }\n  }, {\n    key: \"moveFolder\",\n    value: function moveFolder(key, newParentKey) {\n      var _this$getFolder3 = this.getFolder(key),\n          folder = _this$getFolder3.folder,\n          parentKey = _this$getFolder3.parentKey;\n\n      if (!folder) {\n        throw ERROR_MESSAGES.FOLDER_MISSING;\n      }\n\n      try {\n        this.deleteFolder(key);\n        this.addFolder(newParentKey, folder);\n      } catch (err) {\n        this.addFolder(parentKey, folder);\n        throw err;\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return JSON.stringify({\n        folders: this.folders,\n        files: this.files\n      });\n    }\n  }, {\n    key: \"downloadAsZip\",\n    value: function downloadAsZip() {\n      var root = {\n        name: 'source-code-archive',\n        files: this.files,\n        folders: this.folders\n      };\n      return ZipService.generate(root);\n    }\n  }]);\n\n  return FolderStructure;\n}();\n\nexport function NewSourceFile() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Untitled file';\n  return {\n    key: uuid(),\n    content: '',\n    name: name\n  };\n}\n_c = NewSourceFile;\nexport default FolderStructure;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewSourceFile\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/utils/FolderStructure.ts"],"names":["alphabeticSortComparator","uuid","ZipService","ERROR_MESSAGES","FILE_MISSING","DUPLICATE_FILE_KEYS","DUPLICATE_FILE_NAMES","FOLDER_MISSING","DUPLICATE_FOLDER_KEYS","DUPLICATE_FOLDER_NAMES","FolderStructure","folders","files","key","subFolder","getFile","file","foundFile","find","parentKey","folder","foundFolder","getFolder","name","content","siblingFiles","push","sort","fileA","fileB","siblingFolders","folderA","folderB","parentFolder","filter","newParentKey","deleteFile","addFile","err","deleteFolder","addFolder","JSON","stringify","root","generate","NewSourceFile"],"mappings":"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","sourcesContent":["import { alphabeticSortComparator, uuid } from '../Utils';\r\nimport ZipService from './ZipService';\r\n\r\nconst ERROR_MESSAGES = {\r\n  FILE_MISSING: \"Hmm, there's a bug in here. File seems to be missing.\",\r\n  DUPLICATE_FILE_KEYS: \"Hmm, there's a bug in here. Duplicate file key found\",\r\n  DUPLICATE_FILE_NAMES:\r\n    'Cannot have duplicate file names inside the same folder',\r\n\r\n  FOLDER_MISSING: \"Hmm, there's a bug in here. Folder seems to be missing.\",\r\n  DUPLICATE_FOLDER_KEYS:\r\n    \"Hmm, there's a bug in here. Duplicate folder key found\",\r\n  DUPLICATE_FOLDER_NAMES:\r\n    'Cannot have duplicate folder names inside the same folder',\r\n};\r\n\r\nexport interface ExerciseFile {\r\n  key: string;\r\n  name: string;\r\n  content: string;\r\n}\r\n\r\nexport interface ExerciseFolder {\r\n  key: string;\r\n  name: string;\r\n  files: ExerciseFile[];\r\n  folders: ExerciseFolder;\r\n}\r\n\r\nclass FolderStructure {\r\n  public key: string;\r\n\r\n  public folders: ExerciseFolder[];\r\n\r\n  public files: ExerciseFile[];\r\n\r\n  constructor({ folders = [], files = [] } = {}) {\r\n    this.key = null;\r\n    this.folders = folders;\r\n    this.files = files;\r\n  }\r\n\r\n  /** GETs */\r\n  hasFile(key, subFolder = this) {\r\n    return !!this.getFile(key, subFolder).file;\r\n  }\r\n\r\n  getFile(key, subFolder: any = this) {\r\n    let foundFile = subFolder.files.find((file) => file.key === key);\r\n    if (foundFile) {\r\n      return {\r\n        file: foundFile,\r\n        parentKey: subFolder.key,\r\n      };\r\n    }\r\n\r\n    for (let folder of subFolder.folders) {\r\n      let foundFile = this.getFile(key, folder);\r\n      if (foundFile.file) {\r\n        return foundFile;\r\n      }\r\n    }\r\n\r\n    return { file: null };\r\n  }\r\n\r\n  getFolder(key, subFolder: any = this) {\r\n    if (!key) {\r\n      return { folder: this, parentKey: null };\r\n    }\r\n\r\n    let foundFolder = subFolder.folders.find((folder) => folder.key === key);\r\n    if (foundFolder) {\r\n      return {\r\n        folder: foundFolder,\r\n        parentKey: subFolder.key,\r\n      };\r\n    }\r\n\r\n    for (let folder of subFolder.folders) {\r\n      let foundFolder = this.getFolder(key, folder);\r\n      if (foundFolder.folder) {\r\n        return foundFolder;\r\n      }\r\n    }\r\n\r\n    return { folder: null };\r\n  }\r\n\r\n  /** ADDs */\r\n  addFile(parentKey, { name = '', content = '', key = uuid() } = {}) {\r\n    if (this.getFile(key).file) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FILE_KEYS;\r\n    }\r\n\r\n    let siblingFiles = this.getFolder(parentKey).folder.files;\r\n\r\n    if (siblingFiles.find((file) => file.name === name)) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FILE_NAMES;\r\n    }\r\n\r\n    siblingFiles.push({ key, name, content });\r\n    siblingFiles.sort((fileA, fileB) => alphabeticSortComparator(fileA.name, fileB.name));\r\n\r\n    return key;\r\n  }\r\n\r\n  addFolder(\r\n    parentKey,\r\n    {\r\n      name = '', key = uuid(), files = [], folders = [],\r\n    } = {},\r\n  ) {\r\n    if (this.getFolder(key).folder) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FOLDER_KEYS;\r\n    }\r\n\r\n    let siblingFolders = this.getFolder(parentKey).folder.folders;\r\n\r\n    if (siblingFolders.find((folder) => folder.name === name)) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FOLDER_NAMES;\r\n    }\r\n\r\n    siblingFolders.push({\r\n      key,\r\n      name,\r\n      files,\r\n      folders,\r\n    });\r\n    siblingFolders.sort((folderA, folderB) => alphabeticSortComparator(folderA.name, folderB.name));\r\n\r\n    return key;\r\n  }\r\n\r\n  /** RENAMEs */\r\n  renameFile(key, name) {\r\n    let { file, parentKey } = this.getFile(key);\r\n    if (!file) {\r\n      throw ERROR_MESSAGES.FILE_MISSING;\r\n    }\r\n\r\n    let siblingFiles = this.getFolder(parentKey).folder.files;\r\n\r\n    if (siblingFiles.find((file) => file.name === name && file.key !== key)) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FILE_NAMES;\r\n    }\r\n\r\n    file.name = name;\r\n    siblingFiles.sort((fileA, fileB) => alphabeticSortComparator(fileA.name, fileB.name));\r\n  }\r\n\r\n  setContent(key, content) {\r\n    let { file } = this.getFile(key);\r\n    if (!file) {\r\n      throw ERROR_MESSAGES.FILE_MISSING;\r\n    }\r\n\r\n    file.content = content;\r\n  }\r\n\r\n  renameFolder(key, name) {\r\n    let { folder, parentKey } = this.getFolder(key);\r\n    if (!folder) {\r\n      throw ERROR_MESSAGES.FOLDER_MISSING;\r\n    }\r\n\r\n    let siblingFolders = this.getFolder(parentKey).folder.folders;\r\n\r\n    if (\r\n      siblingFolders.find(\r\n        (folder) => folder.name === name && folder.key !== key,\r\n      )\r\n    ) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FOLDER_NAMES;\r\n    }\r\n\r\n    folder.name = name;\r\n  }\r\n\r\n  /** DELETEs */\r\n  deleteFile(key) {\r\n    let { file, parentKey } = this.getFile(key);\r\n    if (!file) {\r\n      throw ERROR_MESSAGES.FILE_MISSING;\r\n    }\r\n\r\n    let parentFolder = this.getFolder(parentKey).folder;\r\n    parentFolder.files = parentFolder.files.filter((file) => file.key !== key);\r\n  }\r\n\r\n  deleteFolder(key) {\r\n    let { folder, parentKey } = this.getFolder(key);\r\n    if (!folder) {\r\n      throw ERROR_MESSAGES.FOLDER_MISSING;\r\n    }\r\n\r\n    let parentFolder = this.getFolder(parentKey).folder;\r\n    parentFolder.folders = parentFolder.folders.filter(\r\n      (folder) => folder.key !== key,\r\n    );\r\n  }\r\n\r\n  /** MOVEs */\r\n  moveFile(key, newParentKey) {\r\n    let { file, parentKey } = this.getFile(key);\r\n    if (!file) {\r\n      throw ERROR_MESSAGES.FILE_MISSING;\r\n    }\r\n\r\n    try {\r\n      this.deleteFile(key);\r\n      this.addFile(newParentKey, file);\r\n    } catch (err) {\r\n      this.addFile(parentKey, file);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  moveFolder(key, newParentKey) {\r\n    let { folder, parentKey } = this.getFolder(key);\r\n    if (!folder) {\r\n      throw ERROR_MESSAGES.FOLDER_MISSING;\r\n    }\r\n\r\n    try {\r\n      this.deleteFolder(key);\r\n      this.addFolder(newParentKey, folder);\r\n    } catch (err) {\r\n      this.addFolder(parentKey, folder);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    return JSON.stringify({\r\n      folders: this.folders,\r\n      files: this.files,\r\n    });\r\n  }\r\n\r\n  downloadAsZip() {\r\n    let root = {\r\n      name: 'source-code-archive',\r\n      files: this.files,\r\n      folders: this.folders,\r\n    };\r\n\r\n    return ZipService.generate(root);\r\n  }\r\n}\r\n\r\nexport function NewSourceFile(name = 'Untitled file') {\r\n  return {\r\n    key: uuid(),\r\n    content: '',\r\n    name,\r\n  };\r\n}\r\nexport default FolderStructure;\r\n"]},"metadata":{},"sourceType":"module"}