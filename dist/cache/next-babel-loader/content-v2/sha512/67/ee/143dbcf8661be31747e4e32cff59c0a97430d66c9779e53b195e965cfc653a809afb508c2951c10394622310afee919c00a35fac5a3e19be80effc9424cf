{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\LivePreviewDemo\\\\LivePreviewDemo.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from 'react';\nimport BasicEditorLazy from '../Editor/BasicEditor/BasicEditor.lazy';\nimport FolderStructure from '~/services/utils/FolderStructure';\nimport { uuid } from '~/services/Utils';\nimport IframeDemo from './IframeDemo';\nimport styles from './LivePreviewDemo.module.scss';\nexport default function LivePreviewDemo(_ref) {\n  _s();\n\n  var code = _ref.code,\n      language = _ref.language,\n      alt = _ref.alt,\n      demo = _ref.demo,\n      className = _ref.className;\n  var codeRef = useRef(null);\n\n  var _useState = useState(code),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var defaultFile = {\n    key: uuid(),\n    name: \"demo.\".concat(language),\n    content: code\n  };\n  /**\r\n  ➤ Calling setValue in onEditorChange, causes a re-render of the component which recreates\r\n  folderStructure everytime\r\n  ➤ folderStructure is sent to editor this way\r\n  ➤ something crashes in the editor\r\n  So to avoid this to happen, we use React.useMemo() to create folderStructure only once,\r\n  at the beginning and we'll have the same value of it.\r\n  */\n\n  var folderStructure = React.useMemo(function () {\n    return new FolderStructure({\n      folders: [],\n      files: [defaultFile]\n    });\n  }, []);\n\n  var onEditorChange = function onEditorChange(e) {\n    var content = e.files[0].content;\n    setValue(content);\n  };\n\n  return __jsx(\"div\", {\n    className: \"\".concat(styles['live-preview'], \" my-5\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(BasicEditorLazy, {\n    ref: codeRef,\n    folderStructure: folderStructure,\n    onChange: onEditorChange,\n    showFileSwitcher: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), __jsx(IframeDemo, {\n    sourceCode: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })), __jsx(\"figcaption\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, alt, demo && __jsx(React.Fragment, null, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), __jsx(\"a\", {\n    href: demo,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"Demo complet\"))));\n}\n\n_s(LivePreviewDemo, \"e2P9l/Kw7TtfcR8y4jkCAiZU+jI=\");\n\n_c = LivePreviewDemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"LivePreviewDemo\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/LivePreviewDemo/LivePreviewDemo.tsx"],"names":["React","useRef","useState","BasicEditorLazy","FolderStructure","uuid","IframeDemo","styles","LivePreviewDemo","code","language","alt","demo","className","codeRef","value","setValue","defaultFile","key","name","content","folderStructure","useMemo","folders","files","onEditorChange","e"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AAEA,OAAOC,eAAP,MAA4B,wCAA5B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AAQA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAOC,MAAP,MAAmB,+BAAnB;AAkBA,eAAe,SAASC,eAAT,OAEL;AAAA;;AAAA,MADRC,IACQ,QADRA,IACQ;AAAA,MADFC,QACE,QADFA,QACE;AAAA,MADQC,GACR,QADQA,GACR;AAAA,MADaC,IACb,QADaA,IACb;AAAA,MADmBC,SACnB,QADmBA,SACnB;AACR,MAAMC,OAAO,GAAGb,MAAM,CAAC,IAAD,CAAtB;;AADQ,kBAEkBC,QAAQ,CAACO,IAAD,CAF1B;AAAA,MAEDM,KAFC;AAAA,MAEMC,QAFN;;AAIR,MAAMC,WAAwB,GAAG;AAC/BC,IAAAA,GAAG,EAAEb,IAAI,EADsB;AAE/Bc,IAAAA,IAAI,iBAAUT,QAAV,CAF2B;AAG/BU,IAAAA,OAAO,EAAEX;AAHsB,GAAjC;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,MAAMY,eAAe,GAAGrB,KAAK,CAACsB,OAAN,CACtB;AAAA,WAAM,IAAIlB,eAAJ,CAAoB;AACxBmB,MAAAA,OAAO,EAAE,EADe;AAExBC,MAAAA,KAAK,EAAE,CAACP,WAAD;AAFiB,KAApB,CAAN;AAAA,GADsB,EAKtB,EALsB,CAAxB;;AAQA,MAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAO;AAAA,QACpBN,OADoB,GACRM,CAAC,CAACF,KAAF,CAAQ,CAAR,CADQ,CACpBJ,OADoB;AAG5BJ,IAAAA,QAAQ,CAACI,OAAD,CAAR;AACD,GAJD;;AAMA,SACE;AAAK,IAAA,SAAS,YAAKb,MAAM,CAAC,cAAD,CAAX,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEM,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD;AACE,IAAA,GAAG,EAAEC,OADP;AAEE,IAAA,eAAe,EAAEO,eAFnB;AAGE,IAAA,QAAQ,EAAEI,cAHZ;AAIE,IAAA,gBAAgB,EAAE,KAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,MAAC,UAAD;AAAY,IAAA,UAAU,EAAEV,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,GADH,EAEGC,IAAI,IACL,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAG,IAAA,IAAI,EAAEA,IAAT;AAAe,IAAA,MAAM,EAAC,QAAtB;AAA+B,IAAA,GAAG,EAAC,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CAHF,CAVF,CADF;AAsBD;;GAzDuBJ,e;;KAAAA,e","sourcesContent":["import React, { useRef, useState } from 'react';\r\n\r\nimport BasicEditorLazy from '../Editor/BasicEditor/BasicEditor.lazy';\r\nimport FolderStructure from '~/services/utils/FolderStructure';\r\nimport {\r\n  FileDictionary,\r\n  MediaUploadResp,\r\n  uploadFiles,\r\n  uploadMedia,\r\n} from '.';\r\n\r\nimport { uuid } from '~/services/Utils';\r\n\r\nimport IframeDemo from './IframeDemo';\r\n\r\nimport styles from './LivePreviewDemo.module.scss';\r\n\r\ninterface Props {\r\n  code: string;\r\n  language: Language;\r\n  alt: string;\r\n  demo: string;\r\n  className?: string;\r\n}\r\n\r\ninterface FilePreview {\r\n  key: string;\r\n  name: string;\r\n  content: string;\r\n}\r\n\r\ntype Language = 'html' | 'css' | 'json' | 'javascript';\r\n\r\nexport default function LivePreviewDemo({\r\n  code, language, alt, demo, className,\r\n}: Props) {\r\n  const codeRef = useRef(null);\r\n  const [value, setValue] = useState(code);\r\n\r\n  const defaultFile: FilePreview = {\r\n    key: uuid(),\r\n    name: `demo.${language}`,\r\n    content: code,\r\n  };\r\n\r\n  /**\r\n  ➤ Calling setValue in onEditorChange, causes a re-render of the component which recreates\r\n  folderStructure everytime\r\n  ➤ folderStructure is sent to editor this way\r\n  ➤ something crashes in the editor\r\n  So to avoid this to happen, we use React.useMemo() to create folderStructure only once,\r\n  at the beginning and we'll have the same value of it.\r\n */\r\n\r\n  const folderStructure = React.useMemo(\r\n    () => new FolderStructure({\r\n      folders: [],\r\n      files: [defaultFile],\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const onEditorChange = (e) => {\r\n    const { content } = e.files[0];\r\n\r\n    setValue(content);\r\n  };\r\n\r\n  return (\r\n    <div className={`${styles['live-preview']} my-5`}>\r\n      <div className={className}>\r\n        <BasicEditorLazy\r\n          ref={codeRef}\r\n          folderStructure={folderStructure}\r\n          onChange={onEditorChange}\r\n          showFileSwitcher={false}\r\n        />\r\n        <IframeDemo sourceCode={value} />\r\n      </div>\r\n      <figcaption>\r\n        {alt}\r\n        {demo && (\r\n        <>\r\n          <br />\r\n          <a href={demo} target=\"_blank\" rel=\"noreferrer\">Demo complet</a>\r\n        </>\r\n        )}\r\n      </figcaption>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}