{"ast":null,"code":"import _toConsumableArray from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable react/require-render-return */\n\n/* eslint-disable react/no-unused-state */\n\n/* eslint-disable react/sort-comp */\nimport React from 'react';\nimport noop from 'lodash/noop';\nimport * as Monaco from './monaco';\nimport ExerciseService from '~/services/Exercise.service';\nimport { extractExtension, filesToFolderStructure, fsEntriesToFolderStructure } from '~/services/utils/FileUtils';\nimport FolderStructure from '~/services/utils/FolderStructure';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport { MONACO } from '~/services/Constants';\n\nvar MonacoBase = /*#__PURE__*/function (_React$Component) {\n  _inherits(MonacoBase, _React$Component);\n\n  var _super = _createSuper(MonacoBase);\n\n  function MonacoBase(props) {\n    var _this;\n\n    _classCallCheck(this, MonacoBase);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"_baseModelChangeListener\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"editorRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"editor\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"timeoutId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"Feedbacks\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"decorate\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onFeedbackDone\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onModelChange\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"initEditor\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"formatCode\", function () {\n      return Monaco.formatCode(_this.editor);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createFirstFile\", function (_ref) {\n      var name = _ref.name;\n      var folderStructure = _this.state.folderStructure;\n      var newFileKey = folderStructure.addFile(null, {\n        name: name\n      });\n\n      _this.setState({\n        folderStructure: folderStructure,\n        selectedFileKey: newFileKey\n      }, function () {\n        _this.initEditor();\n\n        if (_this.editor) {\n          _this.toggleFit(true);\n\n          _this._baseModelChangeListener.dispose();\n\n          _this._baseModelChangeListener = _this.editor.onDidChangeModelContent(_this.onModelChange);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileAdd\", function (parentKey, file) {\n      var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n      var folderStructure = _this.state.folderStructure;\n      folderStructure.addFile(parentKey, file);\n\n      _this.setState({\n        folderStructure: folderStructure\n      }, function () {\n        cb();\n\n        _this.notifyStructureChange();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFolderAdd\", function (parentKey, folder) {\n      var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n      var folderStructure = _this.state.folderStructure;\n      folderStructure.addFolder(parentKey, folder);\n\n      _this.setState({\n        folderStructure: folderStructure\n      }, function () {\n        cb();\n\n        _this.notifyStructureChange();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileSelect\", function (key) {\n      _this.setState({\n        selectedFileKey: key\n      });\n\n      var folderStructure = _this.state.folderStructure;\n      var feedbacks = _this.props.feedbacks;\n\n      var _folderStructure$getF = folderStructure.getFile(key),\n          file = _folderStructure$getF.file;\n\n      _this._baseModelChangeListener.dispose();\n\n      _this.setValue(file.content);\n\n      _this.updateLanguageBasedOnFileName(file.name);\n\n      _this._baseModelChangeListener = _this.editor.onDidChangeModelContent(_this.onModelChange);\n\n      if (_this.Feedbacks && _this.decorate && feedbacks) {\n        _this.Feedbacks.undecorateAll();\n\n        _this.Feedbacks.getAll().filter(function (f) {\n          return f.file_key === file.key;\n        }).forEach(function (f) {\n          return _this.decorate(f.getDecorationData());\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileRename\", function (key, name) {\n      var folderStructure = _this.state.folderStructure;\n\n      try {\n        folderStructure.renameFile(key, name);\n\n        _this.setState({\n          folderStructure: folderStructure\n        }, function () {\n          _this.updateLanguageBasedOnFileName(name);\n\n          _this.notifyStructureChange();\n        });\n      } catch (err) {\n        SweetAlertService.toast({\n          type: 'error',\n          text: err\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFolderRename\", function (key, name) {\n      var folderStructure = _this.state.folderStructure;\n\n      try {\n        folderStructure.renameFolder(key, name);\n\n        _this.setState({\n          folderStructure: folderStructure\n        }, _this.notifyStructureChange);\n      } catch (err) {\n        SweetAlertService.toast({\n          type: 'error',\n          text: err\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileDelete\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key) {\n        var _this$state, folderStructure, selectedFileKey;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$state = _this.state, folderStructure = _this$state.folderStructure, selectedFileKey = _this$state.selectedFileKey;\n\n                if (!(_this.Feedbacks && _this.Feedbacks.getAll().find(function (f) {\n                  return f.file_key === key;\n                }))) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.prev = 2;\n                _context.next = 5;\n                return _this.confirmFileDelete(key);\n\n              case 5:\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](2);\n                return _context.abrupt(\"return\");\n\n              case 10:\n                try {\n                  folderStructure.deleteFile(key);\n\n                  _this.setState({\n                    folderStructure: folderStructure,\n                    selectedFileKey: key === selectedFileKey ? null : selectedFileKey\n                  }, _this.notifyStructureChange);\n                } catch (err) {\n                  SweetAlertService.toast({\n                    type: 'error',\n                    text: err\n                  });\n                }\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onFolderDelete\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key) {\n        var _this$state2, folderStructure, selectedFileKey, _folderStructure$getF2, folder, _folderStructure$getF3, _folder, selectedFileIsHere;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$state2 = _this.state, folderStructure = _this$state2.folderStructure, selectedFileKey = _this$state2.selectedFileKey;\n                _folderStructure$getF2 = folderStructure.getFolder(key), folder = _folderStructure$getF2.folder;\n\n                if (!_this.Feedbacks.getAll().find(function (f) {\n                  return !!folderStructure.getFile(f.file_key, folder).file;\n                })) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.prev = 3;\n                _context2.next = 6;\n                return _this.confirmFolderDelete(key);\n\n              case 6:\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](3);\n                return _context2.abrupt(\"return\");\n\n              case 11:\n                try {\n                  _folderStructure$getF3 = folderStructure.getFolder(key), _folder = _folderStructure$getF3.folder;\n                  selectedFileIsHere = false;\n\n                  if (folderStructure.getFile(selectedFileKey, _folder).file) {\n                    selectedFileIsHere = true;\n                  }\n\n                  folderStructure.deleteFolder(key);\n\n                  _this.setState({\n                    folderStructure: folderStructure,\n                    selectedFileKey: selectedFileIsHere ? null : selectedFileKey\n                  }, _this.notifyStructureChange);\n                } catch (err) {\n                  SweetAlertService.toast({\n                    type: 'error',\n                    text: err\n                  });\n                }\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[3, 8]]);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onDownload\", function () {\n      var folderStructure = _this.state.folderStructure;\n      return folderStructure.downloadAsZip();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFolderStructure\", function () {\n      var folderStructure = _this.state.folderStructure;\n\n      if (folderStructure.folders.length || folderStructure.files.length) {\n        return folderStructure.toJSON();\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function (fileSwitcherWidth) {\n      _this.setState({\n        fileSwitcherWidth: fileSwitcherWidth\n      }, function () {\n        if (_this.editor) {\n          _this.editor.layout();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"notifyStructureChange\", function () {\n      var onStructureChange = _this.props.onStructureChange;\n\n      if (typeof onStructureChange === 'function') {\n        onStructureChange(_this.getFolderStructure());\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"uploadStructure\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var withInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      _this.setState({\n        isDropable: false\n      });\n\n      var computeFolderStructure = null;\n\n      if (nativeEvent.target.webkitEntries && nativeEvent.target.webkitEntries.length) {\n        computeFolderStructure = fsEntriesToFolderStructure(nativeEvent.target.webkitEntries);\n      } else {\n        computeFolderStructure = filesToFolderStructure(nativeEvent.target.files);\n      }\n\n      computeFolderStructure.then(function (folderStructure) {\n        _this.setState({\n          folderStructure: folderStructure,\n          selectedFileKey: null\n        }, function () {\n          if (!withInit) {\n            return;\n          }\n\n          _this.initEditor();\n\n          if (_this.editor) {\n            _this.toggleFit(true);\n\n            _this._baseModelChangeListener.dispose();\n\n            _this._baseModelChangeListener = _this.editor.onDidChangeModelContent(_this.onModelChange);\n          }\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleFit\", function () {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n      console.log('TOGGLE FIT'); // const { fixedHeight: fixedHeightState } = this.state;\n      // const editorElHeight = this.editorRef.current.getBoundingClientRect().height;\n      // let fixedHeight: any = false;\n      // if (!fixedHeightState || force === true) {\n      //   // eslint-disable-next-line max-len\n      //   fixedHeight = this.editor.getModel().getLineCount() * this.editor.getConfiguration().lineHeight;\n      // }\n      // this.setState({ fixedHeight: Math.max(editorElHeight, fixedHeight) }, () => {\n      //   this.editor.layout();\n      // });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragEnter\", function (e) {\n      var readOnly = _this.props.readOnly;\n\n      if (readOnly) {\n        return;\n      }\n\n      e.preventDefault();\n\n      _this.setState({\n        isDropable: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragLeave\", function (e) {\n      var readOnly = _this.props.readOnly;\n\n      if (readOnly) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (e.target.tagName === 'INPUT' && e.target.type === 'file') {\n        _this.setState({\n          isDropable: false\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onReplace\", function (e) {\n      e.persist();\n      var swalOptions = {\n        title: 'Hold on!',\n        confirmButtonText: 'Continue'\n      };\n\n      if (_this.Feedbacks && _this.Feedbacks.getAll().length) {\n        swalOptions.text = 'Vei suprascrie toate foldrele și fișierele, iar feedback-urile vor fi marcate ca și rezolvate.';\n\n        swalOptions.preConfirm = function () {\n          var allFeedbacks = _this.Feedbacks.getAll();\n\n          SweetAlertService.toggleLoading();\n          return Promise.all(allFeedbacks.map(function (f) {\n            return ExerciseService.markFeedbackAsDone(f.id);\n          })).then(function (resp) {\n            resp.forEach(function (_, index) {\n              return _this.onFeedbackDone(allFeedbacks[index].id);\n            });\n          });\n        };\n      } else {\n        swalOptions.text = 'Vei suprascrie toate folderele și fișierele existente';\n      }\n\n      SweetAlertService.confirm(swalOptions).then(function (result) {\n        if (result.isConfirmed) {\n          _this.uploadStructure(e, false);\n\n          e.target.value = null;\n        } else {\n          _this.setState({\n            isDropable: false\n          });\n\n          e.target.value = null;\n        }\n      });\n    });\n\n    _this._baseModelChangeListener = {\n      dispose: noop\n    };\n    _this.editorRef = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(MonacoBase, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var folderStructure = this.state.folderStructure;\n      var onLoad = this.props.onLoad;\n      var firstFile = folderStructure.files[0];\n      this.setState({\n        selectedFileKey: firstFile ? firstFile.key : firstFile\n      }, function () {\n        _this2.initEditor();\n\n        if (typeof onLoad === 'function') {\n          setTimeout(function () {\n            return onLoad();\n          }, 0);\n        }\n\n        if (_this2.editor) {\n          _this2.toggleFit(true);\n\n          _this2._baseModelChangeListener.dispose();\n\n          _this2._baseModelChangeListener = _this2.editor.onDidChangeModelContent(_this2.onModelChange);\n        }\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          folderStructureProp = _this$props.folderStructure,\n          readOnly = _this$props.readOnly;\n\n      if (JSON.stringify(prevProps.folderStructure) !== JSON.stringify(folderStructureProp)) {\n        var _folderStructure = new FolderStructure(folderStructureProp);\n\n        var firstFile = _folderStructure.files[0]; // eslint-disable-next-line react/no-did-update-set-state\n\n        this.setState({\n          folderStructure: _folderStructure,\n          selectedFileKey: null\n        }, function () {\n          if (firstFile) {\n            _this3.onFileSelect(firstFile.key);\n          }\n        });\n      }\n\n      if (readOnly !== prevProps.readOnly) {\n        this.editor.updateOptions({\n          readOnly: readOnly\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.timeoutId);\n\n      this._baseModelChangeListener.dispose();\n    }\n  }, {\n    key: \"onFolderSelect\",\n    value: function onFolderSelect(key) {\n      this.setState({\n        selectedFolderKey: key\n      });\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.editor.getModel().getValue();\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.editor.getValue();\n      this.editor.getModel().setValue(code);\n    } // eslint-disable-next-line consistent-return\n\n  }, {\n    key: \"getScroll\",\n    value: function getScroll(type) {\n      if (type === 'TOP') {\n        return this.editor.getScrollTop();\n      }\n\n      if (type === 'LEFT') {\n        return this.editor.getScrollLeft();\n      }\n    }\n  }, {\n    key: \"setScrollPosition\",\n    value: function setScrollPosition(scroll) {\n      this.editor.setScrollPosition(scroll);\n    }\n  }, {\n    key: \"updateLanguageBasedOnFileName\",\n    value: function updateLanguageBasedOnFileName(name) {\n      var extension = extractExtension(name);\n      var language = extension === 'js' ? 'javascript' : extension;\n      Monaco.setModelLanguage(this.editor.getModel(), language);\n    }\n  }, {\n    key: \"confirmFileDelete\",\n    value: function confirmFileDelete(key) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        SweetAlertService.confirm({\n          title: 'Hold on!',\n          text: \"You're about to delete a file which contains feedback. Doing this will mark them as done.\",\n          confirmButtonText: 'Continue',\n          preConfirm: function preConfirm() {\n            var feedbacksInFile = _this4.Feedbacks.getAll().filter(function (f) {\n              return f.file_key === key;\n            });\n\n            SweetAlertService.toggleLoading();\n            return Promise.all(feedbacksInFile.map(function (f) {\n              return ExerciseService.markFeedbackAsDone(f.id);\n            })).then(function (resp) {\n              resp.forEach(function (_, index) {\n                return _this4.onFeedbackDone(feedbacksInFile[index].id);\n              });\n            });\n          }\n        }).then(function (result) {\n          if (result.isConfirmed) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"confirmFolderDelete\",\n    value: function confirmFolderDelete(key) {\n      var _this5 = this;\n\n      var folderStructure = this.state.folderStructure;\n\n      var _folderStructure$getF4 = folderStructure.getFolder(key),\n          folder = _folderStructure$getF4.folder;\n\n      return new Promise(function (resolve, reject) {\n        SweetAlertService.confirm({\n          title: 'Hold on!',\n          text: \"You're about to delete a folder which contains files with feedback. Doing this will mark them as done.\",\n          confirmButtonText: 'Continue',\n          preConfirm: function preConfirm() {\n            var feedbacksInFolder = _this5.Feedbacks.getAll().filter(function (f) {\n              return folderStructure.getFile(f.file_key, folder).file;\n            });\n\n            SweetAlertService.toggleLoading();\n            return Promise.all(feedbacksInFolder.map(function (f) {\n              return ExerciseService.markFeedbackAsDone(f.id);\n            })).then(function (resp) {\n              resp.forEach(function (_, index) {\n                return _this5.onFeedbackDone(feedbacksInFolder[index].id);\n              });\n            });\n          }\n        }).then(function (result) {\n          if (result.isConfirmed) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"onAllChanges\",\n    value: function onAllChanges(cb) {\n      var cursorListener = this.editor.onDidChangeCursorPosition(function (e) {\n        return cb({\n          type: MONACO.EVENTS.CURSOR,\n          payload: e.position\n        });\n      });\n      var selectionListener = this.editor.onDidChangeCursorSelection(function (e) {\n        return cb({\n          type: MONACO.EVENTS.SELECTION,\n          payload: [e.selection].concat(_toConsumableArray(e.secondarySelections))\n        });\n      });\n      var modelListener = this.editor.onDidChangeModelContent(function (e) {\n        return cb({\n          type: MONACO.EVENTS.MODEL,\n          payload: e.changes\n        });\n      });\n      var scrollListener = this.editor.onDidScrollChange(function (e) {\n        return cb({\n          type: MONACO.EVENTS.SCROLL,\n          payload: {\n            scrollLeft: e.scrollLeft,\n            scrollTop: e.scrollTop\n          }\n        });\n      });\n      return function offAllChanges() {\n        cursorListener.dispose();\n        selectionListener.dispose();\n        modelListener.dispose();\n        scrollListener.dispose();\n      };\n    }\n  }, {\n    key: \"applyEvent\",\n    value: function applyEvent(_ref5) {\n      var type = _ref5.type,\n          payload = _ref5.payload;\n\n      try {\n        switch (type) {\n          case MONACO.EVENTS.CURSOR:\n            this.editor.setPosition(payload);\n            this.editor.focus();\n            break;\n\n          case MONACO.EVENTS.SELECTION:\n            this.editor.setSelections(payload);\n            break;\n\n          case MONACO.EVENTS.MODEL:\n            this.editor.executeEdits('user', payload);\n            break;\n\n          case MONACO.EVENTS.SCROLL:\n            this.editor.setScrollPosition(payload);\n            break;\n\n          default:\n            break;\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }, {\n    key: \"render\",\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    value: function render() {\n      this.editor.getModel().render();\n      this.editor.render();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.editor.focus();\n    }\n  }]);\n\n  return MonacoBase;\n}(React.Component);\n\nexport default MonacoBase;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/Monaco.base.tsx"],"names":["React","noop","Monaco","ExerciseService","extractExtension","filesToFolderStructure","fsEntriesToFolderStructure","FolderStructure","SweetAlertService","MONACO","MonacoBase","props","formatCode","editor","name","folderStructure","state","newFileKey","addFile","setState","selectedFileKey","initEditor","toggleFit","_baseModelChangeListener","dispose","onDidChangeModelContent","onModelChange","parentKey","file","cb","notifyStructureChange","folder","addFolder","key","feedbacks","getFile","setValue","content","updateLanguageBasedOnFileName","Feedbacks","decorate","undecorateAll","getAll","filter","f","file_key","forEach","getDecorationData","renameFile","err","toast","type","text","renameFolder","find","confirmFileDelete","deleteFile","getFolder","confirmFolderDelete","selectedFileIsHere","deleteFolder","downloadAsZip","folders","length","files","toJSON","fileSwitcherWidth","layout","onStructureChange","getFolderStructure","nativeEvent","withInit","isDropable","computeFolderStructure","target","webkitEntries","then","force","undefined","console","log","e","readOnly","preventDefault","tagName","persist","swalOptions","title","confirmButtonText","preConfirm","allFeedbacks","toggleLoading","Promise","all","map","markFeedbackAsDone","id","resp","_","index","onFeedbackDone","confirm","result","isConfirmed","uploadStructure","value","editorRef","createRef","onLoad","firstFile","setTimeout","prevProps","folderStructureProp","JSON","stringify","onFileSelect","updateOptions","clearTimeout","timeoutId","selectedFolderKey","getModel","getValue","code","getScrollTop","getScrollLeft","scroll","setScrollPosition","extension","language","setModelLanguage","resolve","reject","feedbacksInFile","feedbacksInFolder","cursorListener","onDidChangeCursorPosition","EVENTS","CURSOR","payload","position","selectionListener","onDidChangeCursorSelection","SELECTION","selection","secondarySelections","modelListener","MODEL","changes","scrollListener","onDidScrollChange","SCROLL","scrollLeft","scrollTop","offAllChanges","setPosition","focus","setSelections","executeEdits","error","render","Component"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,SAASC,gBAAT,EAA2BC,sBAA3B,EAAmDC,0BAAnD,QAAqF,4BAArF;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;AACA,SAASC,MAAT,QAAuB,sBAAvB;;IAQMC,U;;;;;AAmBJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,iEA4FN,YAAM;AACjB,aAAOT,MAAM,CAACU,UAAP,CAAkB,MAAKC,MAAvB,CAAP;AACD,KA9FkB;;AAAA,sEAuGD,gBAA8B;AAAA,UAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,UACtCC,eADsC,GAClB,MAAKC,KADa,CACtCD,eADsC;AAG9C,UAAIE,UAAU,GAAGF,eAAe,CAACG,OAAhB,CAAwB,IAAxB,EAA8B;AAAEJ,QAAAA,IAAI,EAAJA;AAAF,OAA9B,CAAjB;;AACA,YAAKK,QAAL,CACE;AACEJ,QAAAA,eAAe,EAAfA,eADF;AAEEK,QAAAA,eAAe,EAAEH;AAFnB,OADF,EAKE,YAAM;AACJ,cAAKI,UAAL;;AACA,YAAI,MAAKR,MAAT,EAAiB;AACf,gBAAKS,SAAL,CAAe,IAAf;;AAEA,gBAAKC,wBAAL,CAA8BC,OAA9B;;AACA,gBAAKD,wBAAL,GAAgC,MAAKV,MAAL,CAAYY,uBAAZ,CAAoC,MAAKC,aAAzC,CAAhC;AACD;AACF,OAbH;AAeD,KA1HkB;;AAAA,gEA4HP,UAACC,SAAD,EAAYC,IAAZ,EAAgC;AAAA,UAAdC,EAAc,uEAAT5B,IAAS;AAAA,UAClCc,eADkC,GACd,MAAKC,KADS,CAClCD,eADkC;AAG1CA,MAAAA,eAAe,CAACG,OAAhB,CAAwBS,SAAxB,EAAmCC,IAAnC;;AACA,YAAKT,QAAL,CAAc;AAAEJ,QAAAA,eAAe,EAAfA;AAAF,OAAd,EAAmC,YAAM;AACvCc,QAAAA,EAAE;;AACF,cAAKC,qBAAL;AACD,OAHD;AAID,KApIkB;;AAAA,kEAsIL,UAACH,SAAD,EAAYI,MAAZ,EAAkC;AAAA,UAAdF,EAAc,uEAAT5B,IAAS;AAAA,UACtCc,eADsC,GAClB,MAAKC,KADa,CACtCD,eADsC;AAG9CA,MAAAA,eAAe,CAACiB,SAAhB,CAA0BL,SAA1B,EAAqCI,MAArC;;AACA,YAAKZ,QAAL,CAAc;AAAEJ,QAAAA,eAAe,EAAfA;AAAF,OAAd,EAAmC,YAAM;AACvCc,QAAAA,EAAE;;AACF,cAAKC,qBAAL;AACD,OAHD;AAID,KA9IkB;;AAAA,mEAgJJ,UAACG,GAAD,EAAS;AACtB,YAAKd,QAAL,CAAc;AAAEC,QAAAA,eAAe,EAAEa;AAAnB,OAAd;;AADsB,UAGdlB,eAHc,GAGM,MAAKC,KAHX,CAGdD,eAHc;AAAA,UAIdmB,SAJc,GAIA,MAAKvB,KAJL,CAIduB,SAJc;;AAAA,kCAMPnB,eAAe,CAACoB,OAAhB,CAAwBF,GAAxB,CANO;AAAA,UAMhBL,IANgB,yBAMhBA,IANgB;;AAQtB,YAAKL,wBAAL,CAA8BC,OAA9B;;AAEA,YAAKY,QAAL,CAAcR,IAAI,CAACS,OAAnB;;AACA,YAAKC,6BAAL,CAAmCV,IAAI,CAACd,IAAxC;;AAEA,YAAKS,wBAAL,GAAgC,MAAKV,MAAL,CAAYY,uBAAZ,CAAoC,MAAKC,aAAzC,CAAhC;;AAEA,UAAI,MAAKa,SAAL,IAAkB,MAAKC,QAAvB,IAAmCN,SAAvC,EAAkD;AAChD,cAAKK,SAAL,CAAeE,aAAf;;AAEA,cAAKF,SAAL,CAAeG,MAAf,GACGC,MADH,CACU,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACC,QAAF,KAAejB,IAAI,CAACK,GAA3B;AAAA,SADV,EAEGa,OAFH,CAEW,UAACF,CAAD;AAAA,iBAAO,MAAKJ,QAAL,CAAcI,CAAC,CAACG,iBAAF,EAAd,CAAP;AAAA,SAFX;AAGD;AACF,KAtKkB;;AAAA,mEAwKJ,UAACd,GAAD,EAAMnB,IAAN,EAAe;AAAA,UACpBC,eADoB,GACA,MAAKC,KADL,CACpBD,eADoB;;AAG5B,UAAI;AACFA,QAAAA,eAAe,CAACiC,UAAhB,CAA2Bf,GAA3B,EAAgCnB,IAAhC;;AACA,cAAKK,QAAL,CAAc;AAAEJ,UAAAA,eAAe,EAAfA;AAAF,SAAd,EAAmC,YAAM;AACvC,gBAAKuB,6BAAL,CAAmCxB,IAAnC;;AACA,gBAAKgB,qBAAL;AACD,SAHD;AAID,OAND,CAME,OAAOmB,GAAP,EAAY;AACZzC,QAAAA,iBAAiB,CAAC0C,KAAlB,CAAwB;AAAEC,UAAAA,IAAI,EAAE,OAAR;AAAiBC,UAAAA,IAAI,EAAEH;AAAvB,SAAxB;AACD;AACF,KApLkB;;AAAA,qEAsLF,UAAChB,GAAD,EAAMnB,IAAN,EAAe;AAAA,UACtBC,eADsB,GACF,MAAKC,KADH,CACtBD,eADsB;;AAG9B,UAAI;AACFA,QAAAA,eAAe,CAACsC,YAAhB,CAA6BpB,GAA7B,EAAkCnB,IAAlC;;AACA,cAAKK,QAAL,CAAc;AAAEJ,UAAAA,eAAe,EAAfA;AAAF,SAAd,EAAmC,MAAKe,qBAAxC;AACD,OAHD,CAGE,OAAOmB,GAAP,EAAY;AACZzC,QAAAA,iBAAiB,CAAC0C,KAAlB,CAAwB;AAAEC,UAAAA,IAAI,EAAE,OAAR;AAAiBC,UAAAA,IAAI,EAAEH;AAAvB,SAAxB;AACD;AACF,KA/LkB;;AAAA;AAAA,2EAiMJ,iBAAOhB,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BACgC,MAAKjB,KADrC,EACLD,eADK,eACLA,eADK,EACYK,eADZ,eACYA,eADZ;;AAAA,sBAGT,MAAKmB,SAAL,IAAkB,MAAKA,SAAL,CAAeG,MAAf,GAAwBY,IAAxB,CAA6B,UAACV,CAAD;AAAA,yBAAOA,CAAC,CAACC,QAAF,KAAeZ,GAAtB;AAAA,iBAA7B,CAHT;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAKH,MAAKsB,iBAAL,CAAuBtB,GAAvB,CALG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAWb,oBAAI;AACFlB,kBAAAA,eAAe,CAACyC,UAAhB,CAA2BvB,GAA3B;;AACA,wBAAKd,QAAL,CACE;AACEJ,oBAAAA,eAAe,EAAfA,eADF;AAEEK,oBAAAA,eAAe,EAAEa,GAAG,KAAKb,eAAR,GAA0B,IAA1B,GAAiCA;AAFpD,mBADF,EAKE,MAAKU,qBALP;AAOD,iBATD,CASE,OAAOmB,GAAP,EAAY;AACZzC,kBAAAA,iBAAiB,CAAC0C,KAAlB,CAAwB;AAAEC,oBAAAA,IAAI,EAAE,OAAR;AAAiBC,oBAAAA,IAAI,EAAEH;AAAvB,mBAAxB;AACD;;AAtBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAjMI;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,2EAkPF,kBAAOhB,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAC8B,MAAKjB,KADnC,EACPD,eADO,gBACPA,eADO,EACUK,eADV,gBACUA,eADV;AAAA,yCAEIL,eAAe,CAAC0C,SAAhB,CAA0BxB,GAA1B,CAFJ,EAEPF,MAFO,0BAEPA,MAFO;;AAAA,qBAIX,MAAKQ,SAAL,CAAeG,MAAf,GAAwBY,IAAxB,CAA6B,UAACV,CAAD;AAAA,yBAAO,CAAC,CAAC7B,eAAe,CAACoB,OAAhB,CAAwBS,CAAC,CAACC,QAA1B,EAAoCd,MAApC,EAA4CH,IAArD;AAAA,iBAA7B,CAJW;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAML,MAAK8B,mBAAL,CAAyBzB,GAAzB,CANK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAYf,oBAAI;AAAA,2CACiBlB,eAAe,CAAC0C,SAAhB,CAA0BxB,GAA1B,CADjB,EACMF,OADN,0BACMA,MADN;AAEE4B,kBAAAA,kBAFF,GAEuB,KAFvB;;AAIF,sBAAI5C,eAAe,CAACoB,OAAhB,CAAwBf,eAAxB,EAAyCW,OAAzC,EAAiDH,IAArD,EAA2D;AACzD+B,oBAAAA,kBAAkB,GAAG,IAArB;AACD;;AAED5C,kBAAAA,eAAe,CAAC6C,YAAhB,CAA6B3B,GAA7B;;AACA,wBAAKd,QAAL,CACE;AACEJ,oBAAAA,eAAe,EAAfA,eADF;AAEEK,oBAAAA,eAAe,EAAEuC,kBAAkB,GAAG,IAAH,GAAUvC;AAF/C,mBADF,EAKE,MAAKU,qBALP;AAOD,iBAhBD,CAgBE,OAAOmB,GAAP,EAAY;AACZzC,kBAAAA,iBAAiB,CAAC0C,KAAlB,CAAwB;AAAEC,oBAAAA,IAAI,EAAE,OAAR;AAAiBC,oBAAAA,IAAI,EAAEH;AAAvB,mBAAxB;AACD;;AA9Bc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAlPE;;AAAA;AAAA;AAAA;AAAA;;AAAA,iEAiTN,YAAM;AAAA,UACTlC,eADS,GACW,MAAKC,KADhB,CACTD,eADS;AAEjB,aAAOA,eAAe,CAAC8C,aAAhB,EAAP;AACD,KApTkB;;AAAA,yEAsTE,YAAM;AAAA,UACjB9C,eADiB,GACG,MAAKC,KADR,CACjBD,eADiB;;AAEzB,UAAIA,eAAe,CAAC+C,OAAhB,CAAwBC,MAAxB,IAAkChD,eAAe,CAACiD,KAAhB,CAAsBD,MAA5D,EAAoE;AAClE,eAAOhD,eAAe,CAACkD,MAAhB,EAAP;AACD;;AACD,aAAO,IAAP;AACD,KA5TkB;;AAAA,+DA8TR,UAACC,iBAAD,EAAuB;AAChC,YAAK/C,QAAL,CAAc;AAAE+C,QAAAA,iBAAiB,EAAjBA;AAAF,OAAd,EAAqC,YAAM;AACzC,YAAI,MAAKrD,MAAT,EAAiB;AACf,gBAAKA,MAAL,CAAYsD,MAAZ;AACD;AACF,OAJD;AAKD,KApUkB;;AAAA,4EA2XK,YAAM;AAAA,UACpBC,iBADoB,GACE,MAAKzD,KADP,CACpByD,iBADoB;;AAG5B,UAAI,OAAOA,iBAAP,KAA6B,UAAjC,EAA6C;AAC3CA,QAAAA,iBAAiB,CAAC,MAAKC,kBAAL,EAAD,CAAjB;AACD;AACF,KAjYkB;;AAAA,sEA8YD,iBAAsC;AAAA,UAAnCC,WAAmC,SAAnCA,WAAmC;AAAA,UAApBC,QAAoB,uEAAT,IAAS;;AACtD,YAAKpD,QAAL,CAAc;AACZqD,QAAAA,UAAU,EAAE;AADA,OAAd;;AAIA,UAAIC,sBAAsB,GAAG,IAA7B;;AAEA,UAAIH,WAAW,CAACI,MAAZ,CAAmBC,aAAnB,IAAoCL,WAAW,CAACI,MAAZ,CAAmBC,aAAnB,CAAiCZ,MAAzE,EAAiF;AAC/EU,QAAAA,sBAAsB,GAAGnE,0BAA0B,CAACgE,WAAW,CAACI,MAAZ,CAAmBC,aAApB,CAAnD;AACD,OAFD,MAEO;AACLF,QAAAA,sBAAsB,GAAGpE,sBAAsB,CAACiE,WAAW,CAACI,MAAZ,CAAmBV,KAApB,CAA/C;AACD;;AAEDS,MAAAA,sBAAsB,CAACG,IAAvB,CAA4B,UAAC7D,eAAD,EAAqB;AAC/C,cAAKI,QAAL,CACE;AACEJ,UAAAA,eAAe,EAAfA,eADF;AAEEK,UAAAA,eAAe,EAAE;AAFnB,SADF,EAKE,YAAM;AACJ,cAAI,CAACmD,QAAL,EAAe;AACb;AACD;;AAED,gBAAKlD,UAAL;;AACA,cAAI,MAAKR,MAAT,EAAiB;AACf,kBAAKS,SAAL,CAAe,IAAf;;AAEA,kBAAKC,wBAAL,CAA8BC,OAA9B;;AACA,kBAAKD,wBAAL,GAAgC,MAAKV,MAAL,CAAYY,uBAAZ,CAAoC,MAAKC,aAAzC,CAAhC;AACD;AACF,SAjBH;AAmBD,OApBD;AAqBD,KAhbkB;;AAAA,gEAkbP,YAAuB;AAAA,UAAtBmD,KAAsB,uEAAdC,SAAc;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADiC,CAEjC;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD,KAhckB;;AAAA,kEAmcL,UAACC,CAAD,EAAO;AAAA,UACXC,QADW,GACE,MAAKvE,KADP,CACXuE,QADW;;AAGnB,UAAIA,QAAJ,EAAc;AACZ;AACD;;AAEDD,MAAAA,CAAC,CAACE,cAAF;;AACA,YAAKhE,QAAL,CAAc;AACZqD,QAAAA,UAAU,EAAE;AADA,OAAd;AAGD,KA9ckB;;AAAA,kEAgdL,UAACS,CAAD,EAAO;AAAA,UACXC,QADW,GACE,MAAKvE,KADP,CACXuE,QADW;;AAGnB,UAAIA,QAAJ,EAAc;AACZ;AACD;;AAEDD,MAAAA,CAAC,CAACE,cAAF;;AACA,UAAIF,CAAC,CAACP,MAAF,CAASU,OAAT,KAAqB,OAArB,IAAgCH,CAAC,CAACP,MAAF,CAASvB,IAAT,KAAkB,MAAtD,EAA8D;AAC5D,cAAKhC,QAAL,CAAc;AACZqD,UAAAA,UAAU,EAAE;AADA,SAAd;AAGD;AACF,KA7dkB;;AAAA,gEA+dP,UAACS,CAAD,EAAO;AACjBA,MAAAA,CAAC,CAACI,OAAF;AAEA,UAAIC,WAAgB,GAAG;AACrBC,QAAAA,KAAK,EAAE,UADc;AAErBC,QAAAA,iBAAiB,EAAE;AAFE,OAAvB;;AAKA,UAAI,MAAKjD,SAAL,IAAkB,MAAKA,SAAL,CAAeG,MAAf,GAAwBqB,MAA9C,EAAsD;AACpDuB,QAAAA,WAAW,CAAClC,IAAZ,GAAmB,gGAAnB;;AACAkC,QAAAA,WAAW,CAACG,UAAZ,GAAyB,YAAM;AAC7B,cAAMC,YAAY,GAAG,MAAKnD,SAAL,CAAeG,MAAf,EAArB;;AAEAlC,UAAAA,iBAAiB,CAACmF,aAAlB;AAEA,iBAAOC,OAAO,CACXC,GADI,CACAH,YAAY,CAACI,GAAb,CAAiB,UAAClD,CAAD;AAAA,mBAAOzC,eAAe,CAAC4F,kBAAhB,CAAmCnD,CAAC,CAACoD,EAArC,CAAP;AAAA,WAAjB,CADA,EAEJpB,IAFI,CAEC,UAACqB,IAAD,EAAU;AACdA,YAAAA,IAAI,CAACnD,OAAL,CAAa,UAACoD,CAAD,EAAIC,KAAJ;AAAA,qBAAc,MAAKC,cAAL,CAAoBV,YAAY,CAACS,KAAD,CAAZ,CAAoBH,EAAxC,CAAd;AAAA,aAAb;AACD,WAJI,CAAP;AAKD,SAVD;AAWD,OAbD,MAaO;AACLV,QAAAA,WAAW,CAAClC,IAAZ,GAAmB,uDAAnB;AACD;;AAED5C,MAAAA,iBAAiB,CAAC6F,OAAlB,CAA0Bf,WAA1B,EAAuCV,IAAvC,CAA4C,UAAC0B,MAAD,EAAY;AACtD,YAAIA,MAAM,CAACC,WAAX,EAAwB;AACtB,gBAAKC,eAAL,CAAqBvB,CAArB,EAAwB,KAAxB;;AACAA,UAAAA,CAAC,CAACP,MAAF,CAAS+B,KAAT,GAAiB,IAAjB;AACD,SAHD,MAGO;AACL,gBAAKtF,QAAL,CAAc;AACZqD,YAAAA,UAAU,EAAE;AADA,WAAd;;AAGAS,UAAAA,CAAC,CAACP,MAAF,CAAS+B,KAAT,GAAiB,IAAjB;AACD;AACF,OAVD;AAWD,KAngBkB;;AAGjB,UAAKlF,wBAAL,GAAgC;AAAEC,MAAAA,OAAO,EAAEvB;AAAX,KAAhC;AACA,UAAKyG,SAAL,gBAAiB1G,KAAK,CAAC2G,SAAN,EAAjB;AAJiB;AAKlB;;;;wCAEmB;AAAA;;AAAA,UACV5F,eADU,GACU,KAAKC,KADf,CACVD,eADU;AAAA,UAEV6F,MAFU,GAEC,KAAKjG,KAFN,CAEViG,MAFU;AAIlB,UAAMC,SAAS,GAAG9F,eAAe,CAACiD,KAAhB,CAAsB,CAAtB,CAAlB;AAEA,WAAK7C,QAAL,CACE;AACEC,QAAAA,eAAe,EAAEyF,SAAS,GAAGA,SAAS,CAAC5E,GAAb,GAAmB4E;AAD/C,OADF,EAIE,YAAM;AACJ,QAAA,MAAI,CAACxF,UAAL;;AAEA,YAAI,OAAOuF,MAAP,KAAkB,UAAtB,EAAkC;AAChCE,UAAAA,UAAU,CAAC;AAAA,mBAAMF,MAAM,EAAZ;AAAA,WAAD,EAAiB,CAAjB,CAAV;AACD;;AAED,YAAI,MAAI,CAAC/F,MAAT,EAAiB;AACf,UAAA,MAAI,CAACS,SAAL,CAAe,IAAf;;AAEA,UAAA,MAAI,CAACC,wBAAL,CAA8BC,OAA9B;;AACA,UAAA,MAAI,CAACD,wBAAL,GAAgC,MAAI,CAACV,MAAL,CAAYY,uBAAZ,CAAoC,MAAI,CAACC,aAAzC,CAAhC;AACD;AACF,OAjBH;AAmBD;;;uCAEkBqF,S,EAAW;AAAA;;AAAA,wBAC+B,KAAKpG,KADpC;AAAA,UACHqG,mBADG,eACpBjG,eADoB;AAAA,UACkBmE,QADlB,eACkBA,QADlB;;AAG5B,UAAI+B,IAAI,CAACC,SAAL,CAAeH,SAAS,CAAChG,eAAzB,MAA8CkG,IAAI,CAACC,SAAL,CAAeF,mBAAf,CAAlD,EAAuF;AACrF,YAAMjG,gBAAe,GAAG,IAAIR,eAAJ,CAAoByG,mBAApB,CAAxB;;AACA,YAAMH,SAAS,GAAG9F,gBAAe,CAACiD,KAAhB,CAAsB,CAAtB,CAAlB,CAFqF,CAIrF;;AACA,aAAK7C,QAAL,CACE;AACEJ,UAAAA,eAAe,EAAfA,gBADF;AAEEK,UAAAA,eAAe,EAAE;AAFnB,SADF,EAKE,YAAM;AACJ,cAAIyF,SAAJ,EAAe;AACb,YAAA,MAAI,CAACM,YAAL,CAAkBN,SAAS,CAAC5E,GAA5B;AACD;AACF,SATH;AAWD;;AAED,UAAIiD,QAAQ,KAAK6B,SAAS,CAAC7B,QAA3B,EAAqC;AACnC,aAAKrE,MAAL,CAAYuG,aAAZ,CAA0B;AAAElC,UAAAA,QAAQ,EAARA;AAAF,SAA1B;AACD;AACF;;;2CAEsB;AACrBmC,MAAAA,YAAY,CAAC,KAAKC,SAAN,CAAZ;;AACA,WAAK/F,wBAAL,CAA8BC,OAA9B;AACD;;;mCAEcS,G,EAAK;AAClB,WAAKd,QAAL,CAAc;AACZoG,QAAAA,iBAAiB,EAAEtF;AADP,OAAd;AAGD;;;+BAEU;AACT,aAAO,KAAKpB,MAAL,CAAY2G,QAAZ,GAAuBC,QAAvB,EAAP;AACD;;;+BAEuC;AAAA,UAA/BC,IAA+B,uEAAxB,KAAK7G,MAAL,CAAY4G,QAAZ,EAAwB;AACtC,WAAK5G,MAAL,CAAY2G,QAAZ,GAAuBpF,QAAvB,CAAgCsF,IAAhC;AACD,K,CAED;;;;8BACUvE,I,EAAM;AACd,UAAIA,IAAI,KAAK,KAAb,EAAoB;AAClB,eAAO,KAAKtC,MAAL,CAAY8G,YAAZ,EAAP;AACD;;AAAC,UAAIxE,IAAI,KAAK,MAAb,EAAqB;AACrB,eAAO,KAAKtC,MAAL,CAAY+G,aAAZ,EAAP;AACD;AACF;;;sCAEiBC,M,EAAQ;AACxB,WAAKhH,MAAL,CAAYiH,iBAAZ,CAA8BD,MAA9B;AACD;;;kDAM6B/G,I,EAAM;AAClC,UAAMiH,SAAS,GAAG3H,gBAAgB,CAACU,IAAD,CAAlC;AACA,UAAMkH,QAAQ,GAAGD,SAAS,KAAK,IAAd,GAAqB,YAArB,GAAoCA,SAArD;AAEA7H,MAAAA,MAAM,CAAC+H,gBAAP,CAAwB,KAAKpH,MAAL,CAAY2G,QAAZ,EAAxB,EAAgDQ,QAAhD;AACD;;;sCAqHiB/F,G,EAAK;AAAA;;AACrB,aAAO,IAAI2D,OAAJ,CAAkB,UAACsC,OAAD,EAAUC,MAAV,EAAqB;AAC5C3H,QAAAA,iBAAiB,CAAC6F,OAAlB,CAA0B;AACxBd,UAAAA,KAAK,EAAE,UADiB;AAExBnC,UAAAA,IAAI,EAAE,2FAFkB;AAGxBoC,UAAAA,iBAAiB,EAAE,UAHK;AAIxBC,UAAAA,UAAU,EAAE,sBAAM;AAChB,gBAAM2C,eAAe,GAAG,MAAI,CAAC7F,SAAL,CAAeG,MAAf,GAAwBC,MAAxB,CAA+B,UAACC,CAAD;AAAA,qBAAOA,CAAC,CAACC,QAAF,KAAeZ,GAAtB;AAAA,aAA/B,CAAxB;;AACAzB,YAAAA,iBAAiB,CAACmF,aAAlB;AACA,mBAAOC,OAAO,CAACC,GAAR,CAAYuC,eAAe,CAACtC,GAAhB,CAAoB,UAAClD,CAAD;AAAA,qBAAOzC,eAAe,CAAC4F,kBAAhB,CAAmCnD,CAAC,CAACoD,EAArC,CAAP;AAAA,aAApB,CAAZ,EACJpB,IADI,CACC,UAACqB,IAAD,EAAU;AACdA,cAAAA,IAAI,CAACnD,OAAL,CAAa,UAACoD,CAAD,EAAIC,KAAJ;AAAA,uBAAc,MAAI,CAACC,cAAL,CAAoBgC,eAAe,CAACjC,KAAD,CAAf,CAAuBH,EAA3C,CAAd;AAAA,eAAb;AACD,aAHI,CAAP;AAID;AAXuB,SAA1B,EAYGpB,IAZH,CAYQ,UAAC0B,MAAD,EAAY;AAClB,cAAIA,MAAM,CAACC,WAAX,EAAwB;AACtB2B,YAAAA,OAAO;AACR,WAFD,MAEO;AACLC,YAAAA,MAAM;AACP;AACF,SAlBD;AAmBD,OApBM,CAAP;AAqBD;;;wCAmCmBlG,G,EAAK;AAAA;;AAAA,UACflB,eADe,GACK,KAAKC,KADV,CACfD,eADe;;AAAA,mCAEJA,eAAe,CAAC0C,SAAhB,CAA0BxB,GAA1B,CAFI;AAAA,UAEfF,MAFe,0BAEfA,MAFe;;AAIvB,aAAO,IAAI6D,OAAJ,CAAkB,UAACsC,OAAD,EAAUC,MAAV,EAAqB;AAC5C3H,QAAAA,iBAAiB,CAAC6F,OAAlB,CAA0B;AACxBd,UAAAA,KAAK,EAAE,UADiB;AAExBnC,UAAAA,IAAI,EAAE,wGAFkB;AAGxBoC,UAAAA,iBAAiB,EAAE,UAHK;AAIxBC,UAAAA,UAAU,EAAE,sBAAM;AAChB,gBAAM4C,iBAAiB,GAAG,MAAI,CAAC9F,SAAL,CACvBG,MADuB,GAEvBC,MAFuB,CAEhB,UAACC,CAAD;AAAA,qBAAO7B,eAAe,CAACoB,OAAhB,CAAwBS,CAAC,CAACC,QAA1B,EAAoCd,MAApC,EAA4CH,IAAnD;AAAA,aAFgB,CAA1B;;AAIApB,YAAAA,iBAAiB,CAACmF,aAAlB;AACA,mBAAOC,OAAO,CAACC,GAAR,CAAYwC,iBAAiB,CAACvC,GAAlB,CAAsB,UAAClD,CAAD;AAAA,qBAAOzC,eAAe,CAAC4F,kBAAhB,CAAmCnD,CAAC,CAACoD,EAArC,CAAP;AAAA,aAAtB,CAAZ,EACJpB,IADI,CACC,UAACqB,IAAD,EAAU;AACdA,cAAAA,IAAI,CAACnD,OAAL,CAAa,UAACoD,CAAD,EAAIC,KAAJ;AAAA,uBAAc,MAAI,CAACC,cAAL,CAAoBiC,iBAAiB,CAAClC,KAAD,CAAjB,CAAyBH,EAA7C,CAAd;AAAA,eAAb;AACD,aAHI,CAAP;AAID;AAduB,SAA1B,EAeGpB,IAfH,CAeQ,UAAC0B,MAAD,EAAY;AAClB,cAAIA,MAAM,CAACC,WAAX,EAAwB;AACtB2B,YAAAA,OAAO;AACR,WAFD,MAEO;AACLC,YAAAA,MAAM;AACP;AACF,SArBD;AAsBD,OAvBM,CAAP;AAwBD;;;iCAuBYtG,E,EAAI;AACf,UAAIyG,cAAc,GAAG,KAAKzH,MAAL,CAAY0H,yBAAZ,CAAsC,UAACtD,CAAD;AAAA,eAAOpD,EAAE,CAAC;AACnEsB,UAAAA,IAAI,EAAE1C,MAAM,CAAC+H,MAAP,CAAcC,MAD+C;AAEnEC,UAAAA,OAAO,EAAEzD,CAAC,CAAC0D;AAFwD,SAAD,CAAT;AAAA,OAAtC,CAArB;AAIA,UAAIC,iBAAiB,GAAG,KAAK/H,MAAL,CAAYgI,0BAAZ,CAAuC,UAAC5D,CAAD;AAAA,eAAOpD,EAAE,CAAC;AACvEsB,UAAAA,IAAI,EAAE1C,MAAM,CAAC+H,MAAP,CAAcM,SADmD;AAEvEJ,UAAAA,OAAO,GAAGzD,CAAC,CAAC8D,SAAL,4BAAmB9D,CAAC,CAAC+D,mBAArB;AAFgE,SAAD,CAAT;AAAA,OAAvC,CAAxB;AAIA,UAAIC,aAAa,GAAG,KAAKpI,MAAL,CAAYY,uBAAZ,CAAoC,UAACwD,CAAD;AAAA,eAAOpD,EAAE,CAAC;AAChEsB,UAAAA,IAAI,EAAE1C,MAAM,CAAC+H,MAAP,CAAcU,KAD4C;AAEhER,UAAAA,OAAO,EAAEzD,CAAC,CAACkE;AAFqD,SAAD,CAAT;AAAA,OAApC,CAApB;AAIA,UAAIC,cAAc,GAAG,KAAKvI,MAAL,CAAYwI,iBAAZ,CAA8B,UAACpE,CAAD;AAAA,eAAOpD,EAAE,CAAC;AAC3DsB,UAAAA,IAAI,EAAE1C,MAAM,CAAC+H,MAAP,CAAcc,MADuC;AAE3DZ,UAAAA,OAAO,EAAE;AACPa,YAAAA,UAAU,EAAEtE,CAAC,CAACsE,UADP;AAEPC,YAAAA,SAAS,EAAEvE,CAAC,CAACuE;AAFN;AAFkD,SAAD,CAAT;AAAA,OAA9B,CAArB;AAQA,aAAO,SAASC,aAAT,GAAyB;AAC9BnB,QAAAA,cAAc,CAAC9G,OAAf;AACAoH,QAAAA,iBAAiB,CAACpH,OAAlB;AACAyH,QAAAA,aAAa,CAACzH,OAAd;AACA4H,QAAAA,cAAc,CAAC5H,OAAf;AACD,OALD;AAMD;;;sCAE6B;AAAA,UAAjB2B,IAAiB,SAAjBA,IAAiB;AAAA,UAAXuF,OAAW,SAAXA,OAAW;;AAC5B,UAAI;AACF,gBAAQvF,IAAR;AACE,eAAK1C,MAAM,CAAC+H,MAAP,CAAcC,MAAnB;AACE,iBAAK5H,MAAL,CAAY6I,WAAZ,CAAwBhB,OAAxB;AACA,iBAAK7H,MAAL,CAAY8I,KAAZ;AACA;;AACF,eAAKlJ,MAAM,CAAC+H,MAAP,CAAcM,SAAnB;AACE,iBAAKjI,MAAL,CAAY+I,aAAZ,CAA0BlB,OAA1B;AACA;;AACF,eAAKjI,MAAM,CAAC+H,MAAP,CAAcU,KAAnB;AACE,iBAAKrI,MAAL,CAAYgJ,YAAZ,CAAyB,MAAzB,EAAiCnB,OAAjC;AACA;;AACF,eAAKjI,MAAM,CAAC+H,MAAP,CAAcc,MAAnB;AACE,iBAAKzI,MAAL,CAAYiH,iBAAZ,CAA8BY,OAA9B;AACA;;AACF;AACE;AAfJ;AAiBD,OAlBD,CAkBE,OAAOzD,CAAP,EAAU;AACVF,QAAAA,OAAO,CAAC+E,KAAR,CAAc7E,CAAd;AACD;AACF;;;AAUD;AACA;6BACS;AACP,WAAKpE,MAAL,CAAY2G,QAAZ,GAAuBuC,MAAvB;AACA,WAAKlJ,MAAL,CAAYkJ,MAAZ;AACD;;;4BAEO;AACN,WAAKlJ,MAAL,CAAY8I,KAAZ;AACD;;;;EA/ZsB3J,KAAK,CAACgK,S;;AAyhB/B,eAAetJ,UAAf","sourcesContent":["/* eslint-disable react/require-render-return */\r\n/* eslint-disable react/no-unused-state */\r\n/* eslint-disable react/sort-comp */\r\nimport React from 'react';\r\nimport noop from 'lodash/noop';\r\nimport * as Monaco from './monaco';\r\nimport ExerciseService from '~/services/Exercise.service';\r\nimport { extractExtension, filesToFolderStructure, fsEntriesToFolderStructure } from '~/services/utils/FileUtils';\r\nimport FolderStructure from '~/services/utils/FolderStructure';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\nimport { MONACO } from '~/services/Constants';\r\n\r\ninterface Props extends MonacoBase {\r\n  onChange: (folderStructure?: FolderStructure) => void,\r\n  [id: string]: any,\r\n  showFileSwitcher?: true,\r\n}\r\n\r\nclass MonacoBase extends React.Component<Props, any> {\r\n  protected _baseModelChangeListener: any;\r\n\r\n  protected editorRef: React.RefObject<HTMLDivElement>\r\n\r\n  protected editor: any;\r\n\r\n  protected timeoutId: any;\r\n\r\n  protected Feedbacks: any;\r\n\r\n  protected decorate: any;\r\n\r\n  protected onFeedbackDone: any;\r\n\r\n  protected onModelChange: any;\r\n\r\n  protected initEditor: () => void;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this._baseModelChangeListener = { dispose: noop };\r\n    this.editorRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { folderStructure } = this.state;\r\n    const { onLoad } = this.props;\r\n\r\n    const firstFile = folderStructure.files[0];\r\n\r\n    this.setState(\r\n      {\r\n        selectedFileKey: firstFile ? firstFile.key : firstFile,\r\n      },\r\n      () => {\r\n        this.initEditor();\r\n\r\n        if (typeof onLoad === 'function') {\r\n          setTimeout(() => onLoad(), 0);\r\n        }\r\n\r\n        if (this.editor) {\r\n          this.toggleFit(true);\r\n\r\n          this._baseModelChangeListener.dispose();\r\n          this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { folderStructure: folderStructureProp, readOnly } = this.props;\r\n\r\n    if (JSON.stringify(prevProps.folderStructure) !== JSON.stringify(folderStructureProp)) {\r\n      const folderStructure = new FolderStructure(folderStructureProp);\r\n      const firstFile = folderStructure.files[0];\r\n\r\n      // eslint-disable-next-line react/no-did-update-set-state\r\n      this.setState(\r\n        {\r\n          folderStructure,\r\n          selectedFileKey: null,\r\n        },\r\n        () => {\r\n          if (firstFile) {\r\n            this.onFileSelect(firstFile.key);\r\n          }\r\n        },\r\n      );\r\n    }\r\n\r\n    if (readOnly !== prevProps.readOnly) {\r\n      this.editor.updateOptions({ readOnly });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeoutId);\r\n    this._baseModelChangeListener.dispose();\r\n  }\r\n\r\n  onFolderSelect(key) {\r\n    this.setState({\r\n      selectedFolderKey: key,\r\n    });\r\n  }\r\n\r\n  getValue() {\r\n    return this.editor.getModel().getValue();\r\n  }\r\n\r\n  setValue(code = this.editor.getValue()) {\r\n    this.editor.getModel().setValue(code);\r\n  }\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  getScroll(type) {\r\n    if (type === 'TOP') {\r\n      return this.editor.getScrollTop();\r\n    } if (type === 'LEFT') {\r\n      return this.editor.getScrollLeft();\r\n    }\r\n  }\r\n\r\n  setScrollPosition(scroll) {\r\n    this.editor.setScrollPosition(scroll);\r\n  }\r\n\r\n  formatCode = () => {\r\n    return Monaco.formatCode(this.editor);\r\n  }\r\n\r\n  updateLanguageBasedOnFileName(name) {\r\n    const extension = extractExtension(name);\r\n    const language = extension === 'js' ? 'javascript' : extension;\r\n\r\n    Monaco.setModelLanguage(this.editor.getModel(), language);\r\n  }\r\n\r\n  createFirstFile = ({ name }: {name: string}) => {\r\n    const { folderStructure } = this.state;\r\n\r\n    let newFileKey = folderStructure.addFile(null, { name });\r\n    this.setState(\r\n      {\r\n        folderStructure,\r\n        selectedFileKey: newFileKey,\r\n      },\r\n      () => {\r\n        this.initEditor();\r\n        if (this.editor) {\r\n          this.toggleFit(true);\r\n\r\n          this._baseModelChangeListener.dispose();\r\n          this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  onFileAdd = (parentKey, file, cb = noop) => {\r\n    const { folderStructure } = this.state;\r\n\r\n    folderStructure.addFile(parentKey, file);\r\n    this.setState({ folderStructure }, () => {\r\n      cb();\r\n      this.notifyStructureChange();\r\n    });\r\n  }\r\n\r\n  onFolderAdd = (parentKey, folder, cb = noop) => {\r\n    const { folderStructure } = this.state;\r\n\r\n    folderStructure.addFolder(parentKey, folder);\r\n    this.setState({ folderStructure }, () => {\r\n      cb();\r\n      this.notifyStructureChange();\r\n    });\r\n  }\r\n\r\n  onFileSelect = (key) => {\r\n    this.setState({ selectedFileKey: key });\r\n\r\n    const { folderStructure } = this.state;\r\n    const { feedbacks } = this.props;\r\n\r\n    let { file } = folderStructure.getFile(key);\r\n\r\n    this._baseModelChangeListener.dispose();\r\n\r\n    this.setValue(file.content);\r\n    this.updateLanguageBasedOnFileName(file.name);\r\n\r\n    this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\r\n\r\n    if (this.Feedbacks && this.decorate && feedbacks) {\r\n      this.Feedbacks.undecorateAll();\r\n\r\n      this.Feedbacks.getAll()\r\n        .filter((f) => f.file_key === file.key)\r\n        .forEach((f) => this.decorate(f.getDecorationData()));\r\n    }\r\n  }\r\n\r\n  onFileRename = (key, name) => {\r\n    const { folderStructure } = this.state;\r\n\r\n    try {\r\n      folderStructure.renameFile(key, name);\r\n      this.setState({ folderStructure }, () => {\r\n        this.updateLanguageBasedOnFileName(name);\r\n        this.notifyStructureChange();\r\n      });\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    }\r\n  }\r\n\r\n  onFolderRename = (key, name) => {\r\n    const { folderStructure } = this.state;\r\n\r\n    try {\r\n      folderStructure.renameFolder(key, name);\r\n      this.setState({ folderStructure }, this.notifyStructureChange);\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    }\r\n  }\r\n\r\n  onFileDelete = async (key) => {\r\n    const { folderStructure, selectedFileKey } = this.state;\r\n\r\n    if (this.Feedbacks && this.Feedbacks.getAll().find((f) => f.file_key === key)) {\r\n      try {\r\n        await this.confirmFileDelete(key);\r\n      } catch (err) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      folderStructure.deleteFile(key);\r\n      this.setState(\r\n        {\r\n          folderStructure,\r\n          selectedFileKey: key === selectedFileKey ? null : selectedFileKey,\r\n        },\r\n        this.notifyStructureChange,\r\n      );\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    }\r\n  }\r\n\r\n  confirmFileDelete(key) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      SweetAlertService.confirm({\r\n        title: 'Hold on!',\r\n        text: \"You're about to delete a file which contains feedback. Doing this will mark them as done.\",\r\n        confirmButtonText: 'Continue',\r\n        preConfirm: () => {\r\n          const feedbacksInFile = this.Feedbacks.getAll().filter((f) => f.file_key === key);\r\n          SweetAlertService.toggleLoading();\r\n          return Promise.all(feedbacksInFile.map((f) => ExerciseService.markFeedbackAsDone(f.id)))\r\n            .then((resp) => {\r\n              resp.forEach((_, index) => this.onFeedbackDone(feedbacksInFile[index].id));\r\n            });\r\n        },\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          resolve();\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  onFolderDelete = async (key) => {\r\n    const { folderStructure, selectedFileKey } = this.state;\r\n    const { folder } = folderStructure.getFolder(key);\r\n\r\n    if (this.Feedbacks.getAll().find((f) => !!folderStructure.getFile(f.file_key, folder).file)) {\r\n      try {\r\n        await this.confirmFolderDelete(key);\r\n      } catch (err) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      const { folder } = folderStructure.getFolder(key);\r\n      let selectedFileIsHere = false;\r\n\r\n      if (folderStructure.getFile(selectedFileKey, folder).file) {\r\n        selectedFileIsHere = true;\r\n      }\r\n\r\n      folderStructure.deleteFolder(key);\r\n      this.setState(\r\n        {\r\n          folderStructure,\r\n          selectedFileKey: selectedFileIsHere ? null : selectedFileKey,\r\n        },\r\n        this.notifyStructureChange,\r\n      );\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    }\r\n  }\r\n\r\n  confirmFolderDelete(key) {\r\n    const { folderStructure } = this.state;\r\n    const { folder } = folderStructure.getFolder(key);\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      SweetAlertService.confirm({\r\n        title: 'Hold on!',\r\n        text: \"You're about to delete a folder which contains files with feedback. Doing this will mark them as done.\",\r\n        confirmButtonText: 'Continue',\r\n        preConfirm: () => {\r\n          const feedbacksInFolder = this.Feedbacks\r\n            .getAll()\r\n            .filter((f) => folderStructure.getFile(f.file_key, folder).file);\r\n\r\n          SweetAlertService.toggleLoading();\r\n          return Promise.all(feedbacksInFolder.map((f) => ExerciseService.markFeedbackAsDone(f.id)))\r\n            .then((resp) => {\r\n              resp.forEach((_, index) => this.onFeedbackDone(feedbacksInFolder[index].id));\r\n            });\r\n        },\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          resolve();\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  onDownload = () => {\r\n    const { folderStructure } = this.state;\r\n    return folderStructure.downloadAsZip();\r\n  }\r\n\r\n  getFolderStructure = () => {\r\n    const { folderStructure } = this.state;\r\n    if (folderStructure.folders.length || folderStructure.files.length) {\r\n      return folderStructure.toJSON();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  onResize = (fileSwitcherWidth) => {\r\n    this.setState({ fileSwitcherWidth }, () => {\r\n      if (this.editor) {\r\n        this.editor.layout();\r\n      }\r\n    });\r\n  }\r\n\r\n  onAllChanges(cb) {\r\n    let cursorListener = this.editor.onDidChangeCursorPosition((e) => cb({\r\n      type: MONACO.EVENTS.CURSOR,\r\n      payload: e.position,\r\n    }));\r\n    let selectionListener = this.editor.onDidChangeCursorSelection((e) => cb({\r\n      type: MONACO.EVENTS.SELECTION,\r\n      payload: [e.selection, ...e.secondarySelections],\r\n    }));\r\n    let modelListener = this.editor.onDidChangeModelContent((e) => cb({\r\n      type: MONACO.EVENTS.MODEL,\r\n      payload: e.changes,\r\n    }));\r\n    let scrollListener = this.editor.onDidScrollChange((e) => cb({\r\n      type: MONACO.EVENTS.SCROLL,\r\n      payload: {\r\n        scrollLeft: e.scrollLeft,\r\n        scrollTop: e.scrollTop,\r\n      },\r\n    }));\r\n\r\n    return function offAllChanges() {\r\n      cursorListener.dispose();\r\n      selectionListener.dispose();\r\n      modelListener.dispose();\r\n      scrollListener.dispose();\r\n    };\r\n  }\r\n\r\n  applyEvent({ type, payload }) {\r\n    try {\r\n      switch (type) {\r\n        case MONACO.EVENTS.CURSOR:\r\n          this.editor.setPosition(payload);\r\n          this.editor.focus();\r\n          break;\r\n        case MONACO.EVENTS.SELECTION:\r\n          this.editor.setSelections(payload);\r\n          break;\r\n        case MONACO.EVENTS.MODEL:\r\n          this.editor.executeEdits('user', payload);\r\n          break;\r\n        case MONACO.EVENTS.SCROLL:\r\n          this.editor.setScrollPosition(payload);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  notifyStructureChange = () => {\r\n    const { onStructureChange } = this.props;\r\n\r\n    if (typeof onStructureChange === 'function') {\r\n      onStructureChange(this.getFolderStructure());\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  render() {\r\n    this.editor.getModel().render();\r\n    this.editor.render();\r\n  }\r\n\r\n  focus() {\r\n    this.editor.focus();\r\n  }\r\n\r\n  uploadStructure = ({ nativeEvent }, withInit = true) => {\r\n    this.setState({\r\n      isDropable: false,\r\n    });\r\n\r\n    let computeFolderStructure = null;\r\n\r\n    if (nativeEvent.target.webkitEntries && nativeEvent.target.webkitEntries.length) {\r\n      computeFolderStructure = fsEntriesToFolderStructure(nativeEvent.target.webkitEntries);\r\n    } else {\r\n      computeFolderStructure = filesToFolderStructure(nativeEvent.target.files);\r\n    }\r\n\r\n    computeFolderStructure.then((folderStructure) => {\r\n      this.setState(\r\n        {\r\n          folderStructure,\r\n          selectedFileKey: null,\r\n        },\r\n        () => {\r\n          if (!withInit) {\r\n            return;\r\n          }\r\n\r\n          this.initEditor();\r\n          if (this.editor) {\r\n            this.toggleFit(true);\r\n\r\n            this._baseModelChangeListener.dispose();\r\n            this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\r\n          }\r\n        },\r\n      );\r\n    });\r\n  }\r\n\r\n  toggleFit = (force = undefined) => {\r\n    console.log('TOGGLE FIT');\r\n    // const { fixedHeight: fixedHeightState } = this.state;\r\n\r\n    // const editorElHeight = this.editorRef.current.getBoundingClientRect().height;\r\n    // let fixedHeight: any = false;\r\n    // if (!fixedHeightState || force === true) {\r\n    //   // eslint-disable-next-line max-len\r\n    //   fixedHeight = this.editor.getModel().getLineCount() * this.editor.getConfiguration().lineHeight;\r\n    // }\r\n\r\n    // this.setState({ fixedHeight: Math.max(editorElHeight, fixedHeight) }, () => {\r\n    //   this.editor.layout();\r\n    // });\r\n  }\r\n\r\n  // DragNDrop\r\n  onDragEnter = (e) => {\r\n    const { readOnly } = this.props;\r\n\r\n    if (readOnly) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    this.setState({\r\n      isDropable: true,\r\n    });\r\n  }\r\n\r\n  onDragLeave = (e) => {\r\n    const { readOnly } = this.props;\r\n\r\n    if (readOnly) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    if (e.target.tagName === 'INPUT' && e.target.type === 'file') {\r\n      this.setState({\r\n        isDropable: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  onReplace = (e) => {\r\n    e.persist();\r\n\r\n    let swalOptions: any = {\r\n      title: 'Hold on!',\r\n      confirmButtonText: 'Continue',\r\n    };\r\n\r\n    if (this.Feedbacks && this.Feedbacks.getAll().length) {\r\n      swalOptions.text = 'Vei suprascrie toate foldrele și fișierele, iar feedback-urile vor fi marcate ca și rezolvate.';\r\n      swalOptions.preConfirm = () => {\r\n        const allFeedbacks = this.Feedbacks.getAll();\r\n\r\n        SweetAlertService.toggleLoading();\r\n\r\n        return Promise\r\n          .all(allFeedbacks.map((f) => ExerciseService.markFeedbackAsDone(f.id)))\r\n          .then((resp) => {\r\n            resp.forEach((_, index) => this.onFeedbackDone(allFeedbacks[index].id));\r\n          });\r\n      };\r\n    } else {\r\n      swalOptions.text = 'Vei suprascrie toate folderele și fișierele existente';\r\n    }\r\n\r\n    SweetAlertService.confirm(swalOptions).then((result) => {\r\n      if (result.isConfirmed) {\r\n        this.uploadStructure(e, false);\r\n        e.target.value = null;\r\n      } else {\r\n        this.setState({\r\n          isDropable: false,\r\n        });\r\n        e.target.value = null;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default MonacoBase;\r\n"]},"metadata":{},"sourceType":"module"}