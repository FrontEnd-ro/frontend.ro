{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { uuid } from '~/services/Utils';\nimport { extractExtension } from '~/services/utils/FileUtils';\nimport { MAX_MEDIA_BYTES, MAX_MEDIA_MB } from '~/../shared/SharedConstants';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport ExerciseService from '~/services/Exercise.service';\nexport { default as NewExercise } from './NewExercise';\nexport { default as ViewOrEditExercise } from './ViewOrEditExercise';\nexport function uploadFiles(files, cursorPosition, currentBody, cb) {\n  var newMarkdown = currentBody;\n  var filesIgnored = 0; // due to size restrictions\n\n  var filesToUpload = {};\n  files.forEach(function (file) {\n    if (file.size > MAX_MEDIA_BYTES) {\n      filesIgnored += 1;\n      return;\n    }\n\n    console.log(file.size);\n    var fileName = \"\".concat(uuid(), \".\").concat(extractExtension(file.name));\n    var objectURL = URL.createObjectURL(file);\n    var imgMarkdown = \"![\".concat(file.name, \"](\").concat(objectURL, \")\");\n    filesToUpload[fileName] = {\n      file: file,\n      markdownToReplace: imgMarkdown\n    };\n    newMarkdown = \"\".concat(newMarkdown.substring(0, cursorPosition)).concat(imgMarkdown).concat(newMarkdown.substring(cursorPosition)); // eslint-disable-next-line no-param-reassign\n\n    cursorPosition += imgMarkdown.length;\n  });\n\n  if (filesIgnored) {\n    SweetAlertService.toast({\n      type: 'info',\n      text: filesIgnored === 1 ? \"Fi\\u0219ierul a fost ignorat c\\u0103ci nu se \\xEEncadreaz\\u0103 \\xEEn limita de \".concat(MAX_MEDIA_MB, \"MB\") : \"\".concat(filesIgnored, \" fi\\u0219iere au fost ignorate c\\u0103ci nu se \\xEEncadreaz\\u0103 \\xEEn limita de \").concat(MAX_MEDIA_MB, \"MB\")\n    });\n  }\n\n  cb(newMarkdown, filesToUpload);\n}\nexport function uploadMedia(_x, _x2) {\n  return _uploadMedia.apply(this, arguments);\n}\n\nfunction _uploadMedia() {\n  _uploadMedia = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(body, filesToUpload) {\n    var results, fulfilledResults, filesIgnored;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // 1. Maybe some files were removed in the meantime -> double check they're stll here\n            Object.keys(filesToUpload).forEach(function (id) {\n              var markdownToReplace = filesToUpload[id].markdownToReplace;\n\n              if (body.indexOf(markdownToReplace) === -1) {\n                delete filesToUpload[id];\n              }\n            }); // 2. Upload to AWS\n\n            _context.next = 3;\n            return Promise.allSettled(Object.keys(filesToUpload).map(function (id) {\n              return ExerciseService.uploadMedia(id, filesToUpload[id].file);\n            }));\n\n          case 3:\n            results = _context.sent;\n            fulfilledResults = results.filter(function (res) {\n              return res.status === 'fulfilled';\n            }).map(function (res) {\n              return res.value;\n            });\n\n            if (results.length !== fulfilledResults.length) {\n              filesIgnored = results.length - fulfilledResults.length;\n              SweetAlertService.toast({\n                type: 'info',\n                text: filesIgnored === 1 ? '1 fișisier nu a putut fi uploadat. Încearcă din nou' : \"\".concat(filesIgnored, \" fi\\u0219iere nu au putut fi uploadate. \\xCEncearc\\u0103 din nou\")\n              });\n            }\n\n            return _context.abrupt(\"return\", fulfilledResults);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _uploadMedia.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/create-view-edit-exercise/index.ts"],"names":["uuid","extractExtension","MAX_MEDIA_BYTES","MAX_MEDIA_MB","SweetAlertService","ExerciseService","default","NewExercise","ViewOrEditExercise","uploadFiles","files","cursorPosition","currentBody","cb","newMarkdown","filesIgnored","filesToUpload","forEach","file","size","console","log","fileName","name","objectURL","URL","createObjectURL","imgMarkdown","markdownToReplace","substring","length","toast","type","text","uploadMedia","body","Object","keys","id","indexOf","Promise","allSettled","map","results","fulfilledResults","filter","res","status","value"],"mappings":"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","sourcesContent":["import { uuid } from '~/services/Utils';\r\nimport { extractExtension } from '~/services/utils/FileUtils';\r\nimport { MAX_MEDIA_BYTES, MAX_MEDIA_MB } from '~/../shared/SharedConstants';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\nimport ExerciseService from '~/services/Exercise.service';\r\n\r\nexport { default as NewExercise } from './NewExercise';\r\nexport { default as ViewOrEditExercise } from './ViewOrEditExercise';\r\n\r\nexport interface FileDictionary {\r\n  [id: string]: {\r\n    file: File;\r\n    markdownToReplace: string;\r\n  }\r\n}\r\n\r\nexport interface MediaUploadResp {\r\n  name: string;\r\n  url: string;\r\n}\r\n\r\nexport function uploadFiles(\r\n  files: File[],\r\n  cursorPosition: number,\r\n  currentBody: string,\r\n  cb: (\r\n    newMarkdown: string,\r\n    filesToUpload: FileDictionary\r\n  ) => void,\r\n) {\r\n  let newMarkdown = currentBody;\r\n  let filesIgnored = 0; // due to size restrictions\r\n  const filesToUpload = {};\r\n\r\n  files.forEach((file) => {\r\n    if (file.size > MAX_MEDIA_BYTES) {\r\n      filesIgnored += 1;\r\n      return;\r\n    }\r\n\r\n    console.log(file.size);\r\n    const fileName = `${uuid()}.${extractExtension(file.name)}`;\r\n    const objectURL = URL.createObjectURL(file);\r\n    const imgMarkdown = `![${file.name}](${objectURL})`;\r\n\r\n    filesToUpload[fileName] = {\r\n      file,\r\n      markdownToReplace: imgMarkdown,\r\n    };\r\n\r\n    newMarkdown = `${newMarkdown.substring(\r\n      0,\r\n      cursorPosition,\r\n    )}${imgMarkdown}${newMarkdown.substring(cursorPosition)}`;\r\n    // eslint-disable-next-line no-param-reassign\r\n    cursorPosition += imgMarkdown.length;\r\n  });\r\n\r\n  if (filesIgnored) {\r\n    SweetAlertService.toast({\r\n      type: 'info',\r\n      text:\r\n        filesIgnored === 1\r\n          ? `Fișierul a fost ignorat căci nu se încadrează în limita de ${MAX_MEDIA_MB}MB`\r\n          : `${filesIgnored} fișiere au fost ignorate căci nu se încadrează în limita de ${MAX_MEDIA_MB}MB`,\r\n    });\r\n  }\r\n\r\n  cb(newMarkdown, filesToUpload);\r\n}\r\n\r\nexport async function uploadMedia(body: string, filesToUpload: FileDictionary) {\r\n  // 1. Maybe some files were removed in the meantime -> double check they're stll here\r\n  Object.keys(filesToUpload).forEach((id) => {\r\n    const { markdownToReplace } = filesToUpload[id];\r\n    if (body.indexOf(markdownToReplace) === -1) {\r\n      delete filesToUpload[id];\r\n    }\r\n  });\r\n\r\n  // 2. Upload to AWS\r\n  const results = await Promise.allSettled(Object.keys(filesToUpload).map((id) => {\r\n    return ExerciseService.uploadMedia(id, filesToUpload[id].file);\r\n  }));\r\n\r\n  const fulfilledResults = results\r\n    .filter((res) => res.status === 'fulfilled')\r\n    .map((res: PromiseFulfilledResult<MediaUploadResp>) => res.value);\r\n\r\n  if (results.length !== fulfilledResults.length) {\r\n    const filesIgnored = results.length - fulfilledResults.length;\r\n\r\n    SweetAlertService.toast({\r\n      type: 'info',\r\n      text: filesIgnored === 1\r\n        ? '1 fișisier nu a putut fi uploadat. Încearcă din nou'\r\n        : `${filesIgnored} fișiere nu au putut fi uploadate. Încearcă din nou`,\r\n    });\r\n  }\r\n  return fulfilledResults;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}