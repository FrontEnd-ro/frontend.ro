{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst mongoose = require('mongoose');\n\nconst {\n  validateObjectId\n} = require('../server/ServerUtils');\n\nconst {\n  sanitize: userSanitize\n} = require('./user.shared-model');\n\nconst ExerciseJSONSchema = {\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  },\n  type: {\n    type: String,\n    enum: ['html', 'css', 'js']\n  },\n  tags: [{\n    type: String\n  }],\n  body: {\n    type: String,\n    required: true\n  },\n  example: {\n    type: String\n  },\n  solution: {\n    type: String,\n    required: true\n  },\n  private: {\n    type: Boolean,\n    default: false\n  },\n  suggestion: {\n    type: String,\n    required: false\n  }\n};\nconst ExercisesSchema = new mongoose.Schema(ExerciseJSONSchema, {\n  timestamps: true\n});\nconst Exercise = mongoose.models.Exercise || mongoose.model('Exercise', ExercisesSchema);\n\nfunction getById(_id) {\n  validateObjectId(_id);\n  return Exercise.findById(_id).populate('user');\n}\n\nfunction sanitize(exercise) {\n  const sanitizedExercise = _objectSpread({}, exercise.toObject());\n\n  const propsToDelete = ['__v', 'updatedAt', 'createdAt'];\n  propsToDelete.forEach(prop => delete sanitizedExercise[prop]);\n  sanitizedExercise.user = userSanitize(exercise.user);\n  return JSON.parse(JSON.stringify(sanitizedExercise));\n}\n\nmodule.exports = {\n  Exercise,\n  ExercisesSchema,\n  ExerciseJSONSchema,\n  getById,\n  sanitize\n};","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/shared/exercise.shared-model.js"],"names":["mongoose","require","validateObjectId","sanitize","userSanitize","ExerciseJSONSchema","user","type","Schema","Types","ObjectId","ref","String","enum","tags","body","required","example","solution","private","Boolean","default","suggestion","ExercisesSchema","timestamps","Exercise","models","model","getById","_id","findById","populate","exercise","sanitizedExercise","toObject","propsToDelete","forEach","prop","JSON","parse","stringify","module","exports"],"mappings":";;;;;;AAAA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAuBD,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAM;AAAEE,EAAAA,QAAQ,EAAEC;AAAZ,IAA6BH,OAAO,CAAC,qBAAD,CAA1C;;AAEA,MAAMI,kBAAkB,GAAG;AACzBC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAI,EAAEP,QAAQ,CAACQ,MAAT,CAAgBC,KAAhB,CAAsBC,QAA9B;AAAwCC,IAAAA,GAAG,EAAE;AAA7C,GADmB;AAEzBJ,EAAAA,IAAI,EAAE;AAAEA,IAAAA,IAAI,EAAEK,MAAR;AAAgBC,IAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,IAAhB;AAAtB,GAFmB;AAGzBC,EAAAA,IAAI,EAAE,CAAC;AAAEP,IAAAA,IAAI,EAAEK;AAAR,GAAD,CAHmB;AAIzBG,EAAAA,IAAI,EAAE;AAAER,IAAAA,IAAI,EAAEK,MAAR;AAAgBI,IAAAA,QAAQ,EAAE;AAA1B,GAJmB;AAKzBC,EAAAA,OAAO,EAAE;AAAEV,IAAAA,IAAI,EAAEK;AAAR,GALgB;AAMzBM,EAAAA,QAAQ,EAAE;AAAEX,IAAAA,IAAI,EAAEK,MAAR;AAAgBI,IAAAA,QAAQ,EAAE;AAA1B,GANe;AAOzBG,EAAAA,OAAO,EAAE;AAAEZ,IAAAA,IAAI,EAAEa,OAAR;AAAiBC,IAAAA,OAAO,EAAE;AAA1B,GAPgB;AAQzBC,EAAAA,UAAU,EAAE;AAAEf,IAAAA,IAAI,EAAEK,MAAR;AAAgBI,IAAAA,QAAQ,EAAE;AAA1B;AARa,CAA3B;AAWA,MAAMO,eAAe,GAAG,IAAIvB,QAAQ,CAACQ,MAAb,CACtBH,kBADsB,EAEtB;AACEmB,EAAAA,UAAU,EAAE;AADd,CAFsB,CAAxB;AAOA,MAAMC,QAAQ,GAAGzB,QAAQ,CAAC0B,MAAT,CAAgBD,QAAhB,IAA4BzB,QAAQ,CAAC2B,KAAT,CAAe,UAAf,EAA2BJ,eAA3B,CAA7C;;AAEA,SAASK,OAAT,CAAiBC,GAAjB,EAAsB;AACpB3B,EAAAA,gBAAgB,CAAC2B,GAAD,CAAhB;AACA,SAAOJ,QAAQ,CAACK,QAAT,CAAkBD,GAAlB,EAAuBE,QAAvB,CAAgC,MAAhC,CAAP;AACD;;AAED,SAAS5B,QAAT,CAAkB6B,QAAlB,EAA4B;AAC1B,QAAMC,iBAAiB,qBAAQD,QAAQ,CAACE,QAAT,EAAR,CAAvB;;AACA,QAAMC,aAAa,GAAG,CAAC,KAAD,EAAQ,WAAR,EAAqB,WAArB,CAAtB;AAEAA,EAAAA,aAAa,CAACC,OAAd,CAAuBC,IAAD,IAAU,OAAOJ,iBAAiB,CAACI,IAAD,CAAxD;AAEAJ,EAAAA,iBAAiB,CAAC3B,IAAlB,GAAyBF,YAAY,CAAC4B,QAAQ,CAAC1B,IAAV,CAArC;AAEA,SAAOgC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,iBAAf,CAAX,CAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,QADe;AAEfF,EAAAA,eAFe;AAGflB,EAAAA,kBAHe;AAIfuB,EAAAA,OAJe;AAKfzB,EAAAA;AALe,CAAjB","sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\r\nconst mongoose = require('mongoose');\r\nconst { validateObjectId } = require('../server/ServerUtils');\r\nconst { sanitize: userSanitize } = require('./user.shared-model');\r\n\r\nconst ExerciseJSONSchema = {\r\n  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\r\n  type: { type: String, enum: ['html', 'css', 'js'] },\r\n  tags: [{ type: String }],\r\n  body: { type: String, required: true },\r\n  example: { type: String },\r\n  solution: { type: String, required: true },\r\n  private: { type: Boolean, default: false },\r\n  suggestion: { type: String, required: false },\r\n};\r\n\r\nconst ExercisesSchema = new mongoose.Schema(\r\n  ExerciseJSONSchema,\r\n  {\r\n    timestamps: true,\r\n  },\r\n);\r\n\r\nconst Exercise = mongoose.models.Exercise || mongoose.model('Exercise', ExercisesSchema);\r\n\r\nfunction getById(_id) {\r\n  validateObjectId(_id);\r\n  return Exercise.findById(_id).populate('user');\r\n}\r\n\r\nfunction sanitize(exercise) {\r\n  const sanitizedExercise = { ...exercise.toObject() };\r\n  const propsToDelete = ['__v', 'updatedAt', 'createdAt'];\r\n\r\n  propsToDelete.forEach((prop) => delete sanitizedExercise[prop]);\r\n\r\n  sanitizedExercise.user = userSanitize(exercise.user);\r\n\r\n  return JSON.parse(JSON.stringify(sanitizedExercise));\r\n}\r\n\r\nmodule.exports = {\r\n  Exercise,\r\n  ExercisesSchema,\r\n  ExerciseJSONSchema,\r\n  getById,\r\n  sanitize,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}