{"ast":null,"code":"var mongoose = require('mongoose');\n\nfunction connectToDb() {\n  if (mongoose.connection && mongoose.connection.readyState === 1) {\n    /** Early return - already connected */\n    return Promise.resolve(mongoose);\n  }\n\n  return mongoose.connect(process.env.DB_CONNECT, {\n    poolSize: 1,\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    useFindAndModify: false,\n    useCreateIndex: true\n  });\n}\n/** Extract the first human-readable error message from a Mongoose ValidationError */\n\n\nfunction extractDbErrorMessage(err) {\n  if (err.errors) {\n    var keys = Object.keys(err.errors);\n    var firstKeyWithErrorMessage = keys.find(function (key) {\n      return err.errors[key].message;\n    });\n\n    if (firstKeyWithErrorMessage) {\n      return err.errors[firstKeyWithErrorMessage].message;\n    }\n  }\n\n  return err._message || 'Oops, something went wrong...';\n}\n\nmodule.exports = {\n  connectToDb: connectToDb,\n  extractDbErrorMessage: extractDbErrorMessage\n};","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/server/database.js"],"names":["mongoose","require","connectToDb","connection","readyState","Promise","resolve","connect","process","env","DB_CONNECT","poolSize","useNewUrlParser","useUnifiedTopology","useFindAndModify","useCreateIndex","extractDbErrorMessage","err","errors","keys","Object","firstKeyWithErrorMessage","find","key","message","_message","module","exports"],"mappings":"AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,SAASC,WAAT,GAAuB;AACrB,MAAIF,QAAQ,CAACG,UAAT,IAAuBH,QAAQ,CAACG,UAAT,CAAoBC,UAApB,KAAmC,CAA9D,EAAiE;AAC/D;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBN,QAAhB,CAAP;AACD;;AAED,SAAOA,QAAQ,CAACO,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,UAA7B,EAAyC;AAC9CC,IAAAA,QAAQ,EAAE,CADoC;AAE9CC,IAAAA,eAAe,EAAE,IAF6B;AAG9CC,IAAAA,kBAAkB,EAAE,IAH0B;AAI9CC,IAAAA,gBAAgB,EAAE,KAJ4B;AAK9CC,IAAAA,cAAc,EAAE;AAL8B,GAAzC,CAAP;AAOD;AAED;;;AACA,SAASC,qBAAT,CAA+BC,GAA/B,EAAoC;AAClC,MAAIA,GAAG,CAACC,MAAR,EAAgB;AACd,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,GAAG,CAACC,MAAhB,CAAb;AACA,QAAMG,wBAAwB,GAAGF,IAAI,CAACG,IAAL,CAAU,UAACC,GAAD;AAAA,aAASN,GAAG,CAACC,MAAJ,CAAWK,GAAX,EAAgBC,OAAzB;AAAA,KAAV,CAAjC;;AAEA,QAAIH,wBAAJ,EAA8B;AAC5B,aAAOJ,GAAG,CAACC,MAAJ,CAAWG,wBAAX,EAAqCG,OAA5C;AACD;AACF;;AAED,SAAOP,GAAG,CAACQ,QAAJ,IAAgB,+BAAvB;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,WAAW,EAAXA,WADe;AAEfc,EAAAA,qBAAqB,EAArBA;AAFe,CAAjB","sourcesContent":["const mongoose = require('mongoose')\r\n\r\nfunction connectToDb() {\r\n  if (mongoose.connection && mongoose.connection.readyState === 1) {\r\n    /** Early return - already connected */\r\n    return Promise.resolve(mongoose);\r\n  }\r\n\r\n  return mongoose.connect(process.env.DB_CONNECT, {\r\n    poolSize: 1,\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    useFindAndModify: false,\r\n    useCreateIndex: true,\r\n  });\r\n}\r\n\r\n/** Extract the first human-readable error message from a Mongoose ValidationError */\r\nfunction extractDbErrorMessage(err) {\r\n  if (err.errors) {\r\n    const keys = Object.keys(err.errors);\r\n    const firstKeyWithErrorMessage = keys.find((key) => err.errors[key].message);\r\n\r\n    if (firstKeyWithErrorMessage) {\r\n      return err.errors[firstKeyWithErrorMessage].message;\r\n    }\r\n  }\r\n\r\n  return err._message || 'Oops, something went wrong...';\r\n}\r\n\r\nmodule.exports = {\r\n  connectToDb,\r\n  extractDbErrorMessage,\r\n}"]},"metadata":{},"sourceType":"script"}