{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass LogRocketService {\n  static init() {\n    if (LogRocketService.instance) {\n      console.info(\"[LogRocketService] Return early from 'init' because it was previously initialized.\");\n      return Promise.resolve();\n    }\n\n    return import('logrocket').then(module => {\n      LogRocketService.instance = module.default;\n      LogRocketService.instance.init('ijivpy/frontendro', {\n        dom: {\n          textSanitizer: true\n        }\n      });\n    }).catch(err => {\n      console.error('[LogRocket]', err);\n    });\n  }\n\n  static async identify(data) {\n    if (!LogRocketService.instance) {\n      await LogRocketService.init();\n    }\n\n    LogRocketService.identityData = data;\n    LogRocketService.instance.identify(data.username, {\n      email: data.email,\n      username: data.username,\n      name: data.name || 'Unknnown name'\n    });\n  }\n\n  static async anonymize() {\n    if (!LogRocketService.instance) {\n      await LogRocketService.init();\n    }\n\n    LogRocketService.identityData = null;\n    LogRocketService.instance.identify(null);\n  }\n\n  static getIdentityData() {\n    return LogRocketService.identityData;\n  }\n\n}\n\n_defineProperty(LogRocketService, \"instance\", null);\n\n_defineProperty(LogRocketService, \"identityData\", void 0);\n\nexport default LogRocketService;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/utils/LogRocket.service.ts"],"names":["LogRocketService","init","instance","console","info","Promise","resolve","then","module","default","dom","textSanitizer","catch","err","error","identify","data","identityData","username","email","name","anonymize","getIdentityData"],"mappings":";;AAKA,MAAMA,gBAAN,CAAuB;AAKrB,SAAOC,IAAP,GAAc;AACZ,QAAID,gBAAgB,CAACE,QAArB,EAA+B;AAC7BC,MAAAA,OAAO,CAACC,IAAR,CACE,oFADF;AAGA,aAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AAED,WAAO,OAAO,WAAP,EACJC,IADI,CACEC,MAAD,IAAY;AAChBR,MAAAA,gBAAgB,CAACE,QAAjB,GAA4BM,MAAM,CAACC,OAAnC;AAEAT,MAAAA,gBAAgB,CAACE,QAAjB,CAA0BD,IAA1B,CAA+B,mBAA/B,EAAoD;AAClDS,QAAAA,GAAG,EAAE;AACHC,UAAAA,aAAa,EAAE;AADZ;AAD6C,OAApD;AAKD,KATI,EAUJC,KAVI,CAUGC,GAAD,IAAS;AACdV,MAAAA,OAAO,CAACW,KAAR,CAAc,aAAd,EAA6BD,GAA7B;AACD,KAZI,CAAP;AAaD;;AAED,eAAaE,QAAb,CAAsBC,IAAtB,EAA0C;AACxC,QAAI,CAAChB,gBAAgB,CAACE,QAAtB,EAAgC;AAC9B,YAAMF,gBAAgB,CAACC,IAAjB,EAAN;AACD;;AAEDD,IAAAA,gBAAgB,CAACiB,YAAjB,GAAgCD,IAAhC;AACAhB,IAAAA,gBAAgB,CAACE,QAAjB,CAA0Ba,QAA1B,CAAmCC,IAAI,CAACE,QAAxC,EAAkD;AAChDC,MAAAA,KAAK,EAAEH,IAAI,CAACG,KADoC;AAEhDD,MAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFiC;AAGhDE,MAAAA,IAAI,EAAEJ,IAAI,CAACI,IAAL,IAAa;AAH6B,KAAlD;AAKD;;AAED,eAAaC,SAAb,GAAyB;AACvB,QAAI,CAACrB,gBAAgB,CAACE,QAAtB,EAAgC;AAC9B,YAAMF,gBAAgB,CAACC,IAAjB,EAAN;AACD;;AAEDD,IAAAA,gBAAgB,CAACiB,YAAjB,GAAgC,IAAhC;AACAjB,IAAAA,gBAAgB,CAACE,QAAjB,CAA0Ba,QAA1B,CAAmC,IAAnC;AACD;;AAED,SAAOO,eAAP,GAAyB;AACvB,WAAOtB,gBAAgB,CAACiB,YAAxB;AACD;;AApDoB;;gBAAjBjB,gB,cACsB,I;;gBADtBA,gB;;AAuDN,eAAeA,gBAAf","sourcesContent":["interface IdentityData {\r\n  name: string;\r\n  username: string;\r\n  email: string;\r\n}\r\nclass LogRocketService {\r\n  private static instance = null;\r\n\r\n  private static identityData: IdentityData;\r\n\r\n  static init() {\r\n    if (LogRocketService.instance) {\r\n      console.info(\r\n        \"[LogRocketService] Return early from 'init' because it was previously initialized.\",\r\n      );\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return import('logrocket')\r\n      .then((module) => {\r\n        LogRocketService.instance = module.default;\r\n\r\n        LogRocketService.instance.init('ijivpy/frontendro', {\r\n          dom: {\r\n            textSanitizer: true,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error('[LogRocket]', err);\r\n      });\r\n  }\r\n\r\n  static async identify(data: IdentityData) {\r\n    if (!LogRocketService.instance) {\r\n      await LogRocketService.init();\r\n    }\r\n\r\n    LogRocketService.identityData = data;\r\n    LogRocketService.instance.identify(data.username, {\r\n      email: data.email,\r\n      username: data.username,\r\n      name: data.name || 'Unknnown name',\r\n    });\r\n  }\r\n\r\n  static async anonymize() {\r\n    if (!LogRocketService.instance) {\r\n      await LogRocketService.init();\r\n    }\r\n\r\n    LogRocketService.identityData = null;\r\n    LogRocketService.instance.identify(null);\r\n  }\r\n\r\n  static getIdentityData() {\r\n    return LogRocketService.identityData;\r\n  }\r\n}\r\n\r\nexport default LogRocketService;\r\n"]},"metadata":{},"sourceType":"module"}