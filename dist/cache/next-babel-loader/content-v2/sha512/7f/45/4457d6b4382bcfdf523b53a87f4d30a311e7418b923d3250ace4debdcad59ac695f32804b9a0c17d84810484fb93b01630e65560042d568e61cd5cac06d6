{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\MarkdownTextarea\\\\MarkdownTextarea.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { faMarkdown } from '@fortawesome/free-brands-svg-icons';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'; // import { IMAGES_MIME_TYPES } from '~/services/Constants';\n// import { filterFiles } from '~/services/utils/FileUtils';\n// import SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\n\nimport styles from './MarkdownTextarea.module.scss';\n\nfunction MarkdownTextarea(_ref) {\n  _s();\n\n  var _ref$title = _ref.title,\n      title = _ref$title === void 0 ? 'Modifică' : _ref$title,\n      _ref$markdown = _ref.markdown,\n      markdown = _ref$markdown === void 0 ? '' : _ref$markdown,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$initialTab = _ref.initialTab,\n      initialTab = _ref$initialTab === void 0 ? 'EDIT' : _ref$initialTab,\n      onInput = _ref.onInput;\n  var previewRef = useRef(null);\n  var textareaRef = useRef(null); // const fileInputRef = useRef<HTMLInputElement>(null);\n\n  var _useState = useState(initialTab === 'PREVIEW'),\n      isPreview = _useState[0],\n      setIsPreview = _useState[1];\n\n  var _useState2 = useState(false),\n      isFechingMarked = _useState2[0],\n      setIsFetchingMarked = _useState2[1]; // const [isUploading, setIsUploading] = useState(false);\n\n\n  var textareaInput = function textareaInput(e) {\n    var text = e.target.value;\n    onInput(text);\n  }; // const fileInput = (e: React.ChangeEvent<HTMLInputElement>) => uploadFiles([...e.target.files]);\n  // const uploadFiles = async (files: File[]) => {\n  //   const validFiles = filterFiles(files, IMAGES_MIME_TYPES);\n  //   if (!validFiles.length) {\n  //     return;\n  //   }\n  //   setIsUploading(true);\n  //   const cursorPosition = textareaRef.current.selectionStart;\n  //   try {\n  //     await onUpload(validFiles, cursorPosition);\n  //   } catch (err) {\n  //     SweetAlertService.toast({\n  //       text: err.message || 'Oops! Nu am putut încărca poza ta. Încearcă din nou!',\n  //       type: 'error',\n  //     });\n  //   } finally {\n  //     setIsUploading(false);\n  //     fileInputRef.current.value = null;\n  //   }\n  // };\n  // const paste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\n  //   const first = e.clipboardData.items[0];\n  //   if (first?.kind === 'file') {\n  //     uploadFiles([first.getAsFile()]);\n  //   }\n  // };\n\n\n  useEffect(function () {\n    if (isPreview) {\n      setIsFetchingMarked(true);\n      import('marked').then(function (module) {\n        var marked = module[\"default\"];\n        console.log(previewRef.current);\n        previewRef.current.innerHTML = marked(markdown);\n      })[\"catch\"](function (err) {\n        previewRef.current.innerHTML = '<p style=\"color: red;\"> Oops! Verifică conexiunea la net și încearcă din nou </p>';\n      })[\"finally\"](function () {\n        return setIsFetchingMarked(false);\n      });\n    }\n  }, [isPreview]);\n  return __jsx(\"div\", {\n    className: \"\".concat(styles['markdown-textarea'], \" \").concat(className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, __jsx(\"label\", {\n    className: \"\".concat(styles.label, \" \").concat(isPreview ? '' : \"\".concat(styles['is--checked'])),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, title, __jsx(\"input\", {\n    checked: !isPreview,\n    onChange: function onChange() {\n      return setIsPreview(false);\n    },\n    type: \"radio\",\n    name: \"nav\",\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  })), __jsx(\"label\", {\n    className: \"\".concat(styles.label, \" \").concat(isPreview ? \"\".concat(styles['is--checked']) : ''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, isFechingMarked ? __jsx(FontAwesomeIcon, {\n    width: \"20\",\n    className: \"text-white rotate\",\n    icon: faSpinner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }) : 'Preview', __jsx(\"input\", {\n    checked: isPreview,\n    onChange: function onChange() {\n      return setIsPreview(true);\n    },\n    type: \"radio\",\n    name: \"nav\",\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(\"textarea\", {\n    placeholder: \"Editeaz\\u0103 folosing Markdown...\",\n    ref: textareaRef,\n    disabled: isPreview || disabled,\n    className: \"\".concat(isPreview ? 'd-none absolute' : ''),\n    value: markdown,\n    rows: 10,\n    onChange: textareaInput //  onPaste={paste}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    ref: previewRef,\n    className: \"\".concat(isPreview ? '' : 'd-none absolute'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  })), !disabled && __jsx(\"footer\", {\n    className: \"text-right relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: faMarkdown,\n    width: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }))));\n}\n\n_s(MarkdownTextarea, \"vXq8UD6RHTP7ILFpvW3F9aJC+aY=\");\n\n_c = MarkdownTextarea;\nexport default MarkdownTextarea;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarkdownTextarea\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/MarkdownTextarea/MarkdownTextarea.tsx"],"names":["React","useEffect","useRef","useState","faMarkdown","faSpinner","FontAwesomeIcon","styles","MarkdownTextarea","title","markdown","className","disabled","initialTab","onInput","previewRef","textareaRef","isPreview","setIsPreview","isFechingMarked","setIsFetchingMarked","textareaInput","e","text","target","value","then","module","marked","console","log","current","innerHTML","err","label"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { faMarkdown } from '@fortawesome/free-brands-svg-icons';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { IMAGES_MIME_TYPES } from '~/services/Constants';\r\n// import { filterFiles } from '~/services/utils/FileUtils';\r\n// import SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\n\r\nimport styles from './MarkdownTextarea.module.scss';\r\n\r\ninterface Props {\r\n  title?: string;\r\n  markdown?: string;\r\n  className?: string;\r\n  disabled?: boolean;\r\n  initialTab?: 'EDIT' | 'PREVIEW';\r\n  onInput: (text: string) => void;\r\n // onUpload: (files: File[], cursorPosition: number) => void;\r\n}\r\n\r\nfunction MarkdownTextarea({\r\n  title = 'Modifică',\r\n  markdown = '',\r\n  className = '',\r\n  disabled = false,\r\n  initialTab = 'EDIT',\r\n  onInput,\r\n  // onUpload,\r\n}: Props) {\r\n  const previewRef = useRef(null);\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  // const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const [isPreview, setIsPreview] = useState(initialTab === 'PREVIEW');\r\n  const [isFechingMarked, setIsFetchingMarked] = useState(false);\r\n  // const [isUploading, setIsUploading] = useState(false);\r\n\r\n  const textareaInput = (e) => {\r\n    const text = e.target.value;\r\n    onInput(text);\r\n  };\r\n\r\n  // const fileInput = (e: React.ChangeEvent<HTMLInputElement>) => uploadFiles([...e.target.files]);\r\n\r\n  // const uploadFiles = async (files: File[]) => {\r\n  //   const validFiles = filterFiles(files, IMAGES_MIME_TYPES);\r\n\r\n  //   if (!validFiles.length) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   setIsUploading(true);\r\n  //   const cursorPosition = textareaRef.current.selectionStart;\r\n\r\n  //   try {\r\n  //     await onUpload(validFiles, cursorPosition);\r\n  //   } catch (err) {\r\n  //     SweetAlertService.toast({\r\n  //       text: err.message || 'Oops! Nu am putut încărca poza ta. Încearcă din nou!',\r\n  //       type: 'error',\r\n  //     });\r\n  //   } finally {\r\n  //     setIsUploading(false);\r\n  //     fileInputRef.current.value = null;\r\n  //   }\r\n  // };\r\n\r\n  // const paste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\r\n  //   const first = e.clipboardData.items[0];\r\n\r\n  //   if (first?.kind === 'file') {\r\n  //     uploadFiles([first.getAsFile()]);\r\n  //   }\r\n  // };\r\n\r\n  useEffect(() => {\r\n    if (isPreview) {\r\n      setIsFetchingMarked(true);\r\n      import('marked')\r\n        .then((module) => {\r\n          const marked = module.default;\r\n          console.log(previewRef.current);\r\n\r\n          previewRef.current.innerHTML = marked(markdown);\r\n        })\r\n        .catch((err) => {\r\n          previewRef.current.innerHTML = '<p style=\"color: red;\"> Oops! Verifică conexiunea la net și încearcă din nou </p>';\r\n        })\r\n        .finally(() => setIsFetchingMarked(false));\r\n    }\r\n  }, [isPreview]);\r\n\r\n  return (\r\n    <div className={`${styles['markdown-textarea']} ${className}`}>\r\n      <label className={`${styles.label} ${isPreview ? '' : `${styles['is--checked']}`}`}>\r\n        {title}\r\n        <input checked={!isPreview} onChange={() => setIsPreview(false)} type=\"radio\" name=\"nav\" hidden />\r\n      </label>\r\n      <label className={`${styles.label} ${isPreview ? `${styles['is--checked']}` : ''}`}>\r\n        {isFechingMarked\r\n          ? <FontAwesomeIcon width=\"20\" className=\"text-white rotate\" icon={faSpinner} />\r\n          : 'Preview'}\r\n        <input checked={isPreview} onChange={() => setIsPreview(true)} type=\"radio\" name=\"nav\" hidden />\r\n      </label>\r\n\r\n      <div>\r\n        <div className=\"relative\">\r\n          <textarea\r\n            placeholder=\"Editează folosing Markdown...\"\r\n            ref={textareaRef}\r\n            disabled={isPreview || disabled}\r\n            className={`${isPreview ? 'd-none absolute' : ''}`}\r\n            value={markdown}\r\n            rows={10}\r\n            onChange={textareaInput}\r\n           //  onPaste={paste}\r\n          />\r\n          <div ref={previewRef} className={`${isPreview ? '' : 'd-none absolute'}`} />\r\n        </div>\r\n        {!disabled && (\r\n        <footer className=\"text-right relative\">\r\n          {/* { {!isPreview &&\r\n            <label className=\"absolute\">\r\n              {isUploading ? <FontAwesomeIcon className=\"rotate\" icon={faSpinner} /> : 'Adaugă imagini'}\r\n              <input\r\n                ref={fileInputRef}\r\n                 disabled={isUploading || disabled}\r\n                type=\"file\"\r\n                multiple={false}\r\n                accept={IMAGES_MIME_TYPES.join(',')}\r\n                onChange={fileInput}\r\n                hidden\r\n              />\r\n           </label>\r\n          )} */}\r\n\r\n          <FontAwesomeIcon icon={faMarkdown} width=\"20\" />\r\n        </footer>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MarkdownTextarea;\r\n"]},"metadata":{},"sourceType":"module"}