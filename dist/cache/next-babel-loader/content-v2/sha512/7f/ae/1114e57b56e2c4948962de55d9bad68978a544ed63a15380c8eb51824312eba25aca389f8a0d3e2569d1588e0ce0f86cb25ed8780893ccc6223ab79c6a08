{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\ExercisesPage\\\\ExercisesPage.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getLessonById } from '~/services/Constants';\nimport ExerciseService from '~/services/Exercise.service';\nimport LessonExerciseService from '~/services/LessonExercise.service';\nimport ExercisePreview from '../ExercisePreview';\nimport PageContainer from '../PageContainer';\nimport Spinner from '../Spinner';\nimport { SUBMISSION_STATUS } from '~/../shared/SharedConstants';\nimport styles from './ExercisesPage.module.scss';\n\nfunction ExercisesPage({\n  user\n}) {\n  const {\n    0: submissions,\n    1: setSubmissions\n  } = useState(undefined);\n  const {\n    0: lessonExercises,\n    1: setLessonExercises\n  } = useState(undefined);\n  const isLoggedIn = !!user.info;\n  useEffect(() => {\n    LessonExerciseService.getAllLessonExercises().then(exercises => setLessonExercises(exercises)).catch(err => console.error(err));\n\n    if (isLoggedIn) {\n      ExerciseService.getSolvedExercises().then(resp => setSubmissions(resp)).catch(err => console.error(err));\n    } else {\n      setSubmissions([]);\n    }\n  }, []); // merge submission & exercise data to show\n  // ExercisePreview component together with submitted/preview data\n\n  const mergedData = {};\n\n  if (submissions && lessonExercises) {\n    lessonExercises.forEach(ex => {\n      const {\n        lesson\n      } = ex;\n      const matchedSubmission = submissions.find(sub => sub.exercise._id === ex._id);\n      mergedData[lesson] = mergedData[lesson] || [];\n\n      if (matchedSubmission) {\n        mergedData[lesson].push(matchedSubmission);\n      } else {\n        mergedData[lesson].push({\n          _id: ex._id,\n          exercise: ex,\n          feedbacks: [],\n          status: null,\n          readOnly: false\n        });\n      }\n    });\n  }\n\n  return __jsx(PageContainer, {\n    className: styles['exercises-page'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \" Exerci\\u021Bii \"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Rezolv\\u0103 exerci\\u021Biile de mai jos iar noi \\xEE\\u021Bi vom trimite feedback pentru fiecare.\"), (!lessonExercises || !submissions) && __jsx(Spinner, {\n    showText: true,\n    text: \"\\xCEnc\\u0103rc\\u0103m exerci\\u021Biile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 46\n    }\n  }), Object.keys(mergedData).map(lesson => __jsx(\"section\", {\n    className: styles['lesson-section'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, getLessonById(lesson).type), getLessonById(lesson).title), __jsx(\"div\", {\n    className: styles['exercises-wrapper'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, mergedData[lesson].map(submission => __jsx(ExercisePreview, {\n    key: submission._id,\n    exercise: submission.exercise,\n    href: `rezolva/${submission.exercise._id}`,\n    viewMode: \"STUDENT\",\n    feedbackCount: submission.feedbacks.filter(f => f.type === 'improvement').length,\n    isApproved: submission.status === SUBMISSION_STATUS.DONE,\n    readOnly: [SUBMISSION_STATUS.AWAITING_REVIEW, SUBMISSION_STATUS.DONE].includes(submission.status),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nconst connector = connect(mapStateToProps);\nexport default connector(ExercisesPage);","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/ExercisesPage/ExercisesPage.tsx"],"names":["React","useEffect","useState","connect","getLessonById","ExerciseService","LessonExerciseService","ExercisePreview","PageContainer","Spinner","SUBMISSION_STATUS","styles","ExercisesPage","user","submissions","setSubmissions","undefined","lessonExercises","setLessonExercises","isLoggedIn","info","getAllLessonExercises","then","exercises","catch","err","console","error","getSolvedExercises","resp","mergedData","forEach","ex","lesson","matchedSubmission","find","sub","exercise","_id","push","feedbacks","status","readOnly","Object","keys","map","type","title","submission","filter","f","length","DONE","AWAITING_REVIEW","includes","mapStateToProps","state","connector"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { Submission } from '~/redux/exercise-submissions/types';\r\nimport { Exercise } from '~/redux/user/types';\r\nimport { getLessonById } from '~/services/Constants';\r\nimport ExerciseService from '~/services/Exercise.service';\r\nimport LessonExerciseService from '~/services/LessonExercise.service';\r\nimport ExercisePreview from '../ExercisePreview';\r\nimport PageContainer from '../PageContainer';\r\nimport Spinner from '../Spinner';\r\nimport { SUBMISSION_STATUS } from '~/../shared/SharedConstants';\r\nimport { RootState } from '~/redux/root.reducer';\r\n\r\nimport styles from './ExercisesPage.module.scss';\r\n\r\nfunction ExercisesPage({ user }: ConnectedProps<typeof connector>) {\r\n  const [submissions, setSubmissions] = useState<Submission[]>(undefined);\r\n  const [lessonExercises, setLessonExercises] = useState<Exercise[]>(undefined);\r\n\r\n  const isLoggedIn = !!user.info;\r\n\r\n  useEffect(() => {\r\n    LessonExerciseService\r\n      .getAllLessonExercises()\r\n      .then((exercises) => setLessonExercises(exercises))\r\n      .catch((err) => console.error(err));\r\n\r\n    if (isLoggedIn) {\r\n      ExerciseService\r\n        .getSolvedExercises()\r\n        .then((resp) => setSubmissions(resp))\r\n        .catch((err) => console.error(err));\r\n    } else {\r\n      setSubmissions([]);\r\n    }\r\n  }, []);\r\n\r\n  // merge submission & exercise data to show\r\n  // ExercisePreview component together with submitted/preview data\r\n  const mergedData = {};\r\n  if (submissions && lessonExercises) {\r\n    lessonExercises.forEach((ex) => {\r\n      const { lesson } = ex;\r\n      const matchedSubmission = submissions.find((sub) => sub.exercise._id === ex._id);\r\n\r\n      mergedData[lesson] = mergedData[lesson] || [];\r\n      if (matchedSubmission) {\r\n        mergedData[lesson].push(matchedSubmission);\r\n      } else {\r\n        mergedData[lesson].push({\r\n          _id: ex._id,\r\n          exercise: ex,\r\n          feedbacks: [],\r\n          status: null,\r\n          readOnly: false,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <PageContainer className={styles['exercises-page']}>\r\n      <h1> Exerciții </h1>\r\n      <p>\r\n        Rezolvă exercițiile de mai jos iar noi îți vom trimite feedback\r\n        pentru fiecare.\r\n      </p>\r\n      {(!lessonExercises || !submissions) && <Spinner showText text=\"Încărcăm exercițiile\" />}\r\n      {Object.keys(mergedData).map((lesson) => (\r\n        <section className={styles['lesson-section']}>\r\n          <h2>\r\n            <span>\r\n              {getLessonById(lesson).type}\r\n            </span>\r\n            {getLessonById(lesson).title}\r\n          </h2>\r\n          <div className={styles['exercises-wrapper']}>\r\n            {mergedData[lesson].map((submission) => (\r\n              <ExercisePreview\r\n                key={submission._id}\r\n                exercise={submission.exercise}\r\n                href={`rezolva/${submission.exercise._id}`}\r\n                viewMode=\"STUDENT\"\r\n                feedbackCount={submission.feedbacks.filter((f) => f.type === 'improvement').length}\r\n                isApproved={submission.status === SUBMISSION_STATUS.DONE}\r\n                readOnly={[\r\n                  SUBMISSION_STATUS.AWAITING_REVIEW,\r\n                  SUBMISSION_STATUS.DONE,\r\n                ].includes(submission.status)}\r\n              />\r\n            ))}\r\n          </div>\r\n        </section>\r\n      ))}\r\n    </PageContainer>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state: RootState) {\r\n  return {\r\n    user: state.user,\r\n  };\r\n}\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport default connector(ExercisesPage);\r\n"]},"metadata":{},"sourceType":"module"}