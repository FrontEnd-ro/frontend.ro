{"ast":null,"code":"import { uuid } from '../Utils';\nimport FolderStructure from './FolderStructure';\nexport function extractExtension(fileName) {\n  const parts = fileName.split('.');\n\n  if (parts.length === 1) {\n    return '';\n  }\n\n  return parts.pop();\n}\nexport function filterFiles(files, mimeTypes = [], extensions = []) {\n  return files.filter(file => {\n    if (mimeTypes.includes(file.type)) {\n      return true;\n    }\n\n    if (extensions.includes(extractExtension(file.name))) {\n      return true;\n    }\n\n    return false;\n  });\n}\nexport async function fsEntriesToFolderStructure(entries) {\n  const fileSystemUtils = await import('file-system-utils');\n  const {\n    toFolderStructure\n  } = fileSystemUtils;\n  return toFolderStructure(entries, entryToTextMiddleware).then(structure => new FolderStructure(structure));\n}\nexport function filesToFolderStructure(files) {\n  // eslint-disable-next-line no-param-reassign\n  files = [...files].filter(f => f.size > 0);\n  return Promise.all(files.map(async file => ({\n    name: file.name,\n    key: uuid(),\n    content: await file.text()\n  }))).then(files => new FolderStructure({\n    folders: [],\n    files\n  }));\n}\n\nfunction entryToTextMiddleware(entry) {\n  return new Promise(resolve => {\n    entry.file(file => {\n      resolve(file.text().then(textContent => ({\n        name: file.name,\n        key: uuid(),\n        content: textContent\n      })));\n    }, error => {\n      console.error('Error when processing FileEntry:', error);\n      resolve(null);\n    });\n  });\n}\n\nexport function cropImage(src) {\n  const image = new Image();\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  return new Promise((resolve, reject) => {\n    image.onload = () => {\n      const {\n        width,\n        height\n      } = image;\n      const size = Math.min(width, height);\n      canvas.width = size;\n      canvas.height = size;\n      ctx.drawImage(image, size - width, size - height, width, height);\n      canvas.toBlob(blob => {\n        resolve(blob);\n      }, 'image/jpeg', 1);\n    };\n\n    image.onerror = () => reject(new Error('Failed to crop image'));\n\n    image.src = src;\n  });\n}\nexport function loadImage(src) {\n  const image = new Image();\n  return new Promise((resolve, reject) => {\n    image.addEventListener('load', resolve);\n    image.addEventListener('error', reject);\n    image.src = src;\n  });\n}","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/utils/FileUtils.ts"],"names":["uuid","FolderStructure","extractExtension","fileName","parts","split","length","pop","filterFiles","files","mimeTypes","extensions","filter","file","includes","type","name","fsEntriesToFolderStructure","entries","fileSystemUtils","toFolderStructure","entryToTextMiddleware","then","structure","filesToFolderStructure","f","size","Promise","all","map","key","content","text","folders","entry","resolve","textContent","error","console","cropImage","src","image","Image","canvas","document","createElement","ctx","getContext","reject","onload","width","height","Math","min","drawImage","toBlob","blob","onerror","Error","loadImage","addEventListener"],"mappings":"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","sourcesContent":["import { uuid } from '../Utils';\r\nimport FolderStructure from './FolderStructure';\r\n\r\nexport function extractExtension(fileName: string) {\r\n  const parts = fileName.split('.');\r\n  if (parts.length === 1) {\r\n    return '';\r\n  }\r\n\r\n  return parts.pop();\r\n}\r\n\r\nexport function filterFiles(\r\n  files: File[],\r\n  mimeTypes: string[] = [],\r\n  extensions: string[] = [],\r\n) {\r\n  return files.filter((file) => {\r\n    if (mimeTypes.includes(file.type)) {\r\n      return true;\r\n    }\r\n\r\n    if (extensions.includes(extractExtension(file.name))) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  });\r\n}\r\n\r\nexport async function fsEntriesToFolderStructure(entries) {\r\n  const fileSystemUtils = await import('file-system-utils');\r\n  const { toFolderStructure } = fileSystemUtils;\r\n\r\n  return toFolderStructure(entries, entryToTextMiddleware)\r\n    .then((structure) => new FolderStructure(structure));\r\n}\r\n\r\nexport function filesToFolderStructure(files) {\r\n  // eslint-disable-next-line no-param-reassign\r\n  files = [...files].filter((f) => f.size > 0);\r\n\r\n  return Promise\r\n    .all(files.map(async (file) => ({\r\n      name: file.name,\r\n      key: uuid(),\r\n      content: await file.text(),\r\n    })))\r\n    .then((files) => (new FolderStructure({\r\n      folders: [],\r\n      files,\r\n    })));\r\n}\r\n\r\nfunction entryToTextMiddleware(entry) {\r\n  return new Promise((resolve) => {\r\n    entry.file((file) => {\r\n      resolve(file.text().then((textContent) => ({\r\n        name: file.name,\r\n        key: uuid(),\r\n        content: textContent,\r\n      })));\r\n    }, (error) => {\r\n      console.error('Error when processing FileEntry:', error);\r\n      resolve(null);\r\n    });\r\n  });\r\n}\r\n\r\nexport function cropImage(src: string): Promise<Blob> {\r\n  const image = new Image();\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  return new Promise((resolve, reject) => {\r\n    image.onload = () => {\r\n      const { width, height } = image;\r\n      const size = Math.min(width, height);\r\n\r\n      canvas.width = size;\r\n      canvas.height = size;\r\n\r\n      ctx.drawImage(image, size - width, size - height, width, height);\r\n\r\n      canvas.toBlob((blob) => {\r\n        resolve(blob);\r\n      }, 'image/jpeg', 1);\r\n    };\r\n\r\n    image.onerror = () => reject(new Error('Failed to crop image'));\r\n\r\n    image.src = src;\r\n  });\r\n}\r\n\r\nexport function loadImage(src: string) {\r\n  const image = new Image();\r\n  return new Promise((resolve, reject) => {\r\n    image.addEventListener('load', resolve);\r\n    image.addEventListener('error', reject);\r\n\r\n    image.src = src;\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}