{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\ExercisePreview\\\\ExercisePreview.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLock, faPlay } from '@fortawesome/free-solid-svg-icons';\nimport styles from './ExercisePreview.module.scss';\nimport Markdown from '../Markdown';\n\nfunction ExercisePreview({\n  href,\n  viewMode,\n  isPrivate = false,\n  readOnly,\n  feedbackCount,\n  isApproved,\n  exercise\n}) {\n  const {\n    btnText,\n    infoMessage\n  } = getFooterTexts(viewMode, feedbackCount, readOnly, isApproved);\n  let className = `${styles['exercise-preview']} bg-white rounded-md`;\n\n  if (isApproved) {\n    className += ` ${styles['is--done']}`;\n  }\n\n  if (!isApproved && readOnly) {\n    className += ` ${styles['is--waiting']}`;\n  }\n\n  if (feedbackCount > 0) {\n    className += ` ${styles['has--issues']}`;\n  }\n\n  return __jsx(\"div\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(\"header\", {\n    className: \"text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, isPrivate && __jsx(FontAwesomeIcon, {\n    className: \"text-grey\",\n    width: \"24\",\n    icon: faLock,\n    title: \"Exerci\\u021Biu privat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 23\n    }\n  })), __jsx(Markdown, {\n    className: `${styles.body} relative overflow-hidden`,\n    markdownString: exercise.body,\n    variant: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), __jsx(\"footer\", {\n    className: \"d-flex align-items-center justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(React.Fragment, null, viewMode === 'STUDENT' && infoMessage && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, infoMessage), (viewMode === 'TEACHER' || !infoMessage) && __jsx(React.Fragment, null, __jsx(Link, {\n    href: `/${exercise.user.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, __jsx(\"a\", {\n    className: styles.avatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, __jsx(\"img\", {\n    src: exercise.user.avatar,\n    alt: \"Author avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 19\n    }\n  }))), __jsx(\"div\", {\n    className: `${styles.tags} truncate d-inline-block`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, exercise.tags.map(t => __jsx(\"span\", {\n    className: \"text-bold\",\n    key: t,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }\n  }, t))))), __jsx(Link, {\n    href: href,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    className: `d-flex btn no-underline ${isApproved || readOnly || feedbackCount > 0 ? 'btn--light' : 'btn--blue'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, btnText, __jsx(FontAwesomeIcon, {\n    width: \"16\",\n    className: \"ml-2\",\n    icon: faPlay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  })))));\n}\n\nfunction getFooterTexts(viewMode, feedbackCount, readOnly, isApproved) {\n  let btnText = viewMode === 'STUDENT' ? 'Rezolvă' : 'Editează';\n  let infoMessage = '';\n\n  if (viewMode === 'STUDENT') {\n    if (readOnly || isApproved) {\n      btnText = 'Vezi exercițiul';\n    } else if (feedbackCount) {\n      btnText = 'Continuă';\n    }\n\n    if (isApproved) {\n      infoMessage = '✔';\n    } else if (feedbackCount) {\n      infoMessage = `${feedbackCount} problem${feedbackCount > 1 ? 'e' : 'ă'} de rezolvat`;\n    } else if (readOnly) {\n      infoMessage = 'În așteptarea feedback-ului';\n    }\n  }\n\n  return {\n    btnText,\n    infoMessage\n  };\n}\n\nexport default ExercisePreview;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/ExercisePreview/ExercisePreview.tsx"],"names":["React","Link","FontAwesomeIcon","faLock","faPlay","styles","Markdown","ExercisePreview","href","viewMode","isPrivate","readOnly","feedbackCount","isApproved","exercise","btnText","infoMessage","getFooterTexts","className","body","user","username","avatar","tags","map","t"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Link from 'next/link';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faLock, faPlay } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport styles from './ExercisePreview.module.scss';\r\nimport Markdown from '../Markdown';\r\nimport { Exercise } from '~/redux/user/types';\r\n\r\nexport type ExerciseViewMode = 'STUDENT' | 'TEACHER'\r\n\r\ninterface Props {\r\n  href: string;\r\n  viewMode: ExerciseViewMode;\r\n  isPrivate?: boolean;\r\n  exercise: Exercise,\r\n  feedbackCount: number;\r\n  isApproved: boolean;\r\n\r\n  // Do we need this?\r\n  readOnly: boolean;\r\n}\r\n\r\nfunction ExercisePreview({\r\n  href,\r\n  viewMode,\r\n  isPrivate = false,\r\n  readOnly,\r\n  feedbackCount,\r\n  isApproved,\r\n  exercise,\r\n}: Props) {\r\n  const { btnText, infoMessage } = getFooterTexts(viewMode, feedbackCount, readOnly, isApproved);\r\n\r\n  let className = `${styles['exercise-preview']} bg-white rounded-md`;\r\n  if (isApproved) {\r\n    className += ` ${styles['is--done']}`;\r\n  }\r\n  if (!isApproved && readOnly) {\r\n    className += ` ${styles['is--waiting']}`;\r\n  }\r\n  if (feedbackCount > 0) {\r\n    className += ` ${styles['has--issues']}`;\r\n  }\r\n\r\n  return (\r\n    <div className={className}>\r\n      <header className=\"text-right\">\r\n        {isPrivate && <FontAwesomeIcon className=\"text-grey\" width=\"24\" icon={faLock} title=\"Exercițiu privat\" />}\r\n      </header>\r\n      <Markdown\r\n        className={`${styles.body} relative overflow-hidden`}\r\n        markdownString={exercise.body}\r\n        variant=\"transparent\"\r\n      />\r\n      <footer className=\"d-flex align-items-center justify-content-between\">\r\n        <>\r\n          {viewMode === 'STUDENT' && infoMessage && (\r\n            <span>\r\n              {infoMessage}\r\n            </span>\r\n          )}\r\n          {(viewMode === 'TEACHER' || !infoMessage) && (\r\n            <>\r\n              <Link href={`/${exercise.user.username}`}>\r\n                <a className={styles.avatar}>\r\n                  <img src={exercise.user.avatar} alt=\"Author avatar\" />\r\n                </a>\r\n              </Link>\r\n              <div className={`${styles.tags} truncate d-inline-block`}>\r\n                {exercise.tags.map((t) => (\r\n                  <span className=\"text-bold\" key={t}>\r\n                    {t}\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n        <Link href={href}>\r\n          <a className={`d-flex btn no-underline ${isApproved || readOnly || feedbackCount > 0 ? 'btn--light' : 'btn--blue'}`}>\r\n            {btnText}\r\n            <FontAwesomeIcon width=\"16\" className=\"ml-2\" icon={faPlay} />\r\n          </a>\r\n        </Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getFooterTexts(\r\n  viewMode: ExerciseViewMode,\r\n  feedbackCount: number,\r\n  readOnly: boolean,\r\n  isApproved: boolean,\r\n) {\r\n  let btnText = viewMode === 'STUDENT' ? 'Rezolvă' : 'Editează';\r\n  let infoMessage = '';\r\n\r\n  if (viewMode === 'STUDENT') {\r\n    if (readOnly || isApproved) {\r\n      btnText = 'Vezi exercițiul';\r\n    } else if (feedbackCount) {\r\n      btnText = 'Continuă';\r\n    }\r\n\r\n    if (isApproved) {\r\n      infoMessage = '✔';\r\n    } else if (feedbackCount) {\r\n      infoMessage = `${feedbackCount} problem${feedbackCount > 1 ? 'e' : 'ă'} de rezolvat`;\r\n    } else if (readOnly) {\r\n      infoMessage = 'În așteptarea feedback-ului';\r\n    }\r\n  }\r\n\r\n  return {\r\n    btnText,\r\n    infoMessage,\r\n  };\r\n}\r\n\r\nexport default ExercisePreview;\r\n"]},"metadata":{},"sourceType":"module"}