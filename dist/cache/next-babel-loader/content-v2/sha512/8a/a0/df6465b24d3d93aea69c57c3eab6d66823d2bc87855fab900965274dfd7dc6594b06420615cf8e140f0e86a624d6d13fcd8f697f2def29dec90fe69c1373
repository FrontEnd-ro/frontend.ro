{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\LivePreviewDemo\\\\LivePreviewDemo.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from 'react';\nimport BasicEditorLazy from '../Editor/BasicEditor/BasicEditor.lazy';\nimport FolderStructure from '~/services/utils/FolderStructure';\nimport { uuid } from '~/services/Utils';\nimport IframeDemo from './IframeDemo';\nexport default function LivePreviewDemo(_ref) {\n  _s();\n\n  var code = _ref.code,\n      language = _ref.language;\n  var codeRef = useRef(null);\n\n  var _useState = useState(code),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var defaultFile = {\n    key: uuid(),\n    name: \"demo.\".concat(language),\n    content: code\n  };\n  /**\r\n  ➤ Calling setValue in onEditorChange, causes a re-render of the component which recreates\r\n  folderStructure everytime\r\n  ➤ folderStructure is sent to editor this way\r\n  ➤ something crashes in the editor\r\n  So to avoid this to happen, we use React.useMemo() to create folderStructure only once,\r\n  at the beginning and we'll have the same value of it.\r\n  */\n\n  var folderStructure = React.useMemo(function () {\n    return new FolderStructure({\n      folders: [],\n      files: [defaultFile]\n    });\n  }, []);\n\n  var onEditorChange = function onEditorChange(e) {\n    var content = e.files[0].content;\n    setValue(content);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(BasicEditorLazy // ref={codeRef}\n  , {\n    folderStructure: folderStructure,\n    onChange: onEditorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), __jsx(IframeDemo, {\n    sourceCode: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(LivePreviewDemo, \"e2P9l/Kw7TtfcR8y4jkCAiZU+jI=\");\n\n_c = LivePreviewDemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"LivePreviewDemo\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/LivePreviewDemo/LivePreviewDemo.tsx"],"names":["React","useRef","useState","BasicEditorLazy","FolderStructure","uuid","IframeDemo","LivePreviewDemo","code","language","codeRef","value","setValue","defaultFile","key","name","content","folderStructure","useMemo","folders","files","onEditorChange","e"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AAEA,OAAOC,eAAP,MAA4B,wCAA5B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AAEA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AAeA,eAAe,SAASC,eAAT,OAAoD;AAAA;;AAAA,MAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AACjE,MAAMC,OAAO,GAAGT,MAAM,CAAC,IAAD,CAAtB;;AADiE,kBAEvCC,QAAQ,CAACM,IAAD,CAF+B;AAAA,MAE1DG,KAF0D;AAAA,MAEnDC,QAFmD;;AAIjE,MAAMC,WAAwB,GAAG;AAC/BC,IAAAA,GAAG,EAAET,IAAI,EADsB;AAE/BU,IAAAA,IAAI,iBAAUN,QAAV,CAF2B;AAG/BO,IAAAA,OAAO,EAAER;AAHsB,GAAjC;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,MAAMS,eAAe,GAAGjB,KAAK,CAACkB,OAAN,CACtB;AAAA,WAAM,IAAId,eAAJ,CAAoB;AACxBe,MAAAA,OAAO,EAAE,EADe;AAExBC,MAAAA,KAAK,EAAE,CAACP,WAAD;AAFiB,KAApB,CAAN;AAAA,GADsB,EAKtB,EALsB,CAAxB;;AAQA,MAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAO;AAAA,QACpBN,OADoB,GACRM,CAAC,CAACF,KAAF,CAAQ,CAAR,CADQ,CACpBJ,OADoB;AAG5BJ,IAAAA,QAAQ,CAACI,OAAD,CAAR;AACD,GAJD;;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD,CACC;AADD;AAEE,IAAA,eAAe,EAAEC,eAFnB;AAGE,IAAA,QAAQ,EAAEI,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,MAAC,UAAD;AAAY,IAAA,UAAU,EAAEV,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD;;GA3CuBJ,e;;KAAAA,e","sourcesContent":["import React, { useRef, useState } from 'react';\r\n\r\nimport BasicEditorLazy from '../Editor/BasicEditor/BasicEditor.lazy';\r\nimport FolderStructure from '~/services/utils/FolderStructure';\r\n\r\nimport { uuid } from '~/services/Utils';\r\n\r\nimport IframeDemo from './IframeDemo';\r\n\r\ninterface Props {\r\n  code: string;\r\n  language: Language;\r\n}\r\n\r\ninterface FilePreview {\r\n  key: string;\r\n  name: string;\r\n  content: string;\r\n}\r\n\r\ntype Language = 'html' | 'css' | 'json' | 'javascript';\r\n\r\nexport default function LivePreviewDemo({ code, language }: Props) {\r\n  const codeRef = useRef(null);\r\n  const [value, setValue] = useState(code);\r\n\r\n  const defaultFile: FilePreview = {\r\n    key: uuid(),\r\n    name: `demo.${language}`,\r\n    content: code,\r\n  };\r\n\r\n  /**\r\n  ➤ Calling setValue in onEditorChange, causes a re-render of the component which recreates\r\n  folderStructure everytime\r\n  ➤ folderStructure is sent to editor this way\r\n  ➤ something crashes in the editor\r\n  So to avoid this to happen, we use React.useMemo() to create folderStructure only once,\r\n  at the beginning and we'll have the same value of it.\r\n */\r\n\r\n  const folderStructure = React.useMemo(\r\n    () => new FolderStructure({\r\n      folders: [],\r\n      files: [defaultFile],\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const onEditorChange = (e) => {\r\n    const { content } = e.files[0];\r\n\r\n    setValue(content);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <BasicEditorLazy\r\n       // ref={codeRef}\r\n        folderStructure={folderStructure}\r\n        onChange={onEditorChange}\r\n      />\r\n      <IframeDemo sourceCode={value} />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}