{"ast":null,"code":"import _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Editor\\\\BasicEditor\\\\BasicEditor.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport * as Monaco from '../monaco';\nimport FileIcons from '~/services/utils/FileIcons';\nimport InitForm from '../InitForm/InitForm';\nimport FolderStructure from '~/services/utils/FolderStructure';\nimport MonacoBase from '../Monaco.base';\nimport FileSwitcher from '../FileSwitcher/FileSwitcher';\nimport styles from '../Editor.module.scss'; // extends MonacoBase\n\nvar BasicMonacoEditor = /*#__PURE__*/function (_MonacoBase) {\n  _inherits(BasicMonacoEditor, _MonacoBase);\n\n  var _super = _createSuper(BasicMonacoEditor);\n\n  function BasicMonacoEditor(props) {\n    var _this;\n\n    _classCallCheck(this, BasicMonacoEditor);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"initEditor\", function () {\n      var readOnly = _this.props.readOnly;\n      var _this$state = _this.state,\n          folderStructure = _this$state.folderStructure,\n          selectedFileKey = _this$state.selectedFileKey;\n\n      if (!folderStructure.files.length && !folderStructure.folders.length) {\n        return;\n      }\n\n      var _folderStructure$getF = folderStructure.getFile(selectedFileKey),\n          file = _folderStructure$getF.file;\n\n      _this.editor = Monaco.create(_this.editorRef.current, {\n        readOnly: readOnly,\n        value: file ? file.content : '',\n        scrollBeyondLastLine: false\n      });\n\n      if (file) {\n        _this.onFileSelect(file.key);\n\n        _this.updateLanguageBasedOnFileName(file.name);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onModelChange\", function () {\n      var folderStructure = _this.state.folderStructure;\n      folderStructure.setContent(_this.state.selectedFileKey, _this.editor.getValue());\n\n      _this.setState({\n        folderStructure: folderStructure\n      });\n    });\n\n    _this.state = {\n      folderStructure: new FolderStructure(props.folderStructure)\n    };\n    return _this;\n  }\n\n  _createClass(BasicMonacoEditor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initEditor();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var readOnly = this.props.readOnly;\n      var _this$state2 = this.state,\n          folderStructure = _this$state2.folderStructure,\n          fileSwitcherWidth = _this$state2.fileSwitcherWidth,\n          selectedFileKey = _this$state2.selectedFileKey,\n          isDropable = _this$state2.isDropable;\n      var selectedFile = folderStructure.getFile(selectedFileKey).file;\n      return __jsx(\"div\", {\n        className: \"\\n        \".concat(styles['editor-wrapper'], \"\\n        \").concat(isDropable ? styles['is--dropable'] : '', \"\\n      \"),\n        onDragEnter: this.onDragEnter,\n        onDragLeave: this.onDragLeave,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }, folderStructure.files.length || folderStructure.folders.length ? __jsx(React.Fragment, null, __jsx(FileSwitcher, {\n        maxHeight: 500,\n        folderStructure: folderStructure,\n        selectedFileKey: selectedFileKey,\n        readOnly: readOnly,\n        onFileAdd: this.onFileAdd,\n        onFolderAdd: this.onFolderAdd,\n        onSelect: this.onFileSelect,\n        onFileRename: this.onFileRename,\n        onFolderRename: this.onFolderRename,\n        onFileDelete: this.onFileDelete,\n        onFolderDelete: this.onFolderDelete,\n        onDownload: this.onDownload,\n        onResize: this.onResize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }), __jsx(\"div\", {\n        className: \"\\n                \".concat(styles.editor, \"\\n                \").concat(selectedFileKey ? '' : styles['has--no-selected-file'], \"\\n              \"),\n        style: {\n          width: \"calc(100% - \".concat(fileSwitcherWidth, \"px)\"),\n          maxWidth: \"calc(100% - \".concat(fileSwitcherWidth, \"px)\")\n        },\n        ref: this.editorRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }), selectedFile && __jsx(\"p\", {\n        className: \"\".concat(styles['selected-file'], \" d-flex justify-content-center align-items-center\"),\n        title: selectedFile.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }\n      }, __jsx(\"img\", {\n        width: \"20\",\n        src: FileIcons.getIconUrl(selectedFile.name),\n        alt: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }), __jsx(\"span\", {\n        className: \"ellipsis-overflow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }\n      }, selectedFile.name)), __jsx(\"label\", {\n        className: \"upload-label pin-full d-flex justify-content-center align-items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, __jsx(\"span\", {\n        className: \"icon-check mr-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }\n      }), \"Drop to replace\"), __jsx(\"input\", {\n        className: \"pin-full\",\n        type: \"file\",\n        multiple: true,\n        onChange: this.onReplace,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }\n      }))) : __jsx(InitForm, {\n        createFirstFile: this.createFirstFile,\n        uploadStructure: this.uploadStructure,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return BasicMonacoEditor;\n}(MonacoBase);\n\nexport default BasicMonacoEditor;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/BasicEditor/BasicEditor.tsx"],"names":["React","Monaco","FileIcons","InitForm","FolderStructure","MonacoBase","FileSwitcher","styles","BasicMonacoEditor","props","readOnly","state","folderStructure","selectedFileKey","files","length","folders","getFile","file","editor","create","editorRef","current","value","content","scrollBeyondLastLine","onFileSelect","key","updateLanguageBasedOnFileName","name","setContent","getValue","setState","initEditor","fileSwitcherWidth","isDropable","selectedFile","onDragEnter","onDragLeave","onFileAdd","onFolderAdd","onFileRename","onFolderRename","onFileDelete","onFolderDelete","onDownload","onResize","width","maxWidth","getIconUrl","onReplace","createFirstFile","uploadStructure"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as Monaco from '../monaco';\r\nimport FileIcons from '~/services/utils/FileIcons';\r\nimport InitForm from '../InitForm/InitForm';\r\nimport FolderStructure from '~/services/utils/FolderStructure';\r\nimport MonacoBase from '../Monaco.base';\r\nimport FileSwitcher from '../FileSwitcher/FileSwitcher';\r\n\r\nimport styles from '../Editor.module.scss';\r\n\r\n// extends MonacoBase\r\nclass BasicMonacoEditor extends MonacoBase {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      folderStructure: new FolderStructure(props.folderStructure),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initEditor();\r\n  }\r\n\r\n  initEditor = () => {\r\n    const { readOnly } = this.props;\r\n    const { folderStructure, selectedFileKey } = this.state;\r\n\r\n    if (!folderStructure.files.length && !folderStructure.folders.length) {\r\n      return;\r\n    }\r\n\r\n    let { file } = folderStructure.getFile(selectedFileKey);\r\n\r\n    this.editor = Monaco.create(this.editorRef.current, {\r\n      readOnly,\r\n      value: file ? file.content : '',\r\n      scrollBeyondLastLine: false,\r\n    });\r\n\r\n    if (file) {\r\n      this.onFileSelect(file.key);\r\n      this.updateLanguageBasedOnFileName(file.name);\r\n    }\r\n  }\r\n\r\n  onModelChange = () => {\r\n    const { folderStructure } = this.state;\r\n    folderStructure.setContent(this.state.selectedFileKey, this.editor.getValue());\r\n\r\n    this.setState({ folderStructure });\r\n  }\r\n\r\n  render() {\r\n    const { readOnly } = this.props;\r\n    const {\r\n      folderStructure, fileSwitcherWidth, selectedFileKey, isDropable,\r\n    } = this.state;\r\n    const selectedFile = folderStructure.getFile(selectedFileKey).file;\r\n\r\n    return (\r\n      <div\r\n        className={`\r\n        ${styles['editor-wrapper']}\r\n        ${isDropable ? styles['is--dropable'] : ''}\r\n      `}\r\n        onDragEnter={this.onDragEnter}\r\n        onDragLeave={this.onDragLeave}\r\n      >\r\n        {folderStructure.files.length || folderStructure.folders.length ? (\r\n          <>\r\n            <FileSwitcher\r\n              maxHeight={500}\r\n              folderStructure={folderStructure}\r\n              selectedFileKey={selectedFileKey}\r\n              readOnly={readOnly}\r\n              onFileAdd={this.onFileAdd}\r\n              onFolderAdd={this.onFolderAdd}\r\n              onSelect={this.onFileSelect}\r\n              onFileRename={this.onFileRename}\r\n              onFolderRename={this.onFolderRename}\r\n              onFileDelete={this.onFileDelete}\r\n              onFolderDelete={this.onFolderDelete}\r\n              onDownload={this.onDownload}\r\n              onResize={this.onResize}\r\n            />\r\n            <div\r\n              className={`\r\n                ${styles.editor}\r\n                ${selectedFileKey ? '' : styles['has--no-selected-file']}\r\n              `}\r\n              style={{\r\n                width: `calc(100% - ${fileSwitcherWidth}px)`,\r\n                maxWidth: `calc(100% - ${fileSwitcherWidth}px)`,\r\n              }}\r\n              ref={this.editorRef}\r\n            />\r\n            {selectedFile && (\r\n              <p className={`${styles['selected-file']} d-flex justify-content-center align-items-center`} title={selectedFile.name}>\r\n                <img width=\"20\" src={FileIcons.getIconUrl(selectedFile.name)} alt=\"icon\" />\r\n                <span className=\"ellipsis-overflow\">{selectedFile.name}</span>\r\n              </p>\r\n            )}\r\n            <label className=\"upload-label pin-full d-flex justify-content-center align-items-center\">\r\n              <p>\r\n                <span className=\"icon-check mr-2\" />\r\n                Drop to replace\r\n              </p>\r\n              <input className=\"pin-full\" type=\"file\" multiple onChange={this.onReplace} />\r\n            </label>\r\n          </>\r\n        ) : (\r\n            <InitForm createFirstFile={this.createFirstFile} uploadStructure={this.uploadStructure} />\r\n          )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BasicMonacoEditor;\r\n"]},"metadata":{},"sourceType":"module"}