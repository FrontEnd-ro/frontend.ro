{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\OfferFeedback\\\\OfferFeedback.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef } from 'react';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport PageContainer from '../PageContainer';\nimport Spinner from '../Spinner';\nimport SubmissionService from '~/services/Submission.service';\nimport { timeAgo } from '~/services/Utils';\nimport Markdown from '../Markdown';\nimport CompleteEditorLazy from '../Editor/CompleteEditor/CompleteEditor.lazy';\nimport { FEEDBACK_TYPES } from '~/services/Constants';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport { SUBMISSION_STATUS } from '~/../shared/SharedConstants';\nimport styles from './OfferFeedback.module.scss';\nimport Button from '../Button';\n\nfunction OfferFeedback({\n  exerciseId,\n  username,\n  userInfo\n}) {\n  const router = useRouter();\n  const solutionRef = useRef(null);\n  const {\n    0: fetchError,\n    1: setFetchError\n  } = useState(false);\n  const {\n    0: isSendingFeedback,\n    1: setIsSendingFeedback\n  } = useState(false);\n  const {\n    0: submission,\n    1: setSubmission\n  } = useState(null);\n  const {\n    0: feedbacks,\n    1: setFeedbacks\n  } = useState([]);\n  const isCorrect = feedbacks.find(f => f.type === FEEDBACK_TYPES.IMPROVEMENT) === undefined;\n  const authorNameOrUsername = submission ? submission.user.name || submission.user.username : '';\n  const canOfferFeedback = submission && submission.status === SUBMISSION_STATUS.AWAITING_REVIEW;\n  const folderStructure = React.useMemo(() => {\n    if (!submission) {\n      return null;\n    }\n\n    return JSON.parse(submission.code || submission.exercise.example);\n  }, [submission]);\n  console.log({\n    isCorrect\n  });\n\n  const fetchSubmission = () => {\n    SubmissionService.getUserSubmission(username, exerciseId).then(submission => setSubmission(submission)).catch(err => {\n      console.error('[fetchSubmission]', err);\n      setFetchError(true);\n    });\n  };\n\n  const approveOrSendFeedback = () => {\n    setIsSendingFeedback(true);\n    let ApiToCall;\n\n    if (isCorrect) {\n      ApiToCall = SubmissionService.approveSubmission;\n    } else {\n      ApiToCall = SubmissionService.sendFeedback;\n    }\n\n    ApiToCall(submission._id, feedbacks).then(() => {\n      SweetAlertService.toast({\n        type: 'success',\n        text: isCorrect ? 'Exercițiul aprobat cu succes' : 'Feedback trimis cu succes'\n      });\n      router.push('/exercitii-rezolvate');\n    }).catch(err => {\n      console.error('[OfferFeedback][approveOrSendFeedback]', err);\n      SweetAlertService.toast({\n        type: 'error',\n        text: err.message || `Oops. Se pare că nu am putut ${isCorrect ? 'aprova exercițiul' : 'trimite feedback-ul'}. Încearcă din nou.`\n      });\n    }).finally(() => setIsSendingFeedback(false));\n  };\n\n  useEffect(fetchSubmission, [exerciseId]);\n\n  if (fetchError) {\n    return __jsx(React.Fragment, null, __jsx(PageContainer, {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, \" Oops \\uD83D\\uDE1F\"), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \" Feedback-ul a fost trimis sau submisia nu mai exist\\u0103 \"), __jsx(Link, {\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      className: \"btn btn--blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, \"Navigheaz\\u0103 acas\\u0103\"))));\n  }\n\n  if (!submission) {\n    return __jsx(PageContainer, {\n      className: \"relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, __jsx(Spinner, {\n      showText: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return __jsx(React.Fragment, null, !canOfferFeedback && __jsx(\"p\", {\n    className: `\n          ${styles.banner}\n          ${styles[`banner-${submission.status}`]}\n          text-center \n          text-bold\n        `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, submission.status === SUBMISSION_STATUS.DONE ? 'Exercițiul a fost deja aprobat' : __jsx(React.Fragment, null, authorNameOrUsername, ' ', \"\\xEEnc\\u0103 lucreaz\\u0103 la acest exerci\\u021Biu\")), __jsx(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), __jsx(\"h1\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, \"Feedback pentru\", ' ', __jsx(Link, {\n    href: `/${submission.exercise.user.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, authorNameOrUsername))), __jsx(\"time\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, \"Trimis\", ' ', timeAgo(new Date(submission.submittedAt))), __jsx(Markdown, {\n    markdownString: submission.exercise.body,\n    className: styles.bodyMarkdown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }), __jsx(CompleteEditorLazy, {\n    readOnly: true,\n    askTooltip: true,\n    feedbacks: feedbacks,\n    key: exerciseId,\n    ref: solutionRef,\n    folderStructure: folderStructure,\n    onFeedbackAdded: f => setFeedbacks(f.getAll()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }), canOfferFeedback && __jsx(\"div\", {\n    className: \"text-right my-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    loading: isSendingFeedback,\n    variant: isCorrect ? 'success' : 'blue',\n    onClick: approveOrSendFeedback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, isCorrect ? 'Aprobă exercițiul' : 'Trimite feedback-ul'))));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userInfo: state.user.info\n  };\n}\n\nconst connector = connect(mapStateToProps);\nexport default connector(OfferFeedback);","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/OfferFeedback/OfferFeedback.tsx"],"names":["React","useState","useEffect","useRef","Link","connect","useRouter","PageContainer","Spinner","SubmissionService","timeAgo","Markdown","CompleteEditorLazy","FEEDBACK_TYPES","SweetAlertService","SUBMISSION_STATUS","styles","Button","OfferFeedback","exerciseId","username","userInfo","router","solutionRef","fetchError","setFetchError","isSendingFeedback","setIsSendingFeedback","submission","setSubmission","feedbacks","setFeedbacks","isCorrect","find","f","type","IMPROVEMENT","undefined","authorNameOrUsername","user","name","canOfferFeedback","status","AWAITING_REVIEW","folderStructure","useMemo","JSON","parse","code","exercise","example","console","log","fetchSubmission","getUserSubmission","then","catch","err","error","approveOrSendFeedback","ApiToCall","approveSubmission","sendFeedback","_id","toast","text","push","message","finally","banner","DONE","Date","submittedAt","body","bodyMarkdown","getAll","mapStateToProps","state","info","connector"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Link from 'next/link';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { useRouter } from 'next/router';\r\nimport PageContainer from '../PageContainer';\r\nimport Spinner from '../Spinner';\r\nimport { RootState } from '~/redux/root.reducer';\r\nimport SubmissionService from '~/services/Submission.service';\r\nimport { Submission } from '~/redux/exercise-submissions/types';\r\n\r\nimport { timeAgo } from '~/services/Utils';\r\nimport Markdown from '../Markdown';\r\nimport CompleteEditorLazy from '../Editor/CompleteEditor/CompleteEditor.lazy';\r\nimport { FEEDBACK_TYPES } from '~/services/Constants';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\nimport { SUBMISSION_STATUS } from '~/../shared/SharedConstants';\r\n\r\nimport styles from './OfferFeedback.module.scss';\r\nimport Button from '../Button';\r\n\r\ninterface Props {\r\n  username: string;\r\n  exerciseId: string;\r\n}\r\n\r\nfunction OfferFeedback({\r\n  exerciseId,\r\n  username,\r\n  userInfo,\r\n}: ConnectedProps<typeof connector> & Props) {\r\n  const router = useRouter();\r\n  const solutionRef = useRef(null);\r\n  const [fetchError, setFetchError] = useState(false);\r\n  const [isSendingFeedback, setIsSendingFeedback] = useState(false);\r\n  const [submission, setSubmission] = useState<Submission>(null);\r\n  const [feedbacks, setFeedbacks] = useState([]);\r\n\r\n  const isCorrect = feedbacks.find((f) => f.type === FEEDBACK_TYPES.IMPROVEMENT) === undefined;\r\n  const authorNameOrUsername = submission\r\n    ? (submission.user.name || submission.user.username)\r\n    : '';\r\n  const canOfferFeedback = submission && submission.status === SUBMISSION_STATUS.AWAITING_REVIEW;\r\n\r\n  const folderStructure = React.useMemo(() => {\r\n    if (!submission) {\r\n      return null;\r\n    }\r\n\r\n    return JSON.parse(submission.code || submission.exercise.example);\r\n  }, [submission]);\r\n\r\n  console.log({ isCorrect });\r\n\r\n  const fetchSubmission = () => {\r\n    SubmissionService\r\n      .getUserSubmission(username, exerciseId)\r\n      .then((submission) => setSubmission(submission))\r\n      .catch((err) => {\r\n        console.error('[fetchSubmission]', err);\r\n        setFetchError(true);\r\n      });\r\n  };\r\n\r\n  const approveOrSendFeedback = () => {\r\n    setIsSendingFeedback(true);\r\n\r\n    let ApiToCall;\r\n\r\n    if (isCorrect) {\r\n      ApiToCall = SubmissionService.approveSubmission;\r\n    } else {\r\n      ApiToCall = SubmissionService.sendFeedback;\r\n    }\r\n\r\n    ApiToCall(submission._id, feedbacks)\r\n      .then(() => {\r\n        SweetAlertService.toast({\r\n          type: 'success',\r\n          text: isCorrect ? 'Exercițiul aprobat cu succes' : 'Feedback trimis cu succes',\r\n        });\r\n        router.push('/exercitii-rezolvate');\r\n      })\r\n      .catch((err) => {\r\n        console.error('[OfferFeedback][approveOrSendFeedback]', err);\r\n\r\n        SweetAlertService.toast({\r\n          type: 'error',\r\n          text: err.message || `Oops. Se pare că nu am putut ${isCorrect ? 'aprova exercițiul' : 'trimite feedback-ul'}. Încearcă din nou.`,\r\n        });\r\n      })\r\n      .finally(() => setIsSendingFeedback(false));\r\n  };\r\n\r\n  useEffect(fetchSubmission, [exerciseId]);\r\n\r\n  if (fetchError) {\r\n    return (\r\n      <>\r\n        <PageContainer className=\"text-center\">\r\n          <h1> Oops 😟</h1>\r\n          <h2> Feedback-ul a fost trimis sau submisia nu mai există </h2>\r\n\r\n          <Link href=\"/\">\r\n            <a className=\"btn btn--blue\">\r\n              Navighează acasă\r\n            </a>\r\n          </Link>\r\n        </PageContainer>\r\n      </>\r\n    );\r\n  }\r\n  if (!submission) {\r\n    return (\r\n      <PageContainer className=\"relative\">\r\n        <Spinner showText />\r\n      </PageContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!canOfferFeedback && (\r\n        <p className={`\r\n          ${styles.banner}\r\n          ${styles[`banner-${submission.status}`]}\r\n          text-center \r\n          text-bold\r\n        `}\r\n        >\r\n          {submission.status === SUBMISSION_STATUS.DONE ? (\r\n            'Exercițiul a fost deja aprobat'\r\n          ) : (\r\n            <>\r\n              {authorNameOrUsername}\r\n              {' '}\r\n              încă lucrează la acest exercițiu\r\n            </>\r\n          )}\r\n        </p>\r\n      )}\r\n      <PageContainer>\r\n        <p />\r\n        <h1 className=\"mb-0\">\r\n          Feedback pentru\r\n          {' '}\r\n          <Link href={`/${submission.exercise.user.username}`}>\r\n            <a>\r\n              {authorNameOrUsername}\r\n            </a>\r\n\r\n          </Link>\r\n        </h1>\r\n        <time className=\"m-0\">\r\n          Trimis\r\n          {' '}\r\n          {timeAgo(new Date(submission.submittedAt))}\r\n\r\n        </time>\r\n        <Markdown markdownString={submission.exercise.body} className={styles.bodyMarkdown} />\r\n        <CompleteEditorLazy\r\n          readOnly\r\n          askTooltip\r\n          feedbacks={feedbacks}\r\n          key={exerciseId}\r\n          ref={solutionRef}\r\n          folderStructure={folderStructure}\r\n          onFeedbackAdded={(f) => setFeedbacks(f.getAll())}\r\n        />\r\n        {canOfferFeedback && (\r\n        <div className=\"text-right my-5\">\r\n          <Button\r\n            loading={isSendingFeedback}\r\n            variant={isCorrect ? 'success' : 'blue'}\r\n            onClick={approveOrSendFeedback}\r\n          >\r\n            {isCorrect ? 'Aprobă exercițiul' : 'Trimite feedback-ul'}\r\n          </Button>\r\n        </div>\r\n        )}\r\n      </PageContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state: RootState) {\r\n  return {\r\n    userInfo: state.user.info,\r\n  };\r\n}\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport default connector(OfferFeedback);\r\n"]},"metadata":{},"sourceType":"module"}