{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\MarkdownTextarea\\\\MarkdownTextarea.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { faMarkdown } from '@fortawesome/free-brands-svg-icons';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport styles from './MarkdownTextarea.module.scss';\n\nfunction MarkdownTextarea({\n  title = 'Modifică',\n  markdown = '',\n  className = '',\n  disabled = false,\n  onInput // onUpload,\n\n}) {\n  const previewRef = useRef(null);\n  const textareaRef = useRef(null); // const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const {\n    0: isPreview,\n    1: setIsPreview\n  } = useState(false);\n  const {\n    0: isFechingMarked,\n    1: setIsFetchingMarked\n  } = useState(false); // const [isUploading, setIsUploading] = useState(false);\n\n  const textareaInput = e => {\n    const text = e.target.value;\n    onInput(text);\n  }; // const fileInput = (e: React.ChangeEvent<HTMLInputElement>) => uploadFiles([...e.target.files]);\n  // const uploadFiles = async (files: File[]) => {\n  //   const validFiles = filterFiles(files, IMAGES_MIME_TYPES);\n  //   if (!validFiles.length) {\n  //     return;\n  //   }\n  //   setIsUploading(true);\n  //   const cursorPosition = textareaRef.current.selectionStart;\n  //   try {\n  //     await onUpload(validFiles, cursorPosition);\n  //   } catch (err) {\n  //     SweetAlertService.toast({\n  //       text: err.message || 'Oops! Nu am putut încărca poza ta. Încearcă din nou!',\n  //       type: 'error',\n  //     });\n  //   } finally {\n  //     setIsUploading(false);\n  //     fileInputRef.current.value = null;\n  //   }\n  // };\n  // const paste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\n  //   const first = e.clipboardData.items[0];\n  //   if (first?.kind === 'file') {\n  //     uploadFiles([first.getAsFile()]);\n  //   }\n  // };\n\n\n  useEffect(() => {\n    if (isPreview) {\n      setIsFetchingMarked(true);\n      import('marked').then(module => {\n        const marked = module.default;\n        console.log(previewRef.current);\n        previewRef.current.innerHTML = marked(markdown);\n      }).catch(err => {\n        previewRef.current.innerHTML = '<p style=\"color: red;\"> Oops! Verifică conexiunea la net și încearcă din nou </p>';\n      }).finally(() => setIsFetchingMarked(false));\n    }\n  }, [isPreview]);\n  return __jsx(\"div\", {\n    className: `${styles['markdown-textarea']} ${className}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, __jsx(\"label\", {\n    className: `${styles.label} ${isPreview ? '' : `${styles['is--checked']}`}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, title, __jsx(\"input\", {\n    checked: !isPreview,\n    onChange: () => setIsPreview(false),\n    type: \"radio\",\n    name: \"nav\",\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  })), __jsx(\"label\", {\n    className: `${styles.label} ${isPreview ? `${styles['is--checked']}` : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, isFechingMarked ? __jsx(FontAwesomeIcon, {\n    width: \"20\",\n    className: \"text-white rotate\",\n    icon: faSpinner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }) : 'Preview', __jsx(\"input\", {\n    checked: isPreview,\n    onChange: () => setIsPreview(true),\n    type: \"radio\",\n    name: \"nav\",\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, __jsx(\"textarea\", {\n    placeholder: \"Editeaz\\u0103 folosing Markdown...\",\n    ref: textareaRef,\n    disabled: isPreview,\n    className: `${isPreview ? 'd-none absolute' : ''}`,\n    value: markdown,\n    rows: 10,\n    onChange: textareaInput //  onPaste={paste}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    ref: previewRef,\n    className: `${isPreview ? '' : 'd-none absolute'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })), __jsx(\"footer\", {\n    className: \"text-right relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: faMarkdown,\n    width: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default MarkdownTextarea;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/MarkdownTextarea/MarkdownTextarea.tsx"],"names":["React","useEffect","useRef","useState","faMarkdown","faSpinner","FontAwesomeIcon","styles","MarkdownTextarea","title","markdown","className","disabled","onInput","previewRef","textareaRef","isPreview","setIsPreview","isFechingMarked","setIsFetchingMarked","textareaInput","e","text","target","value","then","module","marked","default","console","log","current","innerHTML","catch","err","finally","label"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { faMarkdown } from '@fortawesome/free-brands-svg-icons';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IMAGES_MIME_TYPES } from '~/services/Constants';\r\nimport { filterFiles } from '~/services/utils/FileUtils';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\n\r\nimport styles from './MarkdownTextarea.module.scss';\r\n\r\ninterface Props {\r\n  title?: string;\r\n  markdown?: string;\r\n  className?: string;\r\n  disabled?: boolean;\r\n  onInput: (text: string) => void;\r\n // onUpload: (files: File[], cursorPosition: number) => void;\r\n}\r\n\r\nfunction MarkdownTextarea({\r\n  title = 'Modifică',\r\n  markdown = '',\r\n  className = '',\r\n  disabled = false,\r\n  onInput,\r\n  // onUpload,\r\n}: Props) {\r\n  const previewRef = useRef(null);\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  // const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const [isPreview, setIsPreview] = useState(false);\r\n  const [isFechingMarked, setIsFetchingMarked] = useState(false);\r\n  // const [isUploading, setIsUploading] = useState(false);\r\n\r\n  const textareaInput = (e) => {\r\n    const text = e.target.value;\r\n    onInput(text);\r\n  };\r\n\r\n  // const fileInput = (e: React.ChangeEvent<HTMLInputElement>) => uploadFiles([...e.target.files]);\r\n\r\n  // const uploadFiles = async (files: File[]) => {\r\n  //   const validFiles = filterFiles(files, IMAGES_MIME_TYPES);\r\n\r\n  //   if (!validFiles.length) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   setIsUploading(true);\r\n  //   const cursorPosition = textareaRef.current.selectionStart;\r\n\r\n  //   try {\r\n  //     await onUpload(validFiles, cursorPosition);\r\n  //   } catch (err) {\r\n  //     SweetAlertService.toast({\r\n  //       text: err.message || 'Oops! Nu am putut încărca poza ta. Încearcă din nou!',\r\n  //       type: 'error',\r\n  //     });\r\n  //   } finally {\r\n  //     setIsUploading(false);\r\n  //     fileInputRef.current.value = null;\r\n  //   }\r\n  // };\r\n\r\n  // const paste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\r\n  //   const first = e.clipboardData.items[0];\r\n\r\n  //   if (first?.kind === 'file') {\r\n  //     uploadFiles([first.getAsFile()]);\r\n  //   }\r\n  // };\r\n\r\n  useEffect(() => {\r\n    if (isPreview) {\r\n      setIsFetchingMarked(true);\r\n      import('marked')\r\n        .then((module) => {\r\n          const marked = module.default;\r\n          console.log(previewRef.current);\r\n\r\n          previewRef.current.innerHTML = marked(markdown);\r\n        })\r\n        .catch((err) => {\r\n          previewRef.current.innerHTML = '<p style=\"color: red;\"> Oops! Verifică conexiunea la net și încearcă din nou </p>';\r\n        })\r\n        .finally(() => setIsFetchingMarked(false));\r\n    }\r\n  }, [isPreview]);\r\n\r\n  return (\r\n    <div className={`${styles['markdown-textarea']} ${className}`}>\r\n      <label className={`${styles.label} ${isPreview ? '' : `${styles['is--checked']}`}`}>\r\n        {title}\r\n        <input checked={!isPreview} onChange={() => setIsPreview(false)} type=\"radio\" name=\"nav\" hidden />\r\n      </label>\r\n      <label className={`${styles.label} ${isPreview ? `${styles['is--checked']}` : ''}`}>\r\n        {isFechingMarked\r\n          ? <FontAwesomeIcon width=\"20\" className=\"text-white rotate\" icon={faSpinner} />\r\n          : 'Preview'}\r\n        <input checked={isPreview} onChange={() => setIsPreview(true)} type=\"radio\" name=\"nav\" hidden />\r\n      </label>\r\n\r\n      <div>\r\n        <div className=\"relative\">\r\n          <textarea\r\n            placeholder=\"Editează folosing Markdown...\"\r\n            ref={textareaRef}\r\n            disabled={isPreview}\r\n            className={`${isPreview ? 'd-none absolute' : ''}`}\r\n            value={markdown}\r\n            rows={10}\r\n            onChange={textareaInput}\r\n           //  onPaste={paste}\r\n          />\r\n          <div ref={previewRef} className={`${isPreview ? '' : 'd-none absolute'}`} />\r\n        </div>\r\n        <footer className=\"text-right relative\">\r\n          {/* { {!isPreview &&\r\n            <label className=\"absolute\">\r\n              {isUploading ? <FontAwesomeIcon className=\"rotate\" icon={faSpinner} /> : 'Adaugă imagini'}\r\n              <input\r\n                ref={fileInputRef}\r\n                 disabled={isUploading || disabled}\r\n                type=\"file\"\r\n                multiple={false}\r\n                accept={IMAGES_MIME_TYPES.join(',')}\r\n                onChange={fileInput}\r\n                hidden\r\n              />\r\n           </label>\r\n          )} */}\r\n\r\n          <FontAwesomeIcon icon={faMarkdown} width=\"20\" />\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MarkdownTextarea;\r\n"]},"metadata":{},"sourceType":"module"}