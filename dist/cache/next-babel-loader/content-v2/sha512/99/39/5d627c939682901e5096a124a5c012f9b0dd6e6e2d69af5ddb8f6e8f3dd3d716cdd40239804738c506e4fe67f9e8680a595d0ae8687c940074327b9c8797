{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\pages\\\\_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Provider } from 'react-redux';\nimport { createStoreWithPreloadedData } from '~/redux/store';\nimport { defaultUserState } from '~/redux/user/user.reducer';\nimport '~/styles/index.scss';\nexport default function MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  var store = createStoreWithPreloadedData({\n    user: _objectSpread(_objectSpread({}, defaultUserState), {}, {\n      info: pageProps.user\n    })\n  });\n  return __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  })));\n}\n/**\r\n * Fetch user on all pages and add it to store.\r\n * This way we already have the user when rendering most pages thus the overall\r\n * render experience should be faster.\r\n\r\n * ⚠⚠⚠ WARNING ⚠⚠⚠\r\n * This function gets called on both SERVER and CLIENT.\r\n * Unfortunately `getServerSideProps` is not supported\r\n * for the `App` component so we're stuck with this one.\r\n *\r\n * On the client however, we don't want to call the DB methods,\r\n * so we found a little \"hack\" by checking the `req` parameter.\r\n */\n\n_c = MyApp;\n\nMyApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var ctx, req, pageProps, isClientSide, _yield$Promise$all, _yield$Promise$all2, databaseImport, userModelImport, connectToDb, UserModel, token, user, sanitizedUser;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref2.ctx, req = _ref2.req;\n            pageProps = {\n              user: null\n            };\n            isClientSide = !ctx.req;\n\n            if (!isClientSide) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 5:\n            _context.prev = 5;\n            _context.next = 8;\n            return Promise.all([import('../server/database'), import('../shared/user.shared-model')]);\n\n          case 8:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            databaseImport = _yield$Promise$all2[0];\n            userModelImport = _yield$Promise$all2[1];\n            connectToDb = databaseImport.connectToDb;\n            UserModel = userModelImport[\"default\"];\n            token = ctx.req.cookies.token;\n\n            if (token) {\n              _context.next = 17;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 17:\n            connectToDb();\n            _context.next = 20;\n            return UserModel.ping(token);\n\n          case 20:\n            user = _context.sent;\n            sanitizedUser = UserModel.sanitize(user);\n            sanitizedUser.lastLogin = sanitizedUser.lastLogin.toString();\n            pageProps.user = sanitizedUser;\n            _context.next = 29;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](5);\n            console.error('[getServerSideProps][pingUser]: ', _context.t0);\n\n          case 29:\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 26]]);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/pages/_app.tsx"],"names":["Provider","createStoreWithPreloadedData","defaultUserState","MyApp","Component","pageProps","store","user","info","getInitialProps","ctx","req","isClientSide","Promise","all","databaseImport","userModelImport","connectToDb","UserModel","token","cookies","ping","sanitizedUser","sanitize","lastLogin","toString","console","error"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,4BAAT,QAA6C,eAA7C;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,OAAO,qBAAP;AAEA,eAAe,SAASC,KAAT,OAA8C;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,SAAkB,QAAlBA,SAAkB;AAC3D,MAAMC,KAAK,GAAGL,4BAA4B,CAAC;AACzCM,IAAAA,IAAI,kCACCL,gBADD;AAEFM,MAAAA,IAAI,EAAEH,SAAS,CAACE;AAFd;AADqC,GAAD,CAA1C;AAOA,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;KA3BwBF,K;;AA6BvBA,KAAK,CAACM,eAAN;AAAA,uEAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,GAAT,SAASA,GAAT,EAAcC,GAAd,SAAcA,GAAd;AACjBN,YAAAA,SADiB,GACL;AAChBE,cAAAA,IAAI,EAAE;AADU,aADK;AAKjBK,YAAAA,YALiB,GAKF,CAACF,GAAG,CAACC,GALH;;AAAA,iBAOnBC,YAPmB;AAAA;AAAA;AAAA;;AAAA,6CAQd;AAAEP,cAAAA,SAAS,EAATA;AAAF,aARc;;AAAA;AAAA;AAAA;AAAA,mBAY2BQ,OAAO,CAACC,GAAR,CAAY,CAC1D,OAAO,oBAAP,CAD0D,EAE1D,OAAO,6BAAP,CAF0D,CAAZ,CAZ3B;;AAAA;AAAA;AAAA;AAYdC,YAAAA,cAZc;AAYEC,YAAAA,eAZF;AAiBbC,YAAAA,WAjBa,GAiBGF,cAjBH,CAiBbE,WAjBa;AAkBfC,YAAAA,SAlBe,GAkBHF,eAAe,WAlBZ;AAmBbG,YAAAA,KAnBa,GAmBHT,GAAG,CAACC,GAAJ,CAAQS,OAnBL,CAmBbD,KAnBa;;AAAA,gBAqBhBA,KArBgB;AAAA;AAAA;AAAA;;AAAA,6CAsBZ;AAAEd,cAAAA,SAAS,EAATA;AAAF,aAtBY;;AAAA;AAyBrBY,YAAAA,WAAW;AAzBU;AAAA,mBA2BFC,SAAS,CAACG,IAAV,CAAeF,KAAf,CA3BE;;AAAA;AA2BfZ,YAAAA,IA3Be;AA4Bfe,YAAAA,aA5Be,GA4BCJ,SAAS,CAACK,QAAV,CAAmBhB,IAAnB,CA5BD;AA8BrBe,YAAAA,aAAa,CAACE,SAAd,GAA0BF,aAAa,CAACE,SAAd,CAAwBC,QAAxB,EAA1B;AACApB,YAAAA,SAAS,CAACE,IAAV,GAAiBe,aAAjB;AA/BqB;AAAA;;AAAA;AAAA;AAAA;AAiCrBI,YAAAA,OAAO,CAACC,KAAR,CAAc,kCAAd;;AAjCqB;AAAA,6CAoChB;AAAEtB,cAAAA,SAAS,EAATA;AAAF,aApCgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Provider } from 'react-redux';\r\nimport { createStoreWithPreloadedData } from '~/redux/store';\r\nimport { defaultUserState } from '~/redux/user/user.reducer';\r\n\r\nimport '~/styles/index.scss';\r\n\r\nexport default function MyApp({ Component, pageProps }: any) {\r\n  const store = createStoreWithPreloadedData({\r\n    user: {\r\n      ...defaultUserState,\r\n      info: pageProps.user,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <Component {...pageProps} />\r\n    </Provider>\r\n  );\r\n}\r\n\r\n/**\r\n * Fetch user on all pages and add it to store.\r\n * This way we already have the user when rendering most pages thus the overall\r\n * render experience should be faster.\r\n\r\n * ⚠⚠⚠ WARNING ⚠⚠⚠\r\n * This function gets called on both SERVER and CLIENT.\r\n * Unfortunately `getServerSideProps` is not supported\r\n * for the `App` component so we're stuck with this one.\r\n *\r\n * On the client however, we don't want to call the DB methods,\r\n * so we found a little \"hack\" by checking the `req` parameter.\r\n */\r\n\r\n MyApp.getInitialProps = async ({ ctx, req }) => {\r\n  const pageProps = {\r\n    user: null,\r\n  };\r\n\r\n  const isClientSide = !ctx.req;\r\n\r\n  if (isClientSide) {\r\n    return { pageProps };\r\n  }\r\n\r\n  try {\r\n    const [databaseImport, userModelImport] = await Promise.all([\r\n      import('../server/database'),\r\n      import('../shared/user.shared-model'),\r\n    ]);\r\n\r\n    const { connectToDb } = databaseImport;\r\n    const UserModel = userModelImport.default;\r\n    const { token } = ctx.req.cookies;\r\n\r\n    if (!token) {\r\n      return { pageProps };\r\n    }\r\n\r\n    connectToDb();\r\n\r\n    const user = await UserModel.ping(token);\r\n    const sanitizedUser = UserModel.sanitize(user);\r\n\r\n    sanitizedUser.lastLogin = sanitizedUser.lastLogin.toString();\r\n    pageProps.user = sanitizedUser;\r\n  } catch (err) {\r\n    console.error('[getServerSideProps][pingUser]: ', err);\r\n  }\r\n\r\n  return { pageProps };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}