{"ast":null,"code":"export { v4 as uuid } from 'uuid'; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nexport function noop() {}\n/**\r\n * Here we make the function timeAgo to format a JavaScript Date as a\r\n * string stating the time elapsed. We parse the time, and show it\r\n * depending on when it was submitted:\r\n *\r\n * ➤ Just now - if the submission was under one minute ago\r\n * ➤ X minutes ago or Y hours ago\r\n * ➤ Yesterday\r\n * ➤ X days ago - up to 3 days\r\n * ➤ 10 Sept 2020 if it as more than 3 days ago\r\n */\n\nexport const timeAgo = date => {\n  let ms = Date.now() - date.getTime();\n  let seconds = Math.floor(ms / 1000);\n  let minutes = Math.floor(seconds / 60);\n  let hours = Math.floor(minutes / 60);\n  let days = Math.floor(hours / 24);\n\n  if (seconds < 60) {\n    return 'Just now';\n  }\n\n  if (minutes < 60) {\n    return minutes === 1 ? `${minutes} minute ago` : `${minutes} minutes ago`;\n  }\n\n  if (hours < 24) {\n    return hours === 1 ? `${hours} hour ago` : `${hours} hours ago`;\n  }\n\n  if (hours > 24 && hours < 24 * 2) {\n    return 'Yesterday';\n  }\n\n  if (days < 3) {\n    return days === 1 ? `${days} day ago` : `${days} days ago`;\n  }\n\n  if (days > 3) {\n    return formatDate(date);\n  }\n\n  return formatDate(date);\n};\nexport const formatDate = dateToFormat => {\n  //  Convert a string like '2020-09-20T00:00:00' into '20 September 2020'\n  let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  let date = new Date(dateToFormat);\n  let str = `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\n  return str;\n};\nexport const alphabeticSortComparator = (nameA, nameB) => {\n  let lowercaseNameA = nameA.toLowerCase();\n  let lowercaseNameB = nameB.toLowerCase();\n\n  if (lowercaseNameA === lowercaseNameB) {\n    return 0;\n  }\n\n  return lowercaseNameA < lowercaseNameB ? -1 : 1;\n};\nexport const nextUntitledFilename = (existingNames, NAME_BASE = 'Untitled file') => {\n  let existingUntitledNumbers = [];\n  existingNames.forEach(name => {\n    if (name === NAME_BASE) {\n      existingUntitledNumbers.push(0);\n      return;\n    }\n\n    let group = new RegExp(`^${NAME_BASE} [(](.+)[)]$`, 'g').exec(name);\n\n    if (group) {\n      existingUntitledNumbers.push(Number(group[1]));\n    }\n  });\n  existingUntitledNumbers.sort((nrA, nrB) => nrA - nrB);\n  let newName = NAME_BASE;\n  let count = 0;\n  let i = 0;\n  existingUntitledNumbers.forEach(nr => {\n    if (nr === 0 && newName === NAME_BASE || nr === count) {\n      count = nr + 1;\n      newName = `${NAME_BASE} (${count})`;\n    }\n  });\n  return newName;\n};","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/Utils.ts"],"names":["v4","uuid","noop","timeAgo","date","ms","Date","now","getTime","seconds","Math","floor","minutes","hours","days","formatDate","dateToFormat","months","str","getDate","getMonth","getFullYear","alphabeticSortComparator","nameA","nameB","lowercaseNameA","toLowerCase","lowercaseNameB","nextUntitledFilename","existingNames","NAME_BASE","existingUntitledNumbers","forEach","name","push","group","RegExp","exec","Number","sort","nrA","nrB","newName","count","i","nr"],"mappings":"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","sourcesContent":["export { v4 as uuid } from 'uuid';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-function\r\nexport function noop() {}\r\n\r\n/**\r\n * Here we make the function timeAgo to format a JavaScript Date as a\r\n * string stating the time elapsed. We parse the time, and show it\r\n * depending on when it was submitted:\r\n *\r\n * ➤ Just now - if the submission was under one minute ago\r\n * ➤ X minutes ago or Y hours ago\r\n * ➤ Yesterday\r\n * ➤ X days ago - up to 3 days\r\n * ➤ 10 Sept 2020 if it as more than 3 days ago\r\n */\r\nexport const timeAgo = (date: Date): string => {\r\n  let ms = Date.now() - date.getTime();\r\n  let seconds = Math.floor(ms / 1000);\r\n  let minutes = Math.floor(seconds / 60);\r\n  let hours = Math.floor(minutes / 60);\r\n  let days = Math.floor(hours / 24);\r\n\r\n  if (seconds < 60) {\r\n    return 'Just now';\r\n  }\r\n  if (minutes < 60) {\r\n    return minutes === 1\r\n      ? `${minutes} minute ago`\r\n      : `${minutes} minutes ago`;\r\n  }\r\n  if (hours < 24) {\r\n    return hours === 1\r\n      ? `${hours} hour ago`\r\n      : `${hours} hours ago`;\r\n  }\r\n  if (hours > 24 && hours < 24 * 2) {\r\n    return 'Yesterday';\r\n  }\r\n  if (days < 3) {\r\n    return days === 1\r\n      ? `${days} day ago`\r\n      : `${days} days ago`;\r\n  }\r\n  if (days > 3) {\r\n    return formatDate(date);\r\n  }\r\n  return formatDate(date);\r\n};\r\nexport const formatDate = (dateToFormat: Date): string => {\r\n  //  Convert a string like '2020-09-20T00:00:00' into '20 September 2020'\r\n  let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n  let date = new Date(dateToFormat);\r\n  let str = `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\r\n  return str;\r\n};\r\n\r\nexport const alphabeticSortComparator = (nameA, nameB) => {\r\n  let lowercaseNameA = nameA.toLowerCase();\r\n  let lowercaseNameB = nameB.toLowerCase();\r\n\r\n  if (lowercaseNameA === lowercaseNameB) {\r\n    return 0;\r\n  }\r\n\r\n  return lowercaseNameA < lowercaseNameB ? -1 : 1;\r\n};\r\n\r\nexport const nextUntitledFilename = (existingNames, NAME_BASE = 'Untitled file') => {\r\n  let existingUntitledNumbers = [];\r\n  existingNames.forEach((name) => {\r\n    if (name === NAME_BASE) {\r\n      existingUntitledNumbers.push(0);\r\n      return;\r\n    }\r\n\r\n    let group = new RegExp(`^${NAME_BASE} [(](.+)[)]$`, 'g').exec(name);\r\n    if (group) {\r\n      existingUntitledNumbers.push(Number(group[1]));\r\n    }\r\n  });\r\n\r\n  existingUntitledNumbers.sort((nrA, nrB) => nrA - nrB);\r\n\r\n  let newName = NAME_BASE;\r\n  let count = 0;\r\n  let i = 0;\r\n\r\n  existingUntitledNumbers.forEach((nr) => {\r\n    if ((nr === 0 && newName === NAME_BASE) || nr === count) {\r\n      count = nr + 1;\r\n      newName = `${NAME_BASE} (${count})`;\r\n    }\r\n  });\r\n\r\n  return newName;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}