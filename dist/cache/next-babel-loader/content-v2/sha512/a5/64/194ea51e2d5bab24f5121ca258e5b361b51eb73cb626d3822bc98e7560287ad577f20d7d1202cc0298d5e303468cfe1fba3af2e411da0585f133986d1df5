{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { alphabeticSortComparator, uuid } from '../Utils';\nimport ZipService from './ZipService';\nconst ERROR_MESSAGES = {\n  FILE_MISSING: \"Hmm, there's a bug in here. File seems to be missing.\",\n  DUPLICATE_FILE_KEYS: \"Hmm, there's a bug in here. Duplicate file key found\",\n  DUPLICATE_FILE_NAMES: 'Cannot have duplicate file names inside the same folder',\n  FOLDER_MISSING: \"Hmm, there's a bug in here. Folder seems to be missing.\",\n  DUPLICATE_FOLDER_KEYS: \"Hmm, there's a bug in here. Duplicate folder key found\",\n  DUPLICATE_FOLDER_NAMES: 'Cannot have duplicate folder names inside the same folder'\n};\n\nclass FolderStructure {\n  constructor({\n    folders = [],\n    files = []\n  } = {}) {\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"folders\", void 0);\n\n    _defineProperty(this, \"files\", void 0);\n\n    this.key = null;\n    this.folders = folders;\n    this.files = files;\n  }\n  /** GETs */\n\n\n  hasFile(key, subFolder = this) {\n    return !!this.getFile(key, subFolder).file;\n  }\n\n  getFile(key, subFolder = this) {\n    let foundFile = subFolder.files.find(file => file.key === key);\n\n    if (foundFile) {\n      return {\n        file: foundFile,\n        parentKey: subFolder.key\n      };\n    }\n\n    for (let folder of subFolder.folders) {\n      let foundFile = this.getFile(key, folder);\n\n      if (foundFile.file) {\n        return foundFile;\n      }\n    }\n\n    return {\n      file: null\n    };\n  }\n\n  getFolder(key, subFolder = this) {\n    if (!key) {\n      return {\n        folder: this,\n        parentKey: null\n      };\n    }\n\n    let foundFolder = subFolder.folders.find(folder => folder.key === key);\n\n    if (foundFolder) {\n      return {\n        folder: foundFolder,\n        parentKey: subFolder.key\n      };\n    }\n\n    for (let folder of subFolder.folders) {\n      let foundFolder = this.getFolder(key, folder);\n\n      if (foundFolder.folder) {\n        return foundFolder;\n      }\n    }\n\n    return {\n      folder: null\n    };\n  }\n  /** ADDs */\n\n\n  addFile(parentKey, {\n    name = '',\n    content = '',\n    key = uuid()\n  } = {}) {\n    if (this.getFile(key).file) {\n      throw ERROR_MESSAGES.DUPLICATE_FILE_KEYS;\n    }\n\n    let siblingFiles = this.getFolder(parentKey).folder.files;\n\n    if (siblingFiles.find(file => file.name === name)) {\n      throw ERROR_MESSAGES.DUPLICATE_FILE_NAMES;\n    }\n\n    siblingFiles.push({\n      key,\n      name,\n      content\n    });\n    siblingFiles.sort((fileA, fileB) => alphabeticSortComparator(fileA.name, fileB.name));\n    return key;\n  }\n\n  addFolder(parentKey, {\n    name = '',\n    key = uuid(),\n    files = [],\n    folders = []\n  } = {}) {\n    if (this.getFolder(key).folder) {\n      throw ERROR_MESSAGES.DUPLICATE_FOLDER_KEYS;\n    }\n\n    let siblingFolders = this.getFolder(parentKey).folder.folders;\n\n    if (siblingFolders.find(folder => folder.name === name)) {\n      throw ERROR_MESSAGES.DUPLICATE_FOLDER_NAMES;\n    }\n\n    siblingFolders.push({\n      key,\n      name,\n      files,\n      folders\n    });\n    siblingFolders.sort((folderA, folderB) => alphabeticSortComparator(folderA.name, folderB.name));\n    return key;\n  }\n  /** RENAMEs */\n\n\n  renameFile(key, name) {\n    let {\n      file,\n      parentKey\n    } = this.getFile(key);\n\n    if (!file) {\n      throw ERROR_MESSAGES.FILE_MISSING;\n    }\n\n    let siblingFiles = this.getFolder(parentKey).folder.files;\n\n    if (siblingFiles.find(file => file.name === name && file.key !== key)) {\n      throw ERROR_MESSAGES.DUPLICATE_FILE_NAMES;\n    }\n\n    file.name = name;\n    siblingFiles.sort((fileA, fileB) => alphabeticSortComparator(fileA.name, fileB.name));\n  }\n\n  setContent(key, content) {\n    let {\n      file\n    } = this.getFile(key);\n\n    if (!file) {\n      throw ERROR_MESSAGES.FILE_MISSING;\n    }\n\n    file.content = content;\n  }\n\n  renameFolder(key, name) {\n    let {\n      folder,\n      parentKey\n    } = this.getFolder(key);\n\n    if (!folder) {\n      throw ERROR_MESSAGES.FOLDER_MISSING;\n    }\n\n    let siblingFolders = this.getFolder(parentKey).folder.folders;\n\n    if (siblingFolders.find(folder => folder.name === name && folder.key !== key)) {\n      throw ERROR_MESSAGES.DUPLICATE_FOLDER_NAMES;\n    }\n\n    folder.name = name;\n  }\n  /** DELETEs */\n\n\n  deleteFile(key) {\n    let {\n      file,\n      parentKey\n    } = this.getFile(key);\n\n    if (!file) {\n      throw ERROR_MESSAGES.FILE_MISSING;\n    }\n\n    let parentFolder = this.getFolder(parentKey).folder;\n    parentFolder.files = parentFolder.files.filter(file => file.key !== key);\n  }\n\n  deleteFolder(key) {\n    let {\n      folder,\n      parentKey\n    } = this.getFolder(key);\n\n    if (!folder) {\n      throw ERROR_MESSAGES.FOLDER_MISSING;\n    }\n\n    let parentFolder = this.getFolder(parentKey).folder;\n    parentFolder.folders = parentFolder.folders.filter(folder => folder.key !== key);\n  }\n  /** MOVEs */\n\n\n  moveFile(key, newParentKey) {\n    let {\n      file,\n      parentKey\n    } = this.getFile(key);\n\n    if (!file) {\n      throw ERROR_MESSAGES.FILE_MISSING;\n    }\n\n    try {\n      this.deleteFile(key);\n      this.addFile(newParentKey, file);\n    } catch (err) {\n      this.addFile(parentKey, file);\n      throw err;\n    }\n  }\n\n  moveFolder(key, newParentKey) {\n    let {\n      folder,\n      parentKey\n    } = this.getFolder(key);\n\n    if (!folder) {\n      throw ERROR_MESSAGES.FOLDER_MISSING;\n    }\n\n    try {\n      this.deleteFolder(key);\n      this.addFolder(newParentKey, folder);\n    } catch (err) {\n      this.addFolder(parentKey, folder);\n      throw err;\n    }\n  }\n\n  toJSON() {\n    return JSON.stringify({\n      folders: this.folders,\n      files: this.files\n    });\n  }\n\n  downloadAsZip() {\n    let root = {\n      name: 'source-code-archive',\n      files: this.files,\n      folders: this.folders\n    };\n    return ZipService.generate(root);\n  }\n\n}\n\nexport function NewSourceFile(name = 'Untitled file') {\n  return {\n    key: uuid(),\n    content: '',\n    name\n  };\n}\nexport default FolderStructure;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/utils/FolderStructure.ts"],"names":["alphabeticSortComparator","uuid","ZipService","ERROR_MESSAGES","FILE_MISSING","DUPLICATE_FILE_KEYS","DUPLICATE_FILE_NAMES","FOLDER_MISSING","DUPLICATE_FOLDER_KEYS","DUPLICATE_FOLDER_NAMES","FolderStructure","constructor","folders","files","key","hasFile","subFolder","getFile","file","foundFile","find","parentKey","folder","getFolder","foundFolder","addFile","name","content","siblingFiles","push","sort","fileA","fileB","addFolder","siblingFolders","folderA","folderB","renameFile","setContent","renameFolder","deleteFile","parentFolder","filter","deleteFolder","moveFile","newParentKey","err","moveFolder","toJSON","JSON","stringify","downloadAsZip","root","generate","NewSourceFile"],"mappings":"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","sourcesContent":["import { alphabeticSortComparator, uuid } from '../Utils';\r\nimport ZipService from './ZipService';\r\n\r\nconst ERROR_MESSAGES = {\r\n  FILE_MISSING: \"Hmm, there's a bug in here. File seems to be missing.\",\r\n  DUPLICATE_FILE_KEYS: \"Hmm, there's a bug in here. Duplicate file key found\",\r\n  DUPLICATE_FILE_NAMES:\r\n    'Cannot have duplicate file names inside the same folder',\r\n\r\n  FOLDER_MISSING: \"Hmm, there's a bug in here. Folder seems to be missing.\",\r\n  DUPLICATE_FOLDER_KEYS:\r\n    \"Hmm, there's a bug in here. Duplicate folder key found\",\r\n  DUPLICATE_FOLDER_NAMES:\r\n    'Cannot have duplicate folder names inside the same folder',\r\n};\r\n\r\nexport interface ExerciseFile {\r\n  key: string;\r\n  name: string;\r\n  content: string;\r\n}\r\n\r\nexport interface ExerciseFolder {\r\n  key: string;\r\n  name: string;\r\n  files: ExerciseFile[];\r\n  folders: ExerciseFolder;\r\n}\r\n\r\nclass FolderStructure {\r\n  public key: string;\r\n\r\n  public folders: ExerciseFolder[];\r\n\r\n  public files: ExerciseFile[];\r\n\r\n  constructor({ folders = [], files = [] } = {}) {\r\n    this.key = null;\r\n    this.folders = folders;\r\n    this.files = files;\r\n  }\r\n\r\n  /** GETs */\r\n  hasFile(key, subFolder = this) {\r\n    return !!this.getFile(key, subFolder).file;\r\n  }\r\n\r\n  getFile(key, subFolder: any = this) {\r\n    let foundFile = subFolder.files.find((file) => file.key === key);\r\n    if (foundFile) {\r\n      return {\r\n        file: foundFile,\r\n        parentKey: subFolder.key,\r\n      };\r\n    }\r\n\r\n    for (let folder of subFolder.folders) {\r\n      let foundFile = this.getFile(key, folder);\r\n      if (foundFile.file) {\r\n        return foundFile;\r\n      }\r\n    }\r\n\r\n    return { file: null };\r\n  }\r\n\r\n  getFolder(key, subFolder: any = this) {\r\n    if (!key) {\r\n      return { folder: this, parentKey: null };\r\n    }\r\n\r\n    let foundFolder = subFolder.folders.find((folder) => folder.key === key);\r\n    if (foundFolder) {\r\n      return {\r\n        folder: foundFolder,\r\n        parentKey: subFolder.key,\r\n      };\r\n    }\r\n\r\n    for (let folder of subFolder.folders) {\r\n      let foundFolder = this.getFolder(key, folder);\r\n      if (foundFolder.folder) {\r\n        return foundFolder;\r\n      }\r\n    }\r\n\r\n    return { folder: null };\r\n  }\r\n\r\n  /** ADDs */\r\n  addFile(parentKey, { name = '', content = '', key = uuid() } = {}) {\r\n    if (this.getFile(key).file) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FILE_KEYS;\r\n    }\r\n\r\n    let siblingFiles = this.getFolder(parentKey).folder.files;\r\n\r\n    if (siblingFiles.find((file) => file.name === name)) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FILE_NAMES;\r\n    }\r\n\r\n    siblingFiles.push({ key, name, content });\r\n    siblingFiles.sort((fileA, fileB) => alphabeticSortComparator(fileA.name, fileB.name));\r\n\r\n    return key;\r\n  }\r\n\r\n  addFolder(\r\n    parentKey,\r\n    {\r\n      name = '', key = uuid(), files = [], folders = [],\r\n    } = {},\r\n  ) {\r\n    if (this.getFolder(key).folder) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FOLDER_KEYS;\r\n    }\r\n\r\n    let siblingFolders = this.getFolder(parentKey).folder.folders;\r\n\r\n    if (siblingFolders.find((folder) => folder.name === name)) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FOLDER_NAMES;\r\n    }\r\n\r\n    siblingFolders.push({\r\n      key,\r\n      name,\r\n      files,\r\n      folders,\r\n    });\r\n    siblingFolders.sort((folderA, folderB) => alphabeticSortComparator(folderA.name, folderB.name));\r\n\r\n    return key;\r\n  }\r\n\r\n  /** RENAMEs */\r\n  renameFile(key, name) {\r\n    let { file, parentKey } = this.getFile(key);\r\n    if (!file) {\r\n      throw ERROR_MESSAGES.FILE_MISSING;\r\n    }\r\n\r\n    let siblingFiles = this.getFolder(parentKey).folder.files;\r\n\r\n    if (siblingFiles.find((file) => file.name === name && file.key !== key)) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FILE_NAMES;\r\n    }\r\n\r\n    file.name = name;\r\n    siblingFiles.sort((fileA, fileB) => alphabeticSortComparator(fileA.name, fileB.name));\r\n  }\r\n\r\n  setContent(key, content) {\r\n    let { file } = this.getFile(key);\r\n    if (!file) {\r\n      throw ERROR_MESSAGES.FILE_MISSING;\r\n    }\r\n\r\n    file.content = content;\r\n  }\r\n\r\n  renameFolder(key, name) {\r\n    let { folder, parentKey } = this.getFolder(key);\r\n    if (!folder) {\r\n      throw ERROR_MESSAGES.FOLDER_MISSING;\r\n    }\r\n\r\n    let siblingFolders = this.getFolder(parentKey).folder.folders;\r\n\r\n    if (\r\n      siblingFolders.find(\r\n        (folder) => folder.name === name && folder.key !== key,\r\n      )\r\n    ) {\r\n      throw ERROR_MESSAGES.DUPLICATE_FOLDER_NAMES;\r\n    }\r\n\r\n    folder.name = name;\r\n  }\r\n\r\n  /** DELETEs */\r\n  deleteFile(key) {\r\n    let { file, parentKey } = this.getFile(key);\r\n    if (!file) {\r\n      throw ERROR_MESSAGES.FILE_MISSING;\r\n    }\r\n\r\n    let parentFolder = this.getFolder(parentKey).folder;\r\n    parentFolder.files = parentFolder.files.filter((file) => file.key !== key);\r\n  }\r\n\r\n  deleteFolder(key) {\r\n    let { folder, parentKey } = this.getFolder(key);\r\n    if (!folder) {\r\n      throw ERROR_MESSAGES.FOLDER_MISSING;\r\n    }\r\n\r\n    let parentFolder = this.getFolder(parentKey).folder;\r\n    parentFolder.folders = parentFolder.folders.filter(\r\n      (folder) => folder.key !== key,\r\n    );\r\n  }\r\n\r\n  /** MOVEs */\r\n  moveFile(key, newParentKey) {\r\n    let { file, parentKey } = this.getFile(key);\r\n    if (!file) {\r\n      throw ERROR_MESSAGES.FILE_MISSING;\r\n    }\r\n\r\n    try {\r\n      this.deleteFile(key);\r\n      this.addFile(newParentKey, file);\r\n    } catch (err) {\r\n      this.addFile(parentKey, file);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  moveFolder(key, newParentKey) {\r\n    let { folder, parentKey } = this.getFolder(key);\r\n    if (!folder) {\r\n      throw ERROR_MESSAGES.FOLDER_MISSING;\r\n    }\r\n\r\n    try {\r\n      this.deleteFolder(key);\r\n      this.addFolder(newParentKey, folder);\r\n    } catch (err) {\r\n      this.addFolder(parentKey, folder);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    return JSON.stringify({\r\n      folders: this.folders,\r\n      files: this.files,\r\n    });\r\n  }\r\n\r\n  downloadAsZip() {\r\n    let root = {\r\n      name: 'source-code-archive',\r\n      files: this.files,\r\n      folders: this.folders,\r\n    };\r\n\r\n    return ZipService.generate(root);\r\n  }\r\n}\r\n\r\nexport function NewSourceFile(name = 'Untitled file') {\r\n  return {\r\n    key: uuid(),\r\n    content: '',\r\n    name,\r\n  };\r\n}\r\nexport default FolderStructure;\r\n"]},"metadata":{},"sourceType":"module"}