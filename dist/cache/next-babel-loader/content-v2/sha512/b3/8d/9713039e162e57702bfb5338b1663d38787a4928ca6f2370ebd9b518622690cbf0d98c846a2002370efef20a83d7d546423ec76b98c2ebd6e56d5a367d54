{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\pages\\\\_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport IdentifyLogRocket from '~/components/IdentifyLogRocket';\nimport { createStoreWithPreloadedData } from '~/redux/store';\nimport { defaultUserState } from '~/redux/user/user.reducer';\nimport LogRocketService from '~/services/utils/LogRocket.service';\nimport '~/styles/index.scss';\nexport default function MyApp({\n  Component,\n  pageProps\n}) {\n  const store = createStoreWithPreloadedData({\n    user: _objectSpread(_objectSpread({}, defaultUserState), {}, {\n      info: pageProps._serverUser\n    })\n  });\n  useEffect(() => {\n    if (process.env.APP_ENV === 'production') {\n      LogRocketService.init();\n    }\n  }, []);\n  return __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(IdentifyLogRocket, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  })));\n}\n/**\r\n * Fetch user on all pages and add it to store.\r\n * This way we already have the user when rendering most pages thus the overall\r\n * render experience should be faster.\r\n\r\n * ⚠⚠⚠ WARNING ⚠⚠⚠\r\n * This function gets called on both SERVER and CLIENT.\r\n * Unfortunately `getServerSideProps` is not supported\r\n * for the `App` component so we're stuck with this one.\r\n *\r\n * On the client however, we don't want to call the DB methods,\r\n * so we found a little \"hack\" by checking the `req` parameter.\r\n */\n\nMyApp.getInitialProps = async ({\n  ctx,\n  req\n}) => {\n  const pageProps = {\n    _serverUser: null\n  };\n  const isClientSide = !ctx.req;\n\n  if (isClientSide) {\n    return {\n      pageProps\n    };\n  }\n\n  try {\n    const [databaseImport, userModelImport] = await Promise.all([import('../server/database'), import('../shared/user.shared-model')]);\n    const {\n      connectToDb\n    } = databaseImport;\n    const UserModel = userModelImport.default;\n    const {\n      token\n    } = ctx.req.cookies;\n\n    if (!token) {\n      return {\n        pageProps\n      };\n    }\n\n    connectToDb();\n    const user = await UserModel.ping(token);\n    const sanitizedUser = UserModel.sanitize(user);\n    sanitizedUser.lastLogin = sanitizedUser.lastLogin.toString();\n    pageProps._serverUser = sanitizedUser;\n  } catch (err) {\n    console.error('[getServerSideProps][pingUser]: ', err);\n  }\n\n  return {\n    pageProps\n  };\n};","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/pages/_app.tsx"],"names":["React","useEffect","Provider","IdentifyLogRocket","createStoreWithPreloadedData","defaultUserState","LogRocketService","MyApp","Component","pageProps","store","user","info","_serverUser","process","env","APP_ENV","init","getInitialProps","ctx","req","isClientSide","databaseImport","userModelImport","Promise","all","connectToDb","UserModel","default","token","cookies","ping","sanitizedUser","sanitize","lastLogin","toString","err","console","error"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,SAASC,4BAAT,QAA6C,eAA7C;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AAEA,OAAO,qBAAP;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAA8C;AAC3D,QAAMC,KAAK,GAAGN,4BAA4B,CAAC;AACzCO,IAAAA,IAAI,kCACCN,gBADD;AAEFO,MAAAA,IAAI,EAAEH,SAAS,CAACI;AAFd;AADqC,GAAD,CAA1C;AAOAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,OAAO,CAACC,GAAR,CAAYC,OAAZ,KAAwB,YAA5B,EAA0C;AACxCV,MAAAA,gBAAgB,CAACW,IAAjB;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEP,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,KAAK,CAACW,eAAN,GAAwB,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAAwB;AAC9C,QAAMX,SAAS,GAAG;AAChBI,IAAAA,WAAW,EAAE;AADG,GAAlB;AAIA,QAAMQ,YAAY,GAAG,CAACF,GAAG,CAACC,GAA1B;;AAEA,MAAIC,YAAJ,EAAkB;AAChB,WAAO;AAAEZ,MAAAA;AAAF,KAAP;AACD;;AAED,MAAI;AACF,UAAM,CAACa,cAAD,EAAiBC,eAAjB,IAAoC,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC1D,OAAO,oBAAP,CAD0D,EAE1D,OAAO,6BAAP,CAF0D,CAAZ,CAAhD;AAKA,UAAM;AAAEC,MAAAA;AAAF,QAAkBJ,cAAxB;AACA,UAAMK,SAAS,GAAGJ,eAAe,CAACK,OAAlC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYV,GAAG,CAACC,GAAJ,CAAQU,OAA1B;;AAEA,QAAI,CAACD,KAAL,EAAY;AACV,aAAO;AAAEpB,QAAAA;AAAF,OAAP;AACD;;AAEDiB,IAAAA,WAAW;AAEX,UAAMf,IAAI,GAAG,MAAMgB,SAAS,CAACI,IAAV,CAAeF,KAAf,CAAnB;AACA,UAAMG,aAAa,GAAGL,SAAS,CAACM,QAAV,CAAmBtB,IAAnB,CAAtB;AAEAqB,IAAAA,aAAa,CAACE,SAAd,GAA0BF,aAAa,CAACE,SAAd,CAAwBC,QAAxB,EAA1B;AACA1B,IAAAA,SAAS,CAACI,WAAV,GAAwBmB,aAAxB;AACD,GArBD,CAqBE,OAAOI,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,kCAAd,EAAkDF,GAAlD;AACD;;AAED,SAAO;AAAE3B,IAAAA;AAAF,GAAP;AACD,CArCD","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport IdentifyLogRocket from '~/components/IdentifyLogRocket';\r\nimport { createStoreWithPreloadedData } from '~/redux/store';\r\nimport { defaultUserState } from '~/redux/user/user.reducer';\r\nimport LogRocketService from '~/services/utils/LogRocket.service';\r\n\r\nimport '~/styles/index.scss';\r\n\r\nexport default function MyApp({ Component, pageProps }: any) {\r\n  const store = createStoreWithPreloadedData({\r\n    user: {\r\n      ...defaultUserState,\r\n      info: pageProps._serverUser,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (process.env.APP_ENV === 'production') {\r\n      LogRocketService.init();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <IdentifyLogRocket />\r\n      <Component {...pageProps} />\r\n    </Provider>\r\n  );\r\n}\r\n\r\n/**\r\n * Fetch user on all pages and add it to store.\r\n * This way we already have the user when rendering most pages thus the overall\r\n * render experience should be faster.\r\n\r\n * ⚠⚠⚠ WARNING ⚠⚠⚠\r\n * This function gets called on both SERVER and CLIENT.\r\n * Unfortunately `getServerSideProps` is not supported\r\n * for the `App` component so we're stuck with this one.\r\n *\r\n * On the client however, we don't want to call the DB methods,\r\n * so we found a little \"hack\" by checking the `req` parameter.\r\n */\r\n\r\nMyApp.getInitialProps = async ({ ctx, req }) => {\r\n  const pageProps = {\r\n    _serverUser: null,\r\n  };\r\n\r\n  const isClientSide = !ctx.req;\r\n\r\n  if (isClientSide) {\r\n    return { pageProps };\r\n  }\r\n\r\n  try {\r\n    const [databaseImport, userModelImport] = await Promise.all([\r\n      import('../server/database'),\r\n      import('../shared/user.shared-model'),\r\n    ]);\r\n\r\n    const { connectToDb } = databaseImport;\r\n    const UserModel = userModelImport.default;\r\n    const { token } = ctx.req.cookies;\r\n\r\n    if (!token) {\r\n      return { pageProps };\r\n    }\r\n\r\n    connectToDb();\r\n\r\n    const user = await UserModel.ping(token);\r\n    const sanitizedUser = UserModel.sanitize(user);\r\n\r\n    sanitizedUser.lastLogin = sanitizedUser.lastLogin.toString();\r\n    pageProps._serverUser = sanitizedUser;\r\n  } catch (err) {\r\n    console.error('[getServerSideProps][pingUser]: ', err);\r\n  }\r\n\r\n  return { pageProps };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}