{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * timestamp,\r\n * id,\r\n * position,\r\n * type,\r\n * body,\r\n * file_key\r\n */\nclass Feedbacks {\n  constructor(MonacoEditor, feedbacksArr = []) {\n    _defineProperty(this, \"feedbacksArr\", void 0);\n\n    _defineProperty(this, \"MonacoEditor\", void 0);\n\n    _defineProperty(this, \"timeoutId\", void 0);\n\n    this.feedbacksArr = [];\n    this.MonacoEditor = MonacoEditor;\n    this.timeoutId = null;\n    this.add(...feedbacksArr);\n  }\n\n  getAll() {\n    return [...this.feedbacksArr];\n  }\n\n  getTypesByFileKey() {\n    let result = {}; // eslint-disable-next-line camelcase\n\n    this.feedbacksArr.forEach(({\n      file_key,\n      type\n    }) => {\n      result[file_key] = result[file_key] || [];\n\n      if (!result[file_key].includes(type)) {\n        result[file_key].push(type);\n      }\n    });\n    return result;\n  }\n\n  get(idOrTimestamp) {\n    return _objectSpread({}, this.feedbacksArr.find(f => f.id === idOrTimestamp || f.timestamp === idOrTimestamp));\n  }\n\n  add(...feedbacks) {\n    // eslint-disable-next-line no-param-reassign\n    feedbacks = feedbacks.map(f => _objectSpread(_objectSpread({\n      timestamp: Date.now()\n    }, f), {}, {\n      getDecorationData() {\n        let data = _objectSpread({}, this);\n\n        delete data.body;\n        return data;\n      }\n\n    }));\n    this.feedbacksArr.push(...feedbacks);\n    return feedbacks;\n  }\n\n  delete(timestampOrId) {\n    let indexToDelete = this.feedbacksArr.findIndex(f => f.timestamp === timestampOrId || f.id === timestampOrId);\n\n    if (indexToDelete >= 0) {\n      this.MonacoEditor.unDecorate(this.feedbacksArr[indexToDelete].id);\n      this.feedbacksArr.splice(indexToDelete, 1);\n    }\n  }\n\n  changeType(timestamp, newType) {\n    let f = this.feedbacksArr.find(f => f.timestamp === timestamp);\n    f.type = newType;\n    this.MonacoEditor.unDecorate(timestamp);\n    this.MonacoEditor.decorate(f.getDecorationData());\n  }\n\n  changeBody(timestamp, newBody) {\n    let f = this.feedbacksArr.find(f => f.timestamp === timestamp);\n    f.body = newBody;\n  }\n\n  undecorateAll() {\n    this.feedbacksArr.forEach(f => this.MonacoEditor.unDecorate(f.timestamp));\n  }\n\n}\n\nexport default Feedbacks;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/Feedbacks.ts"],"names":["Feedbacks","constructor","MonacoEditor","feedbacksArr","timeoutId","add","getAll","getTypesByFileKey","result","forEach","file_key","type","includes","push","get","idOrTimestamp","find","f","id","timestamp","feedbacks","map","Date","now","getDecorationData","data","body","delete","timestampOrId","indexToDelete","findIndex","unDecorate","splice","changeType","newType","decorate","changeBody","newBody","undecorateAll"],"mappings":"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","sourcesContent":["/**\r\n * timestamp,\r\n * id,\r\n * position,\r\n * type,\r\n * body,\r\n * file_key\r\n */\r\nclass Feedbacks {\r\n  private feedbacksArr: any[];\r\n\r\n  private MonacoEditor: any;\r\n\r\n  private timeoutId: any;\r\n\r\n  constructor(MonacoEditor, feedbacksArr = []) {\r\n    this.feedbacksArr = [];\r\n    this.MonacoEditor = MonacoEditor;\r\n    this.timeoutId = null;\r\n\r\n    this.add(...feedbacksArr);\r\n  }\r\n\r\n  getAll() {\r\n    return [...this.feedbacksArr];\r\n  }\r\n\r\n  getTypesByFileKey() {\r\n    let result = {};\r\n\r\n    // eslint-disable-next-line camelcase\r\n    this.feedbacksArr.forEach(({ file_key, type }) => {\r\n      result[file_key] = result[file_key] || [];\r\n      if (!result[file_key].includes(type)) {\r\n        result[file_key].push(type);\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  get(idOrTimestamp) {\r\n    return {\r\n\r\n      ...this.feedbacksArr.find(\r\n        (f) => f.id === idOrTimestamp || f.timestamp === idOrTimestamp,\r\n      ),\r\n    };\r\n  }\r\n\r\n  add(...feedbacks) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    feedbacks = feedbacks.map((f) => ({\r\n      timestamp: Date.now(),\r\n      ...f,\r\n      getDecorationData() {\r\n        let data = { ...this };\r\n        delete data.body;\r\n\r\n        return data;\r\n      },\r\n    }));\r\n\r\n    this.feedbacksArr.push(...feedbacks);\r\n\r\n    return feedbacks;\r\n  }\r\n\r\n  delete(timestampOrId) {\r\n    let indexToDelete = this.feedbacksArr.findIndex(\r\n      (f) => f.timestamp === timestampOrId || f.id === timestampOrId,\r\n    );\r\n    if (indexToDelete >= 0) {\r\n      this.MonacoEditor.unDecorate(this.feedbacksArr[indexToDelete].id);\r\n      this.feedbacksArr.splice(indexToDelete, 1);\r\n    }\r\n  }\r\n\r\n  changeType(timestamp, newType) {\r\n    let f = this.feedbacksArr.find((f) => f.timestamp === timestamp);\r\n    f.type = newType;\r\n\r\n    this.MonacoEditor.unDecorate(timestamp);\r\n    this.MonacoEditor.decorate(f.getDecorationData());\r\n  }\r\n\r\n  changeBody(timestamp, newBody) {\r\n    let f = this.feedbacksArr.find((f) => f.timestamp === timestamp);\r\n    f.body = newBody;\r\n  }\r\n\r\n  undecorateAll() {\r\n    this.feedbacksArr.forEach((f) => this.MonacoEditor.unDecorate(f.timestamp));\r\n  }\r\n}\r\n\r\nexport default Feedbacks;\r\n"]},"metadata":{},"sourceType":"module"}