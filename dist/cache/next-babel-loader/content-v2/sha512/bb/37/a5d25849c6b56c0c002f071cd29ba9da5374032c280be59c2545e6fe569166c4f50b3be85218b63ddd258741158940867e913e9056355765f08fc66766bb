{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Header\\\\AccountNotificationsTooltip\\\\AccountNotificationsTooltip.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\nimport { useRouter } from 'next/router';\nimport UserService from '~/services/User.service';\nimport styles from './AccountNotificationsTooltip.module.scss';\nimport { useOutsideClick } from '~/services/Hooks';\nimport { logoutUser } from '~/redux/user/user.actions';\n\nfunction AccountNotificationsTooltip({\n  user,\n  dispatch\n}) {\n  const ref = useRef(null);\n  const router = useRouter();\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n\n  const logout = () => {\n    UserService.logout().then(() => {\n      router.replace('/').then(() => {\n        dispatch(logoutUser());\n      });\n    });\n  };\n\n  const toggleToolip = () => setIsOpen(!isOpen);\n\n  useOutsideClick(ref, () => setIsOpen(false));\n  return __jsx(\"div\", {\n    ref: ref,\n    className: styles['account-notifications-tooltip'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(\"button\", {\n    type: \"button\",\n    onClick: toggleToolip,\n    className: styles.tooltip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: styles.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(FontAwesomeIcon, {\n    width: \"16\",\n    icon: faBell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }), user.notifications.unreadCount > 0 && __jsx(\"span\", {\n    className: `${styles['unread-badge']} text-white text-center text-xs`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, user.notifications.unreadCount))), isOpen && test);\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nconst connector = connect(mapStateToProps);\nexport default connector(AccountNotificationsTooltip);","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Header/AccountNotificationsTooltip/AccountNotificationsTooltip.tsx"],"names":["React","useState","useRef","connect","FontAwesomeIcon","faBell","useRouter","UserService","styles","useOutsideClick","logoutUser","AccountNotificationsTooltip","user","dispatch","ref","router","isOpen","setIsOpen","logout","then","replace","toggleToolip","tooltip","icon","notifications","unreadCount","test","mapStateToProps","state","connector"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AAEA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAGA,OAAOC,MAAP,MAAmB,2CAAnB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,UAAT,QAA2B,2BAA3B;;AAEA,SAASC,2BAAT,CAAqC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAArC,EAA2F;AACzF,QAAMC,GAAG,GAAGZ,MAAM,CAAC,IAAD,CAAlB;AACA,QAAMa,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAM;AAAA,OAACU,MAAD;AAAA,OAASC;AAAT,MAAsBhB,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMiB,MAAM,GAAG,MAAM;AACnBX,IAAAA,WAAW,CAACW,MAAZ,GAAqBC,IAArB,CAA0B,MAAM;AAC9BJ,MAAAA,MAAM,CAACK,OAAP,CAAe,GAAf,EAAoBD,IAApB,CAAyB,MAAM;AAC7BN,QAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACD,OAFD;AAGD,KAJD;AAKD,GAND;;AAQA,QAAMW,YAAY,GAAG,MAAMJ,SAAS,CAAC,CAACD,MAAF,CAApC;;AAEAP,EAAAA,eAAe,CAACK,GAAD,EAAM,MAAMG,SAAS,CAAC,KAAD,CAArB,CAAf;AAEA,SACE;AAAK,IAAA,GAAG,EAAEH,GAAV;AAAe,IAAA,SAAS,EAAEN,MAAM,CAAC,+BAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEa,YAA/B;AAA6C,IAAA,SAAS,EAAEb,MAAM,CAACc,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEd,MAAM,CAACe,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD;AAAiB,IAAA,KAAK,EAAC,IAAvB;AAA4B,IAAA,IAAI,EAAElB,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGO,IAAI,CAACY,aAAL,CAAmBC,WAAnB,GAAiC,CAAjC,IACD;AAAM,IAAA,SAAS,EAAG,GAAEjB,MAAM,CAAC,cAAD,CAAiB,iCAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,IAAI,CAACY,aAAL,CAAmBC,WADtB,CAHF,CADF,CADF,EAWGT,MAAM,IACLU,IAZJ,CADF;AAiBD;;AAED,SAASC,eAAT,CAAyBC,KAAzB,EAA2C;AACzC,SAAO;AACLhB,IAAAA,IAAI,EAAEgB,KAAK,CAAChB;AADP,GAAP;AAGD;;AAED,MAAMiB,SAAS,GAAG1B,OAAO,CAACwB,eAAD,CAAzB;AAEA,eAAeE,SAAS,CAAClB,2BAAD,CAAxB","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport Link from 'next/link';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\r\nimport { useRouter } from 'next/router';\r\nimport UserService from '~/services/User.service';\r\nimport { RootState } from '~/redux/root.reducer';\r\n\r\nimport styles from './AccountNotificationsTooltip.module.scss';\r\nimport { useOutsideClick } from '~/services/Hooks';\r\nimport { logoutUser } from '~/redux/user/user.actions';\r\n\r\nfunction AccountNotificationsTooltip({ user, dispatch }: ConnectedProps<typeof connector>) {\r\n  const ref = useRef(null);\r\n  const router = useRouter();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const logout = () => {\r\n    UserService.logout().then(() => {\r\n      router.replace('/').then(() => {\r\n        dispatch(logoutUser());\r\n      });\r\n    });\r\n  };\r\n\r\n  const toggleToolip = () => setIsOpen(!isOpen);\r\n\r\n  useOutsideClick(ref, () => setIsOpen(false));\r\n\r\n  return (\r\n    <div ref={ref} className={styles['account-notifications-tooltip']}>\r\n      <button type=\"button\" onClick={toggleToolip} className={styles.tooltip}>\r\n        <div className={styles.icon}>\r\n          <FontAwesomeIcon width=\"16\" icon={faBell} />\r\n          {user.notifications.unreadCount > 0 && (\r\n          <span className={`${styles['unread-badge']} text-white text-center text-xs`}>\r\n            {user.notifications.unreadCount}\r\n          </span>\r\n          )}\r\n        </div>\r\n      </button>\r\n      {isOpen && (\r\n        test\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state: RootState) {\r\n  return {\r\n    user: state.user,\r\n  };\r\n}\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport default connector(AccountNotificationsTooltip);\r\n"]},"metadata":{},"sourceType":"module"}