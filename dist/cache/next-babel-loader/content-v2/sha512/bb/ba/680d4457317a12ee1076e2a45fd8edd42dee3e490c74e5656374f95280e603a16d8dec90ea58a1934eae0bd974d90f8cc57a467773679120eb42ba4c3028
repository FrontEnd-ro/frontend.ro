{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Editor\\\\FolderBrowser\\\\FolderBrowse.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport { faChevronDown, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Button from '~/components/Button';\nimport FileIcons from '~/services/utils/FileIcons';\nimport FilesList from '../FileList/FilesList';\nimport styles from './FolderBrowse.module.scss';\n\nclass FolderBrowse extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"toggle\", value => {\n      const {\n        renamedAsset,\n        folderKey\n      } = this.props;\n      const {\n        isOpen\n      } = this.state;\n\n      if (renamedAsset && renamedAsset.key === folderKey) {\n        return;\n      }\n\n      this.setState({\n        isOpen: value === undefined ? !isOpen : value\n      });\n    });\n\n    _defineProperty(this, \"onContextMenu\", e => {\n      const {\n        readOnly,\n        openMenu\n      } = this.props;\n\n      if (!readOnly) {\n        this.toggle(true);\n        openMenu(e, true);\n      }\n    });\n\n    _defineProperty(this, \"containsFileWithFeedback\", () => {\n      const {\n        feedbacks,\n        folderStructure,\n        folderKey\n      } = this.props;\n      return !!Object.keys(feedbacks).find(fileKey => {\n        return folderStructure.hasFile(fileKey, folderStructure.getFolder(folderKey).folder);\n      });\n    });\n\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  render() {\n    const {\n      folderKey,\n      folderStructure,\n      ctxMenuKey,\n      readOnly,\n      renamedAsset,\n      selectFile,\n      openMenu,\n      enterEditMode,\n      onRename,\n      saveAsset,\n      selectedFileKey,\n      feedbacks\n    } = this.props;\n    let {\n      folders,\n      files,\n      name\n    } = folderStructure.getFolder(folderKey).folder;\n    const {\n      isOpen\n    } = this.state;\n    files = files.map(f => _objectSpread(_objectSpread({}, f), {}, {\n      icon: FileIcons.getIcon(f.name)\n    }));\n    return __jsx(\"div\", {\n      className: `\n        ${styles['folder-browse']}\n        ${isOpen ? styles['is--open'] : ''}\n        ${this.containsFileWithFeedback() ? styles['has--file-with-feedback'] : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      onClick: () => this.toggle(),\n      onContextMenu: this.onContextMenu,\n      \"data-key\": folderKey,\n      className: `\n            ${styles['folder-button']} \n            btn--transparent \n            ellipsis-overflow\n            ${renamedAsset.key === folderKey ? 'is-being-renamed' : ''}\n            ${folderKey === ctxMenuKey ? 'is--ctx-selected' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, __jsx(\"form\", {\n      noValidate: true,\n      onSubmit: saveAsset,\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, __jsx(React.Fragment, null, isOpen ? __jsx(FontAwesomeIcon, {\n      style: {\n        marginRight: '0.5em'\n      },\n      icon: faChevronDown,\n      width: \"18\",\n      height: \"18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }\n    }) : __jsx(FontAwesomeIcon, {\n      style: {\n        marginRight: '0.5em'\n      },\n      icon: faChevronRight,\n      width: \"18\",\n      height: \"18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 19\n      }\n    })), __jsx(\"input\", {\n      className: styles['folder-input'],\n      type: \"text\",\n      value: renamedAsset.key === folderKey ? renamedAsset.name : name,\n      disabled: renamedAsset.key !== folderKey,\n      onChange: onRename // eslint-disable-next-line jsx-a11y/no-autofocus\n      ,\n      autoFocus: renamedAsset.key === folderKey,\n      onBlur: saveAsset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }), __jsx(Button, {\n      hidden: true,\n      loading: renamedAsset.key !== folderKey,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }))), folders.map(folder => __jsx(FolderBrowse, {\n      key: folder.key,\n      folderKey: folder.key,\n      folderStructure: folderStructure,\n      feedbacks: feedbacks,\n      readOnly: readOnly,\n      selectFile: selectFile,\n      selectedFileKey: selectedFileKey,\n      renamedAsset: renamedAsset,\n      ctxMenuKey: ctxMenuKey,\n      openMenu: openMenu,\n      enterEditMode: enterEditMode,\n      onRename: onRename,\n      saveAsset: saveAsset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    })), __jsx(FilesList, {\n      readOnly: readOnly,\n      files: files,\n      feedbacks: feedbacks,\n      ctxMenuKey: ctxMenuKey,\n      selectFile: selectFile,\n      selectedFileKey: selectedFileKey,\n      enterEditMode: enterEditMode,\n      openMenu: openMenu,\n      renamedAsset: renamedAsset,\n      onRename: onRename,\n      saveAsset: saveAsset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default FolderBrowse;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/FolderBrowser/FolderBrowse.tsx"],"names":["faChevronDown","faChevronRight","FontAwesomeIcon","React","Button","FileIcons","FilesList","styles","FolderBrowse","Component","constructor","props","value","renamedAsset","folderKey","isOpen","state","key","setState","undefined","e","readOnly","openMenu","toggle","feedbacks","folderStructure","Object","keys","find","fileKey","hasFile","getFolder","folder","render","ctxMenuKey","selectFile","enterEditMode","onRename","saveAsset","selectedFileKey","folders","files","name","map","f","icon","getIcon","containsFileWithFeedback","onContextMenu","marginRight"],"mappings":";;;;;;;;;AAAA;;AACA;AAEA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,mCAA9C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AAGA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;;AAqBA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAAyD;AACvDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,oCAQTC,KAAD,IAAqB;AAC5B,YAAM;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA;AAAhB,UAA8B,KAAKH,KAAzC;AACA,YAAM;AAAEI,QAAAA;AAAF,UAAa,KAAKC,KAAxB;;AAEA,UAAIH,YAAY,IAAIA,YAAY,CAACI,GAAb,KAAqBH,SAAzC,EAAoD;AAClD;AACD;;AAED,WAAKI,QAAL,CAAc;AAAEH,QAAAA,MAAM,EAAEH,KAAK,KAAKO,SAAV,GAAsB,CAACJ,MAAvB,GAAgCH;AAA1C,OAAd;AACD,KAjBkB;;AAAA,2CAmBFQ,CAAD,IAAO;AACrB,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAyB,KAAKX,KAApC;;AAEA,UAAI,CAACU,QAAL,EAAe;AACb,aAAKE,MAAL,CAAY,IAAZ;AACAD,QAAAA,QAAQ,CAACF,CAAD,EAAI,IAAJ,CAAR;AACD;AACF,KA1BkB;;AAAA,sDA4BQ,MAAM;AAC/B,YAAM;AAAEI,QAAAA,SAAF;AAAaC,QAAAA,eAAb;AAA8BX,QAAAA;AAA9B,UAA4C,KAAKH,KAAvD;AACA,aAAO,CAAC,CAACe,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBI,IAAvB,CAA6BC,OAAD,IAAa;AAChD,eAAOJ,eAAe,CAACK,OAAhB,CAAwBD,OAAxB,EAAiCJ,eAAe,CAACM,SAAhB,CAA0BjB,SAA1B,EAAqCkB,MAAtE,CAAP;AACD,OAFQ,CAAT;AAGD,KAjCkB;;AAGjB,SAAKhB,KAAL,GAAa;AACXD,MAAAA,MAAM,EAAE;AADG,KAAb;AAGD;;AA6BDkB,EAAAA,MAAM,GAAG;AACP,UAAM;AACJnB,MAAAA,SADI;AAEJW,MAAAA,eAFI;AAGJS,MAAAA,UAHI;AAIJb,MAAAA,QAJI;AAKJR,MAAAA,YALI;AAMJsB,MAAAA,UANI;AAOJb,MAAAA,QAPI;AAQJc,MAAAA,aARI;AASJC,MAAAA,QATI;AAUJC,MAAAA,SAVI;AAWJC,MAAAA,eAXI;AAYJf,MAAAA;AAZI,QAaF,KAAKb,KAbT;AAcA,QAAI;AAAE6B,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,QAA2BjB,eAAe,CAACM,SAAhB,CAA0BjB,SAA1B,EAAqCkB,MAApE;AACA,UAAM;AAAEjB,MAAAA;AAAF,QAAa,KAAKC,KAAxB;AAEAyB,IAAAA,KAAK,GAAGA,KAAK,CAACE,GAAN,CAAWC,CAAD,oCAAaA,CAAb;AAAgBC,MAAAA,IAAI,EAAExC,SAAS,CAACyC,OAAV,CAAkBF,CAAC,CAACF,IAApB;AAAtB,MAAV,CAAR;AAEA,WACE;AAAK,MAAA,SAAS,EAAG;AACvB,UAAUnC,MAAM,CAAC,eAAD,CAAkB;AAClC,UAAUQ,MAAM,GAAGR,MAAM,CAAC,UAAD,CAAT,GAAwB,EAAG;AAC3C,UAAU,KAAKwC,wBAAL,KAAkCxC,MAAM,CAAC,yBAAD,CAAxC,GAAsE,EAAG,EAH7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE;AACE,MAAA,OAAO,EAAE,MAAM,KAAKgB,MAAL,EADjB;AAEE,MAAA,aAAa,EAAE,KAAKyB,aAFtB;AAGE,kBAAUlC,SAHZ;AAIE,MAAA,SAAS,EAAG;AACtB,cAAcP,MAAM,CAAC,eAAD,CAAkB;AACtC;AACA;AACA,cAAcM,YAAY,CAACI,GAAb,KAAqBH,SAArB,GAAiC,kBAAjC,GAAsD,EAAG;AACvE,cAAcA,SAAS,KAAKoB,UAAd,GAA2B,kBAA3B,GAAgD,EAAG,EATzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWE;AAAM,MAAA,UAAU,MAAhB;AAAiB,MAAA,QAAQ,EAAEI,SAA3B;AAAsC,MAAA,SAAS,EAAC,2BAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,4BACGvB,MAAM,GACH,MAAC,eAAD;AAAiB,MAAA,KAAK,EAAE;AAAEkC,QAAAA,WAAW,EAAE;AAAf,OAAxB;AAAkD,MAAA,IAAI,EAAEjD,aAAxD;AAAuE,MAAA,KAAK,EAAC,IAA7E;AAAkF,MAAA,MAAM,EAAC,IAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADG,GAEH,MAAC,eAAD;AAAiB,MAAA,KAAK,EAAE;AAAEiD,QAAAA,WAAW,EAAE;AAAf,OAAxB;AAAkD,MAAA,IAAI,EAAEhD,cAAxD;AAAwE,MAAA,KAAK,EAAC,IAA9E;AAAmF,MAAA,MAAM,EAAC,IAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHN,CADF,EAME;AACE,MAAA,SAAS,EAAEM,MAAM,CAAC,cAAD,CADnB;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAEM,YAAY,CAACI,GAAb,KAAqBH,SAArB,GAAiCD,YAAY,CAAC6B,IAA9C,GAAqDA,IAH9D;AAIE,MAAA,QAAQ,EAAE7B,YAAY,CAACI,GAAb,KAAqBH,SAJjC;AAKE,MAAA,QAAQ,EAAEuB,QALZ,CAME;AANF;AAOE,MAAA,SAAS,EAAExB,YAAY,CAACI,GAAb,KAAqBH,SAPlC;AAQE,MAAA,MAAM,EAAEwB,SARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAiBE,MAAC,MAAD;AAAQ,MAAA,MAAM,MAAd;AAAe,MAAA,OAAO,EAAEzB,YAAY,CAACI,GAAb,KAAqBH,SAA7C;AAAwD,MAAA,IAAI,EAAC,QAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,CAXF,CALF,EAoCG0B,OAAO,CAACG,GAAR,CAAaX,MAAD,IACX,MAAC,YAAD;AACE,MAAA,GAAG,EAAEA,MAAM,CAACf,GADd;AAEE,MAAA,SAAS,EAAEe,MAAM,CAACf,GAFpB;AAGE,MAAA,eAAe,EAAEQ,eAHnB;AAIE,MAAA,SAAS,EAAED,SAJb;AAKE,MAAA,QAAQ,EAAEH,QALZ;AAME,MAAA,UAAU,EAAEc,UANd;AAOE,MAAA,eAAe,EAAEI,eAPnB;AAQE,MAAA,YAAY,EAAE1B,YARhB;AASE,MAAA,UAAU,EAAEqB,UATd;AAUE,MAAA,QAAQ,EAAEZ,QAVZ;AAWE,MAAA,aAAa,EAAEc,aAXjB;AAYE,MAAA,QAAQ,EAAEC,QAZZ;AAaE,MAAA,SAAS,EAAEC,SAbb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CApCH,EAqDE,MAAC,SAAD;AACE,MAAA,QAAQ,EAAEjB,QADZ;AAEE,MAAA,KAAK,EAAEoB,KAFT;AAGE,MAAA,SAAS,EAAEjB,SAHb;AAIE,MAAA,UAAU,EAAEU,UAJd;AAKE,MAAA,UAAU,EAAEC,UALd;AAME,MAAA,eAAe,EAAEI,eANnB;AAOE,MAAA,aAAa,EAAEH,aAPjB;AAQE,MAAA,QAAQ,EAAEd,QARZ;AASE,MAAA,YAAY,EAAET,YAThB;AAUE,MAAA,QAAQ,EAAEwB,QAVZ;AAWE,MAAA,SAAS,EAAEC,SAXb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArDF,CADF;AAqED;;AA7HsD;;AAgIzD,eAAe9B,YAAf","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n\r\nimport { faChevronDown, faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Button from '~/components/Button';\r\nimport FileIcons from '~/services/utils/FileIcons';\r\nimport FolderStructure from '~/services/utils/FolderStructure';\r\nimport Feedbacks from '../Feedbacks';\r\nimport FilesList from '../FileList/FilesList';\r\n\r\nimport styles from './FolderBrowse.module.scss';\r\n\r\ninterface Props {\r\n  folderKey: string;\r\n  readOnly: boolean;\r\n  ctxMenuKey: string;\r\n  feedbacks: Feedbacks;\r\n  selectedFileKey: string;\r\n  folderStructure: FolderStructure;\r\n  renamedAsset: { key: string, name: string, type: 'FILE' | 'FOLDER' };\r\n  onRename: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  saveAsset: (e: any) => void;\r\n  selectFile: (key: string) => void;\r\n  enterEditMode: (key: string) => void;\r\n  openMenu: (e: Event, isFolder: boolean) => void;\r\n}\r\n\r\ninterface State {\r\n  isOpen: boolean;\r\n}\r\n\r\nclass FolderBrowse extends React.Component<Props, State> {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isOpen: false,\r\n    };\r\n  }\r\n\r\n  toggle = (value?: boolean) => {\r\n    const { renamedAsset, folderKey } = this.props;\r\n    const { isOpen } = this.state;\r\n\r\n    if (renamedAsset && renamedAsset.key === folderKey) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ isOpen: value === undefined ? !isOpen : value });\r\n  }\r\n\r\n  onContextMenu = (e) => {\r\n    const { readOnly, openMenu } = this.props;\r\n\r\n    if (!readOnly) {\r\n      this.toggle(true);\r\n      openMenu(e, true);\r\n    }\r\n  }\r\n\r\n  containsFileWithFeedback = () => {\r\n    const { feedbacks, folderStructure, folderKey } = this.props;\r\n    return !!Object.keys(feedbacks).find((fileKey) => {\r\n      return folderStructure.hasFile(fileKey, folderStructure.getFolder(folderKey).folder);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      folderKey,\r\n      folderStructure,\r\n      ctxMenuKey,\r\n      readOnly,\r\n      renamedAsset,\r\n      selectFile,\r\n      openMenu,\r\n      enterEditMode,\r\n      onRename,\r\n      saveAsset,\r\n      selectedFileKey,\r\n      feedbacks,\r\n    } = this.props;\r\n    let { folders, files, name } = folderStructure.getFolder(folderKey).folder;\r\n    const { isOpen } = this.state;\r\n\r\n    files = files.map((f) => ({ ...f, icon: FileIcons.getIcon(f.name) }));\r\n\r\n    return (\r\n      <div className={`\r\n        ${styles['folder-browse']}\r\n        ${isOpen ? styles['is--open'] : ''}\r\n        ${this.containsFileWithFeedback() ? styles['has--file-with-feedback'] : ''}`}\r\n      >\r\n        <div\r\n          onClick={() => this.toggle()}\r\n          onContextMenu={this.onContextMenu}\r\n          data-key={folderKey}\r\n          className={`\r\n            ${styles['folder-button']} \r\n            btn--transparent \r\n            ellipsis-overflow\r\n            ${renamedAsset.key === folderKey ? 'is-being-renamed' : ''}\r\n            ${folderKey === ctxMenuKey ? 'is--ctx-selected' : ''}`}\r\n        >\r\n          <form noValidate onSubmit={saveAsset} className=\"d-flex align-items-center\">\r\n            <>\r\n              {isOpen\r\n                ? <FontAwesomeIcon style={{ marginRight: '0.5em' }} icon={faChevronDown} width=\"18\" height=\"18\" />\r\n                : <FontAwesomeIcon style={{ marginRight: '0.5em' }} icon={faChevronRight} width=\"18\" height=\"18\" /> }\r\n            </>\r\n            <input\r\n              className={styles['folder-input']}\r\n              type=\"text\"\r\n              value={renamedAsset.key === folderKey ? renamedAsset.name : name}\r\n              disabled={renamedAsset.key !== folderKey}\r\n              onChange={onRename}\r\n              // eslint-disable-next-line jsx-a11y/no-autofocus\r\n              autoFocus={renamedAsset.key === folderKey}\r\n              onBlur={saveAsset}\r\n            />\r\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\r\n            <Button hidden loading={renamedAsset.key !== folderKey} type=\"submit\" />\r\n          </form>\r\n        </div>\r\n        {folders.map((folder) => (\r\n          <FolderBrowse\r\n            key={folder.key}\r\n            folderKey={folder.key}\r\n            folderStructure={folderStructure}\r\n            feedbacks={feedbacks}\r\n            readOnly={readOnly}\r\n            selectFile={selectFile}\r\n            selectedFileKey={selectedFileKey}\r\n            renamedAsset={renamedAsset}\r\n            ctxMenuKey={ctxMenuKey}\r\n            openMenu={openMenu}\r\n            enterEditMode={enterEditMode}\r\n            onRename={onRename}\r\n            saveAsset={saveAsset}\r\n          />\r\n        ))}\r\n        <FilesList\r\n          readOnly={readOnly}\r\n          files={files}\r\n          feedbacks={feedbacks}\r\n          ctxMenuKey={ctxMenuKey}\r\n          selectFile={selectFile}\r\n          selectedFileKey={selectedFileKey}\r\n          enterEditMode={enterEditMode}\r\n          openMenu={openMenu}\r\n          renamedAsset={renamedAsset}\r\n          onRename={onRename}\r\n          saveAsset={saveAsset}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FolderBrowse;\r\n"]},"metadata":{},"sourceType":"module"}