{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Editor\\\\BasicEditor\\\\BasicEditor.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport * as Monaco from '../monaco';\nimport FileIcons from '~/services/utils/FileIcons';\nimport InitForm from '../InitForm/InitForm';\nimport FolderStructure from '~/services/utils/FolderStructure';\nimport MonacoBase from '../Monaco.base';\nimport FileSwitcher from '../FileSwitcher/FileSwitcher';\nimport styles from '../Editor.module.scss';\n\n// extends MonacoBase\nclass BasicMonacoEditor extends MonacoBase {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"initEditor\", () => {\n      const {\n        readOnly\n      } = this.props;\n      const {\n        folderStructure,\n        selectedFileKey\n      } = this.state;\n\n      if (!folderStructure.files.length && !folderStructure.folders.length) {\n        return;\n      }\n\n      let {\n        file\n      } = folderStructure.getFile(selectedFileKey);\n      this.editor = Monaco.create(this.editorRef.current, {\n        readOnly,\n        value: file ? file.content : '',\n        scrollBeyondLastLine: false\n      });\n\n      if (file) {\n        this.onFileSelect(file.key);\n        this.updateLanguageBasedOnFileName(file.name);\n      }\n    });\n\n    _defineProperty(this, \"onModelChange\", () => {\n      const {\n        folderStructure\n      } = this.state;\n      const {\n        onChange\n      } = this.props;\n      folderStructure.setContent(this.state.selectedFileKey, this.editor.getValue());\n\n      if (onChange) {\n        onChange(folderStructure);\n      }\n\n      this.setState({\n        folderStructure\n      });\n    });\n\n    this.state = {\n      folderStructure: new FolderStructure(props.folderStructure)\n    };\n  }\n\n  componentDidMount() {\n    this.initEditor();\n  }\n\n  render() {\n    const {\n      readOnly\n    } = this.props;\n    const {\n      folderStructure,\n      fileSwitcherWidth,\n      selectedFileKey,\n      isDropable\n    } = this.state;\n    const selectedFile = folderStructure.getFile(selectedFileKey).file;\n    return __jsx(\"div\", {\n      className: `\n        ${styles['editor-wrapper']}\n        ${isDropable ? styles['is--dropable'] : ''}\n      `,\n      onDragEnter: this.onDragEnter,\n      onDragLeave: this.onDragLeave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, folderStructure.files.length || folderStructure.folders.length ? __jsx(React.Fragment, null, __jsx(FileSwitcher, {\n      maxHeight: 500,\n      folderStructure: folderStructure,\n      selectedFileKey: selectedFileKey,\n      readOnly: readOnly,\n      onFileAdd: this.onFileAdd,\n      onFolderAdd: this.onFolderAdd,\n      onSelect: this.onFileSelect,\n      onFileRename: this.onFileRename,\n      onFolderRename: this.onFolderRename,\n      onFileDelete: this.onFileDelete,\n      onFolderDelete: this.onFolderDelete,\n      onDownload: this.onDownload,\n      onResize: this.onResize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      className: `\n                ${styles.editor}\n                ${selectedFileKey ? '' : styles['has--no-selected-file']}\n              `,\n      style: {\n        width: `calc(100% - ${fileSwitcherWidth}px)`,\n        maxWidth: `calc(100% - ${fileSwitcherWidth}px)`\n      },\n      ref: this.editorRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }), selectedFile && __jsx(\"p\", {\n      className: `${styles['selected-file']} d-flex justify-content-center align-items-center`,\n      title: selectedFile.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, __jsx(\"img\", {\n      width: \"20\",\n      src: FileIcons.getIconUrl(selectedFile.name),\n      alt: \"icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }), __jsx(\"span\", {\n      className: \"ellipsis-overflow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, selectedFile.name)), __jsx(\"label\", {\n      className: \"upload-label pin-full d-flex justify-content-center align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      className: \"icon-check mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }), \"Drop to replace\"), __jsx(\"input\", {\n      className: \"pin-full\",\n      type: \"file\",\n      multiple: true,\n      onChange: this.onReplace,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }))) : __jsx(InitForm, {\n      createFirstFile: this.createFirstFile,\n      uploadStructure: this.uploadStructure,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default BasicMonacoEditor;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/BasicEditor/BasicEditor.tsx"],"names":["React","Monaco","FileIcons","InitForm","FolderStructure","MonacoBase","FileSwitcher","styles","BasicMonacoEditor","constructor","props","readOnly","folderStructure","selectedFileKey","state","files","length","folders","file","getFile","editor","create","editorRef","current","value","content","scrollBeyondLastLine","onFileSelect","key","updateLanguageBasedOnFileName","name","onChange","setContent","getValue","setState","componentDidMount","initEditor","render","fileSwitcherWidth","isDropable","selectedFile","onDragEnter","onDragLeave","onFileAdd","onFolderAdd","onFileRename","onFolderRename","onFileDelete","onFolderDelete","onDownload","onResize","width","maxWidth","getIconUrl","onReplace","createFirstFile","uploadStructure"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;;AAUA;AACA,MAAMC,iBAAN,SAAgCH,UAAhC,CAA2C;AACzCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,wCAYN,MAAM;AACjB,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKD,KAA1B;AACA,YAAM;AAAEE,QAAAA,eAAF;AAAmBC,QAAAA;AAAnB,UAAuC,KAAKC,KAAlD;;AAEA,UAAI,CAACF,eAAe,CAACG,KAAhB,CAAsBC,MAAvB,IAAiC,CAACJ,eAAe,CAACK,OAAhB,CAAwBD,MAA9D,EAAsE;AACpE;AACD;;AAED,UAAI;AAAEE,QAAAA;AAAF,UAAWN,eAAe,CAACO,OAAhB,CAAwBN,eAAxB,CAAf;AAEA,WAAKO,MAAL,GAAcnB,MAAM,CAACoB,MAAP,CAAc,KAAKC,SAAL,CAAeC,OAA7B,EAAsC;AAClDZ,QAAAA,QADkD;AAElDa,QAAAA,KAAK,EAAEN,IAAI,GAAGA,IAAI,CAACO,OAAR,GAAkB,EAFqB;AAGlDC,QAAAA,oBAAoB,EAAE;AAH4B,OAAtC,CAAd;;AAMA,UAAIR,IAAJ,EAAU;AACR,aAAKS,YAAL,CAAkBT,IAAI,CAACU,GAAvB;AACA,aAAKC,6BAAL,CAAmCX,IAAI,CAACY,IAAxC;AACD;AACF,KAhCkB;;AAAA,2CAkCH,MAAM;AACpB,YAAM;AAAElB,QAAAA;AAAF,UAAsB,KAAKE,KAAjC;AACA,YAAM;AAAEiB,QAAAA;AAAF,UAAe,KAAKrB,KAA1B;AAEAE,MAAAA,eAAe,CAACoB,UAAhB,CAA2B,KAAKlB,KAAL,CAAWD,eAAtC,EAAuD,KAAKO,MAAL,CAAYa,QAAZ,EAAvD;;AAEA,UAAIF,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACnB,eAAD,CAAR;AACD;;AAED,WAAKsB,QAAL,CAAc;AAAEtB,QAAAA;AAAF,OAAd;AACD,KA7CkB;;AAGjB,SAAKE,KAAL,GAAa;AACXF,MAAAA,eAAe,EAAE,IAAIR,eAAJ,CAAoBM,KAAK,CAACE,eAA1B;AADN,KAAb;AAGD;;AAEDuB,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD;;AAqCDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE1B,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,UAAM;AACJE,MAAAA,eADI;AACa0B,MAAAA,iBADb;AACgCzB,MAAAA,eADhC;AACiD0B,MAAAA;AADjD,QAEF,KAAKzB,KAFT;AAGA,UAAM0B,YAAY,GAAG5B,eAAe,CAACO,OAAhB,CAAwBN,eAAxB,EAAyCK,IAA9D;AAEA,WACE;AACE,MAAA,SAAS,EAAG;AACpB,UAAUX,MAAM,CAAC,gBAAD,CAAmB;AACnC,UAAUgC,UAAU,GAAGhC,MAAM,CAAC,cAAD,CAAT,GAA4B,EAAG;AACnD,OAJM;AAKE,MAAA,WAAW,EAAE,KAAKkC,WALpB;AAME,MAAA,WAAW,EAAE,KAAKC,WANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQG9B,eAAe,CAACG,KAAhB,CAAsBC,MAAtB,IAAgCJ,eAAe,CAACK,OAAhB,CAAwBD,MAAxD,GACC,4BACE,MAAC,YAAD;AACE,MAAA,SAAS,EAAE,GADb;AAEE,MAAA,eAAe,EAAEJ,eAFnB;AAGE,MAAA,eAAe,EAAEC,eAHnB;AAIE,MAAA,QAAQ,EAAEF,QAJZ;AAKE,MAAA,SAAS,EAAE,KAAKgC,SALlB;AAME,MAAA,WAAW,EAAE,KAAKC,WANpB;AAOE,MAAA,QAAQ,EAAE,KAAKjB,YAPjB;AAQE,MAAA,YAAY,EAAE,KAAKkB,YARrB;AASE,MAAA,cAAc,EAAE,KAAKC,cATvB;AAUE,MAAA,YAAY,EAAE,KAAKC,YAVrB;AAWE,MAAA,cAAc,EAAE,KAAKC,cAXvB;AAYE,MAAA,UAAU,EAAE,KAAKC,UAZnB;AAaE,MAAA,QAAQ,EAAE,KAAKC,QAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAgBE;AACE,MAAA,SAAS,EAAG;AAC1B,kBAAkB3C,MAAM,CAACa,MAAO;AAChC,kBAAkBP,eAAe,GAAG,EAAH,GAAQN,MAAM,CAAC,uBAAD,CAA0B;AACzE,eAJY;AAKE,MAAA,KAAK,EAAE;AACL4C,QAAAA,KAAK,EAAG,eAAcb,iBAAkB,KADnC;AAELc,QAAAA,QAAQ,EAAG,eAAcd,iBAAkB;AAFtC,OALT;AASE,MAAA,GAAG,EAAE,KAAKhB,SATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBF,EA2BGkB,YAAY,IACX;AAAG,MAAA,SAAS,EAAG,GAAEjC,MAAM,CAAC,eAAD,CAAkB,mDAAzC;AAA6F,MAAA,KAAK,EAAEiC,YAAY,CAACV,IAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,KAAK,EAAC,IAAX;AAAgB,MAAA,GAAG,EAAE5B,SAAS,CAACmD,UAAV,CAAqBb,YAAY,CAACV,IAAlC,CAArB;AAA8D,MAAA,GAAG,EAAC,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAM,MAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCU,YAAY,CAACV,IAAlD,CAFF,CA5BJ,EAiCE;AAAO,MAAA,SAAS,EAAC,wEAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,oBADF,EAKE;AAAO,MAAA,SAAS,EAAC,UAAjB;AAA4B,MAAA,IAAI,EAAC,MAAjC;AAAwC,MAAA,QAAQ,MAAhD;AAAiD,MAAA,QAAQ,EAAE,KAAKwB,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CAjCF,CADD,GA2CC,MAAC,QAAD;AAAU,MAAA,eAAe,EAAE,KAAKC,eAAhC;AAAiD,MAAA,eAAe,EAAE,KAAKC,eAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnDJ,CADF;AAwDD;;AA/GwC;;AAkH3C,eAAehD,iBAAf","sourcesContent":["import React from 'react';\r\nimport * as Monaco from '../monaco';\r\nimport FileIcons from '~/services/utils/FileIcons';\r\nimport InitForm from '../InitForm/InitForm';\r\nimport FolderStructure from '~/services/utils/FolderStructure';\r\nimport MonacoBase from '../Monaco.base';\r\nimport FileSwitcher from '../FileSwitcher/FileSwitcher';\r\n\r\nimport styles from '../Editor.module.scss';\r\n\r\ninterface BasicEditorProps {\r\n  onChange?: (folderStructure: FolderStructure) => void\r\n   & any }\r\n\r\ninterface BasicEditorState {\r\n  folderStructure: FolderStructure\r\n}\r\n\r\n// extends MonacoBase\r\nclass BasicMonacoEditor extends MonacoBase {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      folderStructure: new FolderStructure(props.folderStructure),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initEditor();\r\n  }\r\n\r\n  initEditor = () => {\r\n    const { readOnly } = this.props;\r\n    const { folderStructure, selectedFileKey } = this.state;\r\n\r\n    if (!folderStructure.files.length && !folderStructure.folders.length) {\r\n      return;\r\n    }\r\n\r\n    let { file } = folderStructure.getFile(selectedFileKey);\r\n\r\n    this.editor = Monaco.create(this.editorRef.current, {\r\n      readOnly,\r\n      value: file ? file.content : '',\r\n      scrollBeyondLastLine: false,\r\n    });\r\n\r\n    if (file) {\r\n      this.onFileSelect(file.key);\r\n      this.updateLanguageBasedOnFileName(file.name);\r\n    }\r\n  }\r\n\r\n  onModelChange = () => {\r\n    const { folderStructure } = this.state;\r\n    const { onChange } = this.props;\r\n\r\n    folderStructure.setContent(this.state.selectedFileKey, this.editor.getValue());\r\n\r\n    if (onChange) {\r\n      onChange(folderStructure);\r\n    }\r\n\r\n    this.setState({ folderStructure });\r\n  }\r\n\r\n  render() {\r\n    const { readOnly } = this.props;\r\n    const {\r\n      folderStructure, fileSwitcherWidth, selectedFileKey, isDropable,\r\n    } = this.state;\r\n    const selectedFile = folderStructure.getFile(selectedFileKey).file;\r\n\r\n    return (\r\n      <div\r\n        className={`\r\n        ${styles['editor-wrapper']}\r\n        ${isDropable ? styles['is--dropable'] : ''}\r\n      `}\r\n        onDragEnter={this.onDragEnter}\r\n        onDragLeave={this.onDragLeave}\r\n      >\r\n        {folderStructure.files.length || folderStructure.folders.length ? (\r\n          <>\r\n            <FileSwitcher\r\n              maxHeight={500}\r\n              folderStructure={folderStructure}\r\n              selectedFileKey={selectedFileKey}\r\n              readOnly={readOnly}\r\n              onFileAdd={this.onFileAdd}\r\n              onFolderAdd={this.onFolderAdd}\r\n              onSelect={this.onFileSelect}\r\n              onFileRename={this.onFileRename}\r\n              onFolderRename={this.onFolderRename}\r\n              onFileDelete={this.onFileDelete}\r\n              onFolderDelete={this.onFolderDelete}\r\n              onDownload={this.onDownload}\r\n              onResize={this.onResize}\r\n            />\r\n            <div\r\n              className={`\r\n                ${styles.editor}\r\n                ${selectedFileKey ? '' : styles['has--no-selected-file']}\r\n              `}\r\n              style={{\r\n                width: `calc(100% - ${fileSwitcherWidth}px)`,\r\n                maxWidth: `calc(100% - ${fileSwitcherWidth}px)`,\r\n              }}\r\n              ref={this.editorRef}\r\n            />\r\n            {selectedFile && (\r\n              <p className={`${styles['selected-file']} d-flex justify-content-center align-items-center`} title={selectedFile.name}>\r\n                <img width=\"20\" src={FileIcons.getIconUrl(selectedFile.name)} alt=\"icon\" />\r\n                <span className=\"ellipsis-overflow\">{selectedFile.name}</span>\r\n              </p>\r\n            )}\r\n            <label className=\"upload-label pin-full d-flex justify-content-center align-items-center\">\r\n              <p>\r\n                <span className=\"icon-check mr-2\" />\r\n                Drop to replace\r\n              </p>\r\n              <input className=\"pin-full\" type=\"file\" multiple onChange={this.onReplace} />\r\n            </label>\r\n          </>\r\n        ) : (\r\n          <InitForm createFirstFile={this.createFirstFile} uploadStructure={this.uploadStructure} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BasicMonacoEditor;\r\n"]},"metadata":{},"sourceType":"module"}