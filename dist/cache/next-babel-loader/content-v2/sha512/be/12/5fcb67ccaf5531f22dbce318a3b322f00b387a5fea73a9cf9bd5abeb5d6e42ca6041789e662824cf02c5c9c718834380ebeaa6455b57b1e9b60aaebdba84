{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport noop from 'lodash/noop';\nimport React from 'react';\nimport styles from './SweetAlert.module.scss';\nvar Toast = null;\n\nvar SweetAlertService = /*#__PURE__*/function () {\n  function SweetAlertService() {\n    _classCallCheck(this, SweetAlertService);\n  }\n\n  _createClass(SweetAlertService, null, [{\n    key: \"confirm\",\n    value: function confirm(_ref) {\n      var title = _ref.title,\n          text = _ref.text,\n          _ref$html = _ref.html,\n          html = _ref$html === void 0 ? '' : _ref$html,\n          _ref$confirmButtonTex = _ref.confirmButtonText,\n          confirmButtonText = _ref$confirmButtonTex === void 0 ? 'Ok' : _ref$confirmButtonTex,\n          _ref$preConfirm = _ref.preConfirm,\n          preConfirm = _ref$preConfirm === void 0 ? noop : _ref$preConfirm;\n      return import('sweetalert2').then(function (swal) {\n        return swal[\"default\"].fire({\n          title: title,\n          text: text,\n          html: html,\n          icon: 'warning',\n          showCancelButton: true,\n          customClass: {\n            actions: styles['swal-actions'],\n            confirmButton: 'btn btn--blue',\n            cancelButton: 'btn btn--danger'\n          },\n          confirmButtonText: confirmButtonText,\n          focusConfirm: false,\n          buttonsStyling: false,\n          reverseButtons: true,\n          heightAuto: false,\n          preConfirm: preConfirm,\n          allowOutsideClick: function allowOutsideClick() {\n            return !swal[\"default\"].isLoading();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"error\",\n    value: function error(_ref2) {\n      var _ref2$title = _ref2.title,\n          title = _ref2$title === void 0 ? 'Oops!' : _ref2$title,\n          text = _ref2.text,\n          buttonText = _ref2.buttonText;\n      return import('sweetalert2').then(function (swal) {\n        return swal[\"default\"].fire({\n          title: title,\n          text: text,\n          icon: 'error',\n          customClass: {\n            confirmButton: 'btn btn--light'\n          },\n          confirmButtonText: buttonText,\n          buttonsStyling: false,\n          heightAuto: false\n        });\n      });\n    }\n  }, {\n    key: \"toast\",\n    value: function toast(_ref3) {\n      var text = _ref3.text,\n          _ref3$href = _ref3.href,\n          href = _ref3$href === void 0 ? null : _ref3$href,\n          _ref3$timer = _ref3.timer,\n          timer = _ref3$timer === void 0 ? 3000 : _ref3$timer,\n          _ref3$type = _ref3.type,\n          type = _ref3$type === void 0 ? 'success' : _ref3$type;\n      SweetAlertService.init();\n      var target = document.body;\n\n      if (href) {\n        SweetAlertService.anchorTag.href = href;\n        target = SweetAlertService.anchorTag;\n      }\n\n      return new Promise(function (resolve) {\n        if (Toast !== null) {\n          return resolve();\n        }\n\n        import('sweetalert2').then(function (swal) {\n          Toast = swal[\"default\"].mixin({\n            toast: true,\n            position: 'bottom-end',\n            showConfirmButton: false,\n            background: '#1b1b15',\n            customClass: {\n              container: styles['swal--dark']\n            }\n          });\n          resolve();\n        })[\"catch\"](function (err) {\n          console.error(err);\n        });\n      }).then(function () {\n        Toast.fire({\n          icon: type,\n          title: type === 'error' ? text || 'Oups, something went wrong...' : text,\n          target: target,\n          timer: timer\n        });\n      });\n    }\n  }, {\n    key: \"content\",\n    value: function () {\n      var _content = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ReactComponent) {\n        var title,\n            props,\n            _yield$Promise$all,\n            _yield$Promise$all2,\n            contentModule,\n            swalModule,\n            ReactSwal,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                title = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n                props = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                _context.next = 4;\n                return Promise.all([import('sweetalert2-react-content'), import('sweetalert2')]);\n\n              case 4:\n                _yield$Promise$all = _context.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                contentModule = _yield$Promise$all2[0];\n                swalModule = _yield$Promise$all2[1];\n                ReactSwal = contentModule[\"default\"](swalModule[\"default\"]);\n                return _context.abrupt(\"return\", ReactSwal.fire({\n                  title: title,\n                  html: /*#__PURE__*/React.createElement(ReactComponent, _objectSpread({\n                    closeModal: function closeModal() {\n                      return swalModule[\"default\"].close();\n                    }\n                  }, props)),\n                  customClass: styles['swal2-content'],\n                  showConfirmButton: false,\n                  heightAuto: false\n                }));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function content(_x) {\n        return _content.apply(this, arguments);\n      }\n\n      return content;\n    }()\n  }, {\n    key: \"closePopup\",\n    value: function () {\n      var _closePopup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(result) {\n        var swal;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return import('sweetalert2');\n\n              case 2:\n                swal = _context2.sent;\n                swal[\"default\"].close(result);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function closePopup(_x2) {\n        return _closePopup.apply(this, arguments);\n      }\n\n      return closePopup;\n    }()\n  }, {\n    key: \"toggleLoading\",\n    value: function toggleLoading() {\n      import('sweetalert2').then(function (swal) {\n        return swal[\"default\"].getConfirmButton().classList.toggle('btn--loading');\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      SweetAlertService.anchorTag = document.createElement('a');\n      document.body.appendChild(SweetAlertService.anchorTag);\n    }\n  }]);\n\n  return SweetAlertService;\n}();\n\n_defineProperty(SweetAlertService, \"anchorTag\", void 0);\n\nexport default SweetAlertService;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/sweet-alert/SweetAlert.service.ts"],"names":["noop","React","styles","Toast","SweetAlertService","title","text","html","confirmButtonText","preConfirm","then","swal","fire","icon","showCancelButton","customClass","actions","confirmButton","cancelButton","focusConfirm","buttonsStyling","reverseButtons","heightAuto","allowOutsideClick","isLoading","buttonText","href","timer","type","init","target","document","body","anchorTag","Promise","resolve","mixin","toast","position","showConfirmButton","background","container","err","console","error","ReactComponent","props","all","contentModule","swalModule","ReactSwal","createElement","closeModal","close","result","getConfirmButton","classList","toggle","appendChild"],"mappings":"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","sourcesContent":["import noop from 'lodash/noop';\r\nimport React from 'react';\r\nimport { SweetAlertResult } from 'sweetalert2';\r\nimport styles from './SweetAlert.module.scss';\r\n\r\nlet Toast = null;\r\n\r\ninterface ToastI {\r\n  text: string;\r\n  href?: string;\r\n  timer?: number;\r\n  type?: 'error' | 'success' | 'info';\r\n}\r\n\r\nclass SweetAlertService {\r\n  private static anchorTag: HTMLAnchorElement;\r\n\r\n  static confirm({\r\n    title,\r\n    text,\r\n    html = '',\r\n    confirmButtonText = 'Ok',\r\n    preConfirm = noop,\r\n  }) {\r\n    return import('sweetalert2').then((swal) => {\r\n      return swal.default.fire({\r\n        title,\r\n        text,\r\n        html,\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        customClass: {\r\n          actions: styles['swal-actions'],\r\n          confirmButton: 'btn btn--blue',\r\n          cancelButton: 'btn btn--danger',\r\n        },\r\n        confirmButtonText,\r\n        focusConfirm: false,\r\n        buttonsStyling: false,\r\n        reverseButtons: true,\r\n        heightAuto: false,\r\n        preConfirm,\r\n        allowOutsideClick: () => !swal.default.isLoading(),\r\n      });\r\n    });\r\n  }\r\n\r\n  static error({ title = 'Oops!', text, buttonText }) {\r\n    return import('sweetalert2').then((swal) => {\r\n      return swal.default.fire({\r\n        title,\r\n        text,\r\n        icon: 'error',\r\n        customClass: {\r\n          confirmButton: 'btn btn--light',\r\n        },\r\n        confirmButtonText: buttonText,\r\n        buttonsStyling: false,\r\n        heightAuto: false,\r\n      });\r\n    });\r\n  }\r\n\r\n  static toast({\r\n    text, href = null, timer = 3000, type = 'success',\r\n  }: ToastI) {\r\n    SweetAlertService.init();\r\n\r\n    let target = document.body;\r\n    if (href) {\r\n      SweetAlertService.anchorTag.href = href;\r\n      target = SweetAlertService.anchorTag;\r\n    }\r\n\r\n    return new Promise<void>((resolve) => {\r\n      if (Toast !== null) {\r\n        return resolve();\r\n      }\r\n\r\n      import('sweetalert2')\r\n        .then((swal) => {\r\n          Toast = swal.default.mixin({\r\n            toast: true,\r\n            position: 'bottom-end',\r\n            showConfirmButton: false,\r\n            background: '#1b1b15',\r\n            customClass: {\r\n              container: styles['swal--dark'],\r\n            },\r\n          });\r\n\r\n          resolve();\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    }).then(() => {\r\n      Toast.fire({\r\n        icon: type,\r\n        title:\r\n          type === 'error' ? text || 'Oups, something went wrong...' : text,\r\n        target,\r\n        timer,\r\n      });\r\n    });\r\n  }\r\n\r\n  static async content(ReactComponent: any, title = null, props = {}) {\r\n    const [contentModule, swalModule] = await Promise.all([\r\n      import('sweetalert2-react-content'),\r\n      import('sweetalert2'),\r\n    ]);\r\n\r\n    const ReactSwal = contentModule.default(swalModule.default);\r\n\r\n    return ReactSwal.fire({\r\n      title,\r\n      html: React.createElement(ReactComponent, {\r\n        closeModal: () => swalModule.default.close(),\r\n        ...props,\r\n      }),\r\n      customClass: styles['swal2-content'],\r\n      showConfirmButton: false,\r\n      heightAuto: false,\r\n    });\r\n  }\r\n\r\n  static async closePopup(result?: SweetAlertResult<any>) {\r\n    const swal = await import('sweetalert2');\r\n    swal.default.close(result);\r\n  }\r\n\r\n  static toggleLoading() {\r\n    import('sweetalert2').then((swal) => swal.default.getConfirmButton().classList.toggle('btn--loading'));\r\n  }\r\n\r\n  private static init() {\r\n    SweetAlertService.anchorTag = document.createElement('a');\r\n    document.body.appendChild(SweetAlertService.anchorTag);\r\n  }\r\n}\r\n\r\nexport default SweetAlertService;\r\n"]},"metadata":{},"sourceType":"module"}