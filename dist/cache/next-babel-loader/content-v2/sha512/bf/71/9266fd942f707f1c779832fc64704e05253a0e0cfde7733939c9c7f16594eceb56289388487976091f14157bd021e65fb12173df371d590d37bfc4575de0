{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Header\\\\AccountNotificationsTooltip\\\\AccountNotificationsTooltip.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\nimport { useRouter } from 'next/router';\nimport UserService from '~/services/User.service';\nimport { useOutsideClick } from '~/services/Hooks';\nimport { logoutUser } from '~/redux/user/user.actions';\nimport NotificationTooltip from '~/components/notification-tooltip/NotificationTooltip';\nimport styles from './AccountNotificationsTooltip.module.scss';\n\nfunction AccountNotificationsTooltip(_ref) {\n  _s();\n\n  var user = _ref.user,\n      dispatch = _ref.dispatch;\n  var ref = useRef(null);\n  var router = useRouter();\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var logout = function logout() {\n    UserService.logout().then(function () {\n      router.replace('/').then(function () {\n        dispatch(logoutUser());\n      });\n    });\n  };\n\n  var toggleToolip = function toggleToolip() {\n    return setIsOpen(!isOpen);\n  };\n\n  useOutsideClick(ref, function () {\n    return setIsOpen(false);\n  });\n  return __jsx(\"div\", {\n    ref: ref,\n    className: styles['account-notifications-tooltip'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, __jsx(\"button\", {\n    type: \"button\",\n    onClick: toggleToolip,\n    className: \"outline-none border-none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, __jsx(FontAwesomeIcon, {\n    width: \"16\",\n    icon: faBell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }), user.notifications.unreadCount > 0 && __jsx(\"span\", {\n    className: \"\".concat(styles['unread-badge'], \" text-white text-center text-xs\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, user.notifications.unreadCount)), isOpen && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(NotificationTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(AccountNotificationsTooltip, \"6hNDXam3HepZydVnuXC+0CaD6aI=\", false, function () {\n  return [useRouter, useOutsideClick];\n});\n\n_c = AccountNotificationsTooltip;\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nvar connector = connect(mapStateToProps);\nexport default _c2 = connector(AccountNotificationsTooltip);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AccountNotificationsTooltip\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Header/AccountNotificationsTooltip/AccountNotificationsTooltip.tsx"],"names":["React","useState","useRef","connect","FontAwesomeIcon","faBell","useRouter","UserService","useOutsideClick","logoutUser","NotificationTooltip","styles","AccountNotificationsTooltip","user","dispatch","ref","router","isOpen","setIsOpen","logout","then","replace","toggleToolip","notifications","unreadCount","mapStateToProps","state","connector"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,OAAT,QAAwC,aAAxC;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAGA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,OAAOC,mBAAP,MAAgC,uDAAhC;AAEA,OAAOC,MAAP,MAAmB,2CAAnB;;AAEA,SAASC,2BAAT,OAA2F;AAAA;;AAAA,MAApDC,IAAoD,QAApDA,IAAoD;AAAA,MAA9CC,QAA8C,QAA9CA,QAA8C;AACzF,MAAMC,GAAG,GAAGb,MAAM,CAAC,IAAD,CAAlB;AACA,MAAMc,MAAM,GAAGV,SAAS,EAAxB;;AAFyF,kBAG7DL,QAAQ,CAAC,KAAD,CAHqD;AAAA,MAGlFgB,MAHkF;AAAA,MAG1EC,SAH0E;;AAKzF,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBZ,IAAAA,WAAW,CAACY,MAAZ,GAAqBC,IAArB,CAA0B,YAAM;AAC9BJ,MAAAA,MAAM,CAACK,OAAP,CAAe,GAAf,EAAoBD,IAApB,CAAyB,YAAM;AAC7BN,QAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACD,OAFD;AAGD,KAJD;AAKD,GAND;;AAQA,MAAMa,YAAY,GAAG,SAAfA,YAAe;AAAA,WAAMJ,SAAS,CAAC,CAACD,MAAF,CAAf;AAAA,GAArB;;AAEAT,EAAAA,eAAe,CAACO,GAAD,EAAM;AAAA,WAAMG,SAAS,CAAC,KAAD,CAAf;AAAA,GAAN,CAAf;AAEA,SACE;AAAK,IAAA,GAAG,EAAEH,GAAV;AAAe,IAAA,SAAS,EAAEJ,MAAM,CAAC,+BAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEW,YAA/B;AAA6C,IAAA,SAAS,EAAC,0BAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD;AAAiB,IAAA,KAAK,EAAC,IAAvB;AAA4B,IAAA,IAAI,EAAEjB,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGQ,IAAI,CAACU,aAAL,CAAmBC,WAAnB,GAAiC,CAAjC,IACC;AAAM,IAAA,SAAS,YAAKb,MAAM,CAAC,cAAD,CAAX,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,IAAI,CAACU,aAAL,CAAmBC,WADtB,CAHJ,CADF,EAUGP,MAAM,IACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAXF,CADF;AAkBD;;GAnCQL,2B;UAEQN,S,EAafE,e;;;KAfOI,2B;;AAqCT,SAASa,eAAT,CAAyBC,KAAzB,EAA2C;AACzC,SAAO;AACLb,IAAAA,IAAI,EAAEa,KAAK,CAACb;AADP,GAAP;AAGD;;AAED,IAAMc,SAAS,GAAGxB,OAAO,CAACsB,eAAD,CAAzB;AAEA,qBAAeE,SAAS,CAACf,2BAAD,CAAxB","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { useRouter } from 'next/router';\r\nimport UserService from '~/services/User.service';\r\nimport { RootState } from '~/redux/root.reducer';\r\n\r\nimport { useOutsideClick } from '~/services/Hooks';\r\nimport { logoutUser } from '~/redux/user/user.actions';\r\nimport NotificationTooltip from '~/components/notification-tooltip/NotificationTooltip';\r\n\r\nimport styles from './AccountNotificationsTooltip.module.scss';\r\n\r\nfunction AccountNotificationsTooltip({ user, dispatch }: ConnectedProps<typeof connector>) {\r\n  const ref = useRef(null);\r\n  const router = useRouter();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const logout = () => {\r\n    UserService.logout().then(() => {\r\n      router.replace('/').then(() => {\r\n        dispatch(logoutUser());\r\n      });\r\n    });\r\n  };\r\n\r\n  const toggleToolip = () => setIsOpen(!isOpen);\r\n\r\n  useOutsideClick(ref, () => setIsOpen(false));\r\n\r\n  return (\r\n    <div ref={ref} className={styles['account-notifications-tooltip']}>\r\n      <button type=\"button\" onClick={toggleToolip} className=\"outline-none border-none\">\r\n        <FontAwesomeIcon width=\"16\" icon={faBell} />\r\n        {user.notifications.unreadCount > 0 && (\r\n          <span className={`${styles['unread-badge']} text-white text-center text-xs`}>\r\n            {user.notifications.unreadCount}\r\n          </span>\r\n        )}\r\n      </button>\r\n\r\n      {isOpen && (\r\n      <div>\r\n        <NotificationTooltip />\r\n      </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state: RootState) {\r\n  return {\r\n    user: state.user,\r\n  };\r\n}\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport default connector(AccountNotificationsTooltip);\r\n"]},"metadata":{},"sourceType":"module"}