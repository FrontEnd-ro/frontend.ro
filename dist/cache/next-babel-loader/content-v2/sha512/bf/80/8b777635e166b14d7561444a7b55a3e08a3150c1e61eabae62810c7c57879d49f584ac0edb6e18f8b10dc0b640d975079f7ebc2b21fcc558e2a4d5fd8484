{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Settings\\\\components\\\\DeleteAccount.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Button from '~/components/Button';\nimport Form, { FormGroup, PasswordReveal } from '~/components/Form';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport UserService from '~/services/User.service';\n\nfunction DeleteAccount({\n  onSuccess\n}) {\n  const {\n    0: isDeleting,\n    1: setIsDeleting\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n\n  const onSubmit = async formData => {\n    const {\n      passwordConfirm\n    } = formData;\n    const {\n      isConfirmed\n    } = await SweetAlertService.confirm({\n      title: 'Șterge contul',\n      text: 'Ești sigur? Această decizie e permanentă.',\n      confirmButtonText: 'Da, șterge contul'\n    });\n\n    if (!isConfirmed) {\n      // Reset form and exit\n      return true;\n    }\n\n    setIsDeleting(true);\n    let shouldResetForm = true;\n\n    try {\n      await UserService.delete(passwordConfirm);\n      onSuccess();\n    } catch (err) {\n      shouldResetForm = false;\n      setError(err.message || 'Nu am putut să-ți schimbăm numele. Încearcă din nou!');\n    } finally {\n      setIsDeleting(false);\n    }\n\n    return shouldResetForm;\n  };\n\n  return __jsx(Form, {\n    onInput: () => setError(null),\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    className: \"mt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"\\u0218terge contul \\u0219i toate informa\\u021Biile asociate\"), __jsx(\"div\", {\n    className: \"d-flex justify-content-between align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    className: \"mt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \" Aceast\\u0103 decizie e una final\\u0103, nu te po\\u021Bi r\\u0103zg\\xE2ndi. Te rug\\u0103m s\\u0103 fii sigur!\"), __jsx(\"label\", {\n    className: \"d-inline-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Parola*\"), __jsx(PasswordReveal, {\n    required: true,\n    autoComplete: \"new-password\",\n    name: \"passwordConfirm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  })), error && __jsx(\"p\", {\n    className: \"text-red text-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"\\u274C\", ' ', error)), __jsx(Button, {\n    variant: \"danger\",\n    type: \"submit\",\n    loading: isDeleting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"\\u0218terge contul\")));\n}\n\nexport default DeleteAccount;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Settings/components/DeleteAccount.tsx"],"names":["React","useState","Button","Form","FormGroup","PasswordReveal","SweetAlertService","UserService","DeleteAccount","onSuccess","isDeleting","setIsDeleting","error","setError","onSubmit","formData","passwordConfirm","isConfirmed","confirm","title","text","confirmButtonText","shouldResetForm","delete","err","message"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,IAAeC,SAAf,EAA0BC,cAA1B,QAAgD,mBAAhD;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;AAMA,SAASC,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAA6C;AAC3C,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BV,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACW,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMa,QAAQ,GAAG,MAAOC,QAAP,IAAoB;AACnC,UAAM;AAAEC,MAAAA;AAAF,QAAsBD,QAA5B;AAEA,UAAM;AAAEE,MAAAA;AAAF,QAAkB,MAAMX,iBAAiB,CAACY,OAAlB,CAA0B;AACtDC,MAAAA,KAAK,EAAE,eAD+C;AAEtDC,MAAAA,IAAI,EAAE,2CAFgD;AAGtDC,MAAAA,iBAAiB,EAAE;AAHmC,KAA1B,CAA9B;;AAMA,QAAI,CAACJ,WAAL,EAAkB;AAChB;AACA,aAAO,IAAP;AACD;;AAEDN,IAAAA,aAAa,CAAC,IAAD,CAAb;AACA,QAAIW,eAAe,GAAG,IAAtB;;AAEA,QAAI;AACF,YAAMf,WAAW,CAACgB,MAAZ,CAAmBP,eAAnB,CAAN;AACAP,MAAAA,SAAS;AACV,KAHD,CAGE,OAAOe,GAAP,EAAY;AACZF,MAAAA,eAAe,GAAG,KAAlB;AACAT,MAAAA,QAAQ,CAACW,GAAG,CAACC,OAAJ,IAAe,sDAAhB,CAAR;AACD,KAND,SAMU;AACRd,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;;AAED,WAAOW,eAAP;AACD,GA5BD;;AA8BA,SACE,MAAC,IAAD;AAAM,IAAA,OAAO,EAAE,MAAMT,QAAQ,CAAC,IAAD,CAA7B;AAAqC,IAAA,QAAQ,EAAEC,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEADF,EAEE;AAAK,IAAA,SAAS,EAAC,mDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mHADF,EAEE;AAAO,IAAA,SAAS,EAAC,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAIE,MAAC,cAAD;AAAgB,IAAA,QAAQ,MAAxB;AAAyB,IAAA,YAAY,EAAC,cAAtC;AAAqD,IAAA,IAAI,EAAC,iBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAFF,EAQGF,KAAK,IACJ;AAAG,IAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEG,GAFH,EAGGA,KAHH,CATJ,CADF,EAiBE,MAAC,MAAD;AACE,IAAA,OAAO,EAAC,QADV;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,OAAO,EAAEF,UAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAjBF,CAFF,CADF;AA8BD;;AAED,eAAeF,aAAf","sourcesContent":["import { useRouter } from 'next/router';\r\nimport React, { useState } from 'react';\r\nimport Button from '~/components/Button';\r\nimport Form, { FormGroup, PasswordReveal } from '~/components/Form';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\nimport UserService from '~/services/User.service';\r\n\r\ninterface Props {\r\n  onSuccess: () => void;\r\n}\r\n\r\nfunction DeleteAccount({ onSuccess }: Props) {\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const onSubmit = async (formData) => {\r\n    const { passwordConfirm } = formData;\r\n\r\n    const { isConfirmed } = await SweetAlertService.confirm({\r\n      title: 'Șterge contul',\r\n      text: 'Ești sigur? Această decizie e permanentă.',\r\n      confirmButtonText: 'Da, șterge contul',\r\n    });\r\n\r\n    if (!isConfirmed) {\r\n      // Reset form and exit\r\n      return true;\r\n    }\r\n\r\n    setIsDeleting(true);\r\n    let shouldResetForm = true;\r\n\r\n    try {\r\n      await UserService.delete(passwordConfirm);\r\n      onSuccess();\r\n    } catch (err) {\r\n      shouldResetForm = false;\r\n      setError(err.message || 'Nu am putut să-ți schimbăm numele. Încearcă din nou!');\r\n    } finally {\r\n      setIsDeleting(false);\r\n    }\r\n\r\n    return shouldResetForm;\r\n  };\r\n\r\n  return (\r\n    <Form onInput={() => setError(null)} onSubmit={onSubmit}>\r\n      <h3 className=\"mt-0\">Șterge contul și toate informațiile asociate</h3>\r\n      <div className=\"d-flex justify-content-between align-items-center\">\r\n        <FormGroup>\r\n          <p className=\"mt-0\"> Această decizie e una finală, nu te poți răzgândi. Te rugăm să fii sigur!</p>\r\n          <label className=\"d-inline-block\">\r\n            <span className=\"label\">\r\n              Parola*\r\n            </span>\r\n            <PasswordReveal required autoComplete=\"new-password\" name=\"passwordConfirm\" />\r\n          </label>\r\n          {error && (\r\n            <p className=\"text-red text-bold\">\r\n              ❌\r\n              {' '}\r\n              {error}\r\n            </p>\r\n          )}\r\n        </FormGroup>\r\n        <Button\r\n          variant=\"danger\"\r\n          type=\"submit\"\r\n          loading={isDeleting}\r\n        >\r\n          Șterge contul\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default DeleteAccount;\r\n"]},"metadata":{},"sourceType":"module"}