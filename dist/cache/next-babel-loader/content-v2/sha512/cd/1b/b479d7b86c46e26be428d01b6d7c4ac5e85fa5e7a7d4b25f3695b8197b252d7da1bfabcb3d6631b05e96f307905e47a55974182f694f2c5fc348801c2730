{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Editor\\\\CompleteEditor\\\\CompleteEditor.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport * as Monaco from '../monaco';\nimport FileIcons from '~/services/utils/FileIcons';\nimport SubmissionService from '~/services/Submission.service';\nimport FolderStructure from '~/services/utils/FolderStructure';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport Feedbacks from '../Feedbacks';\nimport MonacoBase from '../Monaco.base';\nimport InitForm from '../InitForm/InitForm';\nimport AskTooltip from './AskTooltip/AskTooltip';\nimport ViewTooltip from './ViewTooltip/ViewTooltip';\nimport FileSwitcher from '../FileSwitcher/FileSwitcher';\nimport styles from '../Editor.module.scss';\n\nclass MonacoEditor extends MonacoBase {\n  // FIXME ðŸ‘‡\n  // FIXME ðŸ‘‡\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"decorationsMap\", void 0);\n\n    _defineProperty(this, \"oldDecorations\", void 0);\n\n    _defineProperty(this, \"initEditor\", () => {\n      const {\n        readOnly,\n        askTooltip\n      } = this.props;\n      const {\n        folderStructure,\n        selectedFileKey\n      } = this.state;\n\n      if (!folderStructure.files.length && !folderStructure.folders.length) {\n        return;\n      }\n\n      let {\n        file\n      } = folderStructure.getFile(selectedFileKey);\n      this.editor = Monaco.create(this.editorRef.current, {\n        value: file ? file.content : '',\n        readOnly,\n        hover: {\n          enabled: true\n        },\n        scrollBeyondLastLine: false\n      });\n      this.Feedbacks.add(...this.props.feedbacks);\n      Monaco.extendWithDecorate(this.editor);\n      Monaco.extendWithHover(this.editor, this.showViewTooltip, this.hideViewTooltip);\n\n      if (file) {\n        this.onFileSelect(file.key);\n        this.updateLanguageBasedOnFileName(file.name);\n        this.Feedbacks.getAll().filter(f => f.file_key === file.key).forEach(f => this.decorate(f.getDecorationData()));\n      }\n\n      if (askTooltip) {\n        Monaco.extendWithCursorSelectionTooltip(this.editor, (tooltipPosition, cursorSelection) => {\n          this.setState({\n            cursorSelection,\n            tooltips: Object.assign(this.state.tooltips, {\n              ask: _objectSpread({\n                visible: true\n              }, tooltipPosition)\n            })\n          });\n        }, this.hideAskTooltip);\n      }\n\n      this.oldDecorations = this.editor.getCustomDecorations();\n    });\n\n    _defineProperty(this, \"showViewTooltip\", (feedback, tooltipPosition) => {\n      clearTimeout(this.timeoutId);\n\n      if (tooltipPosition === undefined) {\n        tooltipPosition = this.editor.getBestTooltipPosition(feedback.position[0], (feedback.position[1] + feedback.position[3]) / 2);\n      }\n\n      this.setState({\n        tooltips: Object.assign(this.state.tooltips, {\n          view: _objectSpread({\n            id: feedback._id || feedback.timestamp,\n            timestamp: feedback.timestamp,\n            visible: true\n          }, tooltipPosition)\n        })\n      });\n    });\n\n    _defineProperty(this, \"hideViewTooltip\", () => {\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          tooltips: Object.assign(this.state.tooltips, {\n            view: {\n              id: this.state.tooltips.view.id,\n              visible: false\n            }\n          })\n        });\n      }, 500);\n    });\n\n    _defineProperty(this, \"onFeedbackDone\", feedbackId => {\n      this.props.onFeedbackDone(feedbackId);\n      this.Feedbacks.delete(feedbackId);\n    });\n\n    _defineProperty(this, \"decorate\", decorationData => {\n      this.editor.decorate(decorationData, ...decorationData.position);\n    });\n\n    _defineProperty(this, \"onGiveFeedback\", feedback => {\n      const newFeedback = this.Feedbacks.add(Object.assign(feedback, {\n        position: [this.state.cursorSelection.startLineNumber, this.state.cursorSelection.startColumn, this.state.cursorSelection.endLineNumber, this.state.cursorSelection.endColumn],\n        readOnly: true,\n        file_key: this.state.selectedFileKey\n      }))[0];\n\n      if (this.props.onFeedbackAdded) {\n        this.props.onFeedbackAdded(this.Feedbacks);\n      }\n\n      this.editor.decorate(newFeedback.getDecorationData(), this.state.cursorSelection);\n      this.hideAskTooltip();\n    });\n\n    _defineProperty(this, \"hideAskTooltip\", () => {\n      this.setState({\n        cursorSelection: null,\n        tooltips: Object.assign(this.state.tooltips, {\n          ask: {\n            visible: false\n          }\n        })\n      });\n    });\n\n    _defineProperty(this, \"onModelChange\", () => {\n      const {\n        folderStructure,\n        selectedFileKey\n      } = this.state;\n      folderStructure.setContent(selectedFileKey, this.editor.getValue());\n\n      if (typeof this.props.onChange === 'function') {\n        this.props.onChange(this.getFolderStructure());\n      }\n\n      const emptyDecorations = this.editor.getEmptyDecorations();\n\n      if (!emptyDecorations.length) {\n        this.oldDecorations = this.editor.getCustomDecorations();\n      } else {\n        emptyDecorations.forEach(dec => this.unDecorate(dec.id));\n        SweetAlertService.confirm({\n          title: 'Hold on!',\n          text: 'UrmeazÄƒ sÄƒ È™tergi niÈ™te cod ce conÈ›ine feedback-uri. EÈ™ti sigur?',\n          confirmButtonText: 'Continue',\n          preConfirm: () => {\n            SweetAlertService.toggleLoading();\n            return Promise.all(emptyDecorations.map(dec => SubmissionService.markFeedbackAsDone(dec._id))).then(resp => {\n              resp.forEach((_, index) => this.onFeedbackDone(emptyDecorations[index].id));\n              return resp;\n            });\n          }\n        }).then(result => {\n          // FIXME ðŸ‘‡ (correct types)\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          if (result.value) {// mark feedback as done\n          } else {\n            this._baseModelChangeListener.dispose();\n\n            this.editor.getModel().undo();\n            emptyDecorations.forEach(dec => {\n              const matchingOldDecId = Object.keys(this.oldDecorations).find(decId => this.oldDecorations[decId].data.id === dec.id);\n              this.editor.decorate(dec, this.oldDecorations[matchingOldDecId].range);\n            });\n            this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\n\n            if (typeof this.props.onChange === 'function') {\n              this.props.onChange(this.getFolderStructure());\n            }\n          }\n        });\n      }\n    });\n\n    this.Feedbacks = new Feedbacks(this);\n    this.state = {\n      tooltips: {\n        ask: {},\n        view: {}\n      },\n      folderStructure: new FolderStructure(props.folderStructure)\n    };\n    this.timeoutId = null;\n    this.decorationsMap = {};\n    this.getValue = this.getValue.bind(this);\n  }\n\n  getConfiguration() {\n    return this.editor.getConfiguration();\n  }\n\n  unDecorate(idOrtimestamp) {\n    if (!this.editor.decorationsMap) {\n      return;\n    }\n\n    let decorationEntry = Object.entries(this.editor.decorationsMap).find(entry => entry[1].id === idOrtimestamp || entry[1].timestamp === idOrtimestamp);\n\n    if (decorationEntry) {\n      this.editor.unDecorate(decorationEntry[0]);\n    }\n  }\n\n  render() {\n    const {\n      askTooltip,\n      readOnly,\n      feedbacks\n    } = this.props;\n    const {\n      folderStructure,\n      selectedFileKey,\n      fixedHeight,\n      fileSwitcherWidth,\n      isDropable\n    } = this.state;\n    const className = this.props.className || '';\n    const selectedFile = folderStructure.getFile(selectedFileKey).file;\n    return __jsx(\"div\", {\n      className: `\n          ${className}\n          ${styles['editor-wrapper']} \n          ${isDropable ? styles['is--dropable'] : ''}\n        `,\n      style: {\n        height: fixedHeight ? `${fixedHeight}px` : 'initial'\n      },\n      onDragEnter: this.onDragEnter,\n      onDragLeave: this.onDragLeave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 7\n      }\n    }, folderStructure.files.length || folderStructure.folders.length ? __jsx(React.Fragment, null, __jsx(FileSwitcher // FIXME ðŸ‘‡\n    , {\n      maxHeight: 500,\n      feedbacks: feedbacks,\n      folderStructure: folderStructure,\n      selectedFileKey: selectedFileKey,\n      readOnly: readOnly,\n      onFileAdd: this.onFileAdd,\n      onFolderAdd: this.onFolderAdd,\n      onSelect: this.onFileSelect,\n      onFileRename: this.onFileRename,\n      onFolderRename: this.onFolderRename,\n      onFileDelete: this.onFileDelete,\n      onFolderDelete: this.onFolderDelete,\n      onDownload: this.onDownload,\n      onResize: this.onResize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      className: `\n                ${styles.editor}\n                ${selectedFileKey ? '' : styles['has--no-selected-file']}\n              `,\n      style: {\n        width: `calc(100% - ${fileSwitcherWidth}px)`,\n        maxWidth: `calc(100% - ${fileSwitcherWidth}px)`,\n        // without this it doesn't resize in FF\n        height: fixedHeight ? `${fixedHeight}px` : ''\n      },\n      ref: this.editorRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 13\n      }\n    }), selectedFile && __jsx(\"p\", {\n      className: `${styles['selected-file']} d-flex justify-content-center align-items-center`,\n      title: selectedFile.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 15\n      }\n    }, __jsx(\"img\", {\n      width: \"20\",\n      src: FileIcons.getIconUrl(selectedFile.name),\n      alt: \"icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }\n    }), __jsx(\"span\", {\n      className: \"ellipsis-overflow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }\n    }, selectedFile.name)), __jsx(\"label\", {\n      className: \"upload-label pin-full center--flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      className: \"icon-check mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }\n    }), \"Drop to replace\"), __jsx(\"input\", {\n      className: \"pin-full\",\n      type: \"file\",\n      multiple: true,\n      onChange: this.onReplace,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 15\n      }\n    }))) : __jsx(InitForm, {\n      createFirstFile: this.createFirstFile,\n      uploadStructure: this.uploadStructure,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }\n    }), __jsx(ViewTooltip, {\n      onFeedbackDone: this.onFeedbackDone,\n      visible: this.state.tooltips.view.visible,\n      feedback: this.Feedbacks.get(this.state.tooltips.view.id || {}),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }\n    }), askTooltip && this.state.tooltips.ask && __jsx(AskTooltip, {\n      visible: this.state.tooltips.ask.visible,\n      onAsk: this.onGiveFeedback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default MonacoEditor;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Editor/CompleteEditor/CompleteEditor.tsx"],"names":["React","Monaco","FileIcons","SubmissionService","FolderStructure","SweetAlertService","Feedbacks","MonacoBase","InitForm","AskTooltip","ViewTooltip","FileSwitcher","styles","MonacoEditor","constructor","props","readOnly","askTooltip","folderStructure","selectedFileKey","state","files","length","folders","file","getFile","editor","create","editorRef","current","value","content","hover","enabled","scrollBeyondLastLine","add","feedbacks","extendWithDecorate","extendWithHover","showViewTooltip","hideViewTooltip","onFileSelect","key","updateLanguageBasedOnFileName","name","getAll","filter","f","file_key","forEach","decorate","getDecorationData","extendWithCursorSelectionTooltip","tooltipPosition","cursorSelection","setState","tooltips","Object","assign","ask","visible","hideAskTooltip","oldDecorations","getCustomDecorations","feedback","clearTimeout","timeoutId","undefined","getBestTooltipPosition","position","view","id","_id","timestamp","setTimeout","feedbackId","onFeedbackDone","delete","decorationData","newFeedback","startLineNumber","startColumn","endLineNumber","endColumn","onFeedbackAdded","setContent","getValue","onChange","getFolderStructure","emptyDecorations","getEmptyDecorations","dec","unDecorate","confirm","title","text","confirmButtonText","preConfirm","toggleLoading","Promise","all","map","markFeedbackAsDone","then","resp","_","index","result","_baseModelChangeListener","dispose","getModel","undo","matchingOldDecId","keys","find","decId","data","range","onDidChangeModelContent","onModelChange","decorationsMap","bind","getConfiguration","idOrtimestamp","decorationEntry","entries","entry","render","fixedHeight","fileSwitcherWidth","isDropable","className","selectedFile","height","onDragEnter","onDragLeave","onFileAdd","onFolderAdd","onFileRename","onFolderRename","onFileDelete","onFolderDelete","onDownload","onResize","width","maxWidth","getIconUrl","onReplace","createFirstFile","uploadStructure","get","onGiveFeedback"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,MAAMC,YAAN,SAA2BN,UAA3B,CAAsC;AACpC;AAGA;AAGAO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB;;AAAA;;AAAA,wCAkBN,MAAM;AACjB,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAA2B,KAAKF,KAAtC;AACA,YAAM;AAAEG,QAAAA,eAAF;AAAmBC,QAAAA;AAAnB,UAAuC,KAAKC,KAAlD;;AAEA,UAAI,CAACF,eAAe,CAACG,KAAhB,CAAsBC,MAAvB,IAAiC,CAACJ,eAAe,CAACK,OAAhB,CAAwBD,MAA9D,EAAsE;AACpE;AACD;;AAED,UAAI;AAAEE,QAAAA;AAAF,UAAWN,eAAe,CAACO,OAAhB,CAAwBN,eAAxB,CAAf;AAEA,WAAKO,MAAL,GAAczB,MAAM,CAAC0B,MAAP,CAAc,KAAKC,SAAL,CAAeC,OAA7B,EAAsC;AAClDC,QAAAA,KAAK,EAAEN,IAAI,GAAGA,IAAI,CAACO,OAAR,GAAkB,EADqB;AAElDf,QAAAA,QAFkD;AAGlDgB,QAAAA,KAAK,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ,SAH2C;AAMlDC,QAAAA,oBAAoB,EAAE;AAN4B,OAAtC,CAAd;AAQA,WAAK5B,SAAL,CAAe6B,GAAf,CAAmB,GAAG,KAAKpB,KAAL,CAAWqB,SAAjC;AAEAnC,MAAAA,MAAM,CAACoC,kBAAP,CAA0B,KAAKX,MAA/B;AACAzB,MAAAA,MAAM,CAACqC,eAAP,CAAuB,KAAKZ,MAA5B,EAAoC,KAAKa,eAAzC,EAA0D,KAAKC,eAA/D;;AAEA,UAAIhB,IAAJ,EAAU;AACR,aAAKiB,YAAL,CAAkBjB,IAAI,CAACkB,GAAvB;AACA,aAAKC,6BAAL,CAAmCnB,IAAI,CAACoB,IAAxC;AAEA,aAAKtC,SAAL,CAAeuC,MAAf,GACGC,MADH,CACWC,CAAD,IAAOA,CAAC,CAACC,QAAF,KAAexB,IAAI,CAACkB,GADrC,EAEGO,OAFH,CAEYF,CAAD,IAAO,KAAKG,QAAL,CAAcH,CAAC,CAACI,iBAAF,EAAd,CAFlB;AAGD;;AAED,UAAIlC,UAAJ,EAAgB;AACdhB,QAAAA,MAAM,CAACmD,gCAAP,CACE,KAAK1B,MADP,EAEE,CAAC2B,eAAD,EAAkBC,eAAlB,KAAsC;AACpC,eAAKC,QAAL,CAAc;AACZD,YAAAA,eADY;AAEZE,YAAAA,QAAQ,EAAEC,MAAM,CAACC,MAAP,CAAc,KAAKtC,KAAL,CAAWoC,QAAzB,EAAmC;AAC3CG,cAAAA,GAAG;AAAIC,gBAAAA,OAAO,EAAE;AAAb,iBAAsBP,eAAtB;AADwC,aAAnC;AAFE,WAAd;AAMD,SATH,EAUE,KAAKQ,cAVP;AAYD;;AACD,WAAKC,cAAL,GAAsB,KAAKpC,MAAL,CAAYqC,oBAAZ,EAAtB;AACD,KAjEkB;;AAAA,6CAmED,CAACC,QAAD,EAAWX,eAAX,KAA+B;AAC/CY,MAAAA,YAAY,CAAC,KAAKC,SAAN,CAAZ;;AAEA,UAAIb,eAAe,KAAKc,SAAxB,EAAmC;AACjCd,QAAAA,eAAe,GAAG,KAAK3B,MAAL,CAAY0C,sBAAZ,CAChBJ,QAAQ,CAACK,QAAT,CAAkB,CAAlB,CADgB,EAEhB,CAACL,QAAQ,CAACK,QAAT,CAAkB,CAAlB,IAAuBL,QAAQ,CAACK,QAAT,CAAkB,CAAlB,CAAxB,IAAgD,CAFhC,CAAlB;AAID;;AAED,WAAKd,QAAL,CAAc;AACZC,QAAAA,QAAQ,EAAEC,MAAM,CAACC,MAAP,CAAc,KAAKtC,KAAL,CAAWoC,QAAzB,EAAmC;AAC3Cc,UAAAA,IAAI;AAEFC,YAAAA,EAAE,EAAEP,QAAQ,CAACQ,GAAT,IAAgBR,QAAQ,CAACS,SAF3B;AAGFA,YAAAA,SAAS,EAAET,QAAQ,CAACS,SAHlB;AAIFb,YAAAA,OAAO,EAAE;AAJP,aAKCP,eALD;AADuC,SAAnC;AADE,OAAd;AAWD,KAxFkB;;AAAA,6CA0FD,MAAM;AACtB,WAAKa,SAAL,GAAiBQ,UAAU,CAAC,MAAM;AAChC,aAAKnB,QAAL,CAAc;AACZC,UAAAA,QAAQ,EAAEC,MAAM,CAACC,MAAP,CAAc,KAAKtC,KAAL,CAAWoC,QAAzB,EAAmC;AAC3Cc,YAAAA,IAAI,EAAE;AACJC,cAAAA,EAAE,EAAE,KAAKnD,KAAL,CAAWoC,QAAX,CAAoBc,IAApB,CAAyBC,EADzB;AAEJX,cAAAA,OAAO,EAAE;AAFL;AADqC,WAAnC;AADE,SAAd;AAQD,OAT0B,EASxB,GATwB,CAA3B;AAUD,KArGkB;;AAAA,4CA2GDe,UAAD,IAAgB;AAC/B,WAAK5D,KAAL,CAAW6D,cAAX,CAA0BD,UAA1B;AACA,WAAKrE,SAAL,CAAeuE,MAAf,CAAsBF,UAAtB;AACD,KA9GkB;;AAAA,sCAgHPG,cAAD,IAAoB;AAC7B,WAAKpD,MAAL,CAAYwB,QAAZ,CAAqB4B,cAArB,EAAqC,GAAGA,cAAc,CAACT,QAAvD;AACD,KAlHkB;;AAAA,4CAkIDL,QAAD,IAAc;AAC7B,YAAMe,WAAW,GAAG,KAAKzE,SAAL,CAAe6B,GAAf,CAClBsB,MAAM,CAACC,MAAP,CAAcM,QAAd,EAAwB;AACtBK,QAAAA,QAAQ,EAAE,CACR,KAAKjD,KAAL,CAAWkC,eAAX,CAA2B0B,eADnB,EAER,KAAK5D,KAAL,CAAWkC,eAAX,CAA2B2B,WAFnB,EAGR,KAAK7D,KAAL,CAAWkC,eAAX,CAA2B4B,aAHnB,EAIR,KAAK9D,KAAL,CAAWkC,eAAX,CAA2B6B,SAJnB,CADY;AAOtBnE,QAAAA,QAAQ,EAAE,IAPY;AAQtBgC,QAAAA,QAAQ,EAAE,KAAK5B,KAAL,CAAWD;AARC,OAAxB,CADkB,EAWlB,CAXkB,CAApB;;AAaA,UAAI,KAAKJ,KAAL,CAAWqE,eAAf,EAAgC;AAC9B,aAAKrE,KAAL,CAAWqE,eAAX,CAA2B,KAAK9E,SAAhC;AACD;;AAED,WAAKoB,MAAL,CAAYwB,QAAZ,CAAqB6B,WAAW,CAAC5B,iBAAZ,EAArB,EAAsD,KAAK/B,KAAL,CAAWkC,eAAjE;AACA,WAAKO,cAAL;AACD,KAtJkB;;AAAA,4CAwJF,MAAM;AACrB,WAAKN,QAAL,CAAc;AACZD,QAAAA,eAAe,EAAE,IADL;AAEZE,QAAAA,QAAQ,EAAEC,MAAM,CAACC,MAAP,CAAc,KAAKtC,KAAL,CAAWoC,QAAzB,EAAmC;AAC3CG,UAAAA,GAAG,EAAE;AACHC,YAAAA,OAAO,EAAE;AADN;AADsC,SAAnC;AAFE,OAAd;AAQD,KAjKkB;;AAAA,2CAmKH,MAAM;AACpB,YAAM;AAAE1C,QAAAA,eAAF;AAAmBC,QAAAA;AAAnB,UAAuC,KAAKC,KAAlD;AACAF,MAAAA,eAAe,CAACmE,UAAhB,CAA2BlE,eAA3B,EAA4C,KAAKO,MAAL,CAAY4D,QAAZ,EAA5C;;AAEA,UAAI,OAAO,KAAKvE,KAAL,CAAWwE,QAAlB,KAA+B,UAAnC,EAA+C;AAC7C,aAAKxE,KAAL,CAAWwE,QAAX,CAAoB,KAAKC,kBAAL,EAApB;AACD;;AAED,YAAMC,gBAAgB,GAAG,KAAK/D,MAAL,CAAYgE,mBAAZ,EAAzB;;AAEA,UAAI,CAACD,gBAAgB,CAACnE,MAAtB,EAA8B;AAC5B,aAAKwC,cAAL,GAAsB,KAAKpC,MAAL,CAAYqC,oBAAZ,EAAtB;AACD,OAFD,MAEO;AACL0B,QAAAA,gBAAgB,CAACxC,OAAjB,CAA0B0C,GAAD,IAAS,KAAKC,UAAL,CAAgBD,GAAG,CAACpB,EAApB,CAAlC;AAEAlE,QAAAA,iBAAiB,CAACwF,OAAlB,CAA0B;AACxBC,UAAAA,KAAK,EAAE,UADiB;AAExBC,UAAAA,IAAI,EAAE,kEAFkB;AAGxBC,UAAAA,iBAAiB,EAAE,UAHK;AAIxBC,UAAAA,UAAU,EAAE,MAAM;AAChB5F,YAAAA,iBAAiB,CAAC6F,aAAlB;AACA,mBAAOC,OAAO,CAACC,GAAR,CACLX,gBAAgB,CAACY,GAAjB,CAAsBV,GAAD,IAASxF,iBAAiB,CAACmG,kBAAlB,CAAqCX,GAAG,CAACnB,GAAzC,CAA9B,CADK,EAEL+B,IAFK,CAECC,IAAD,IAAU;AACfA,cAAAA,IAAI,CAACvD,OAAL,CAAa,CAACwD,CAAD,EAAIC,KAAJ,KAAc,KAAK9B,cAAL,CAAoBa,gBAAgB,CAACiB,KAAD,CAAhB,CAAwBnC,EAA5C,CAA3B;AACA,qBAAOiC,IAAP;AACD,aALM,CAAP;AAMD;AAZuB,SAA1B,EAaGD,IAbH,CAaSI,MAAD,IAAY;AAClB;AACA;AACA;AACA,cAAIA,MAAM,CAAC7E,KAAX,EAAkB,CAChB;AACD,WAFD,MAEO;AACL,iBAAK8E,wBAAL,CAA8BC,OAA9B;;AAEA,iBAAKnF,MAAL,CAAYoF,QAAZ,GAAuBC,IAAvB;AAEAtB,YAAAA,gBAAgB,CAACxC,OAAjB,CAA0B0C,GAAD,IAAS;AAChC,oBAAMqB,gBAAgB,GAAGvD,MAAM,CAACwD,IAAP,CACvB,KAAKnD,cADkB,EAEvBoD,IAFuB,CAEjBC,KAAD,IAAW,KAAKrD,cAAL,CAAoBqD,KAApB,EAA2BC,IAA3B,CAAgC7C,EAAhC,KAAuCoB,GAAG,CAACpB,EAFpC,CAAzB;AAGA,mBAAK7C,MAAL,CAAYwB,QAAZ,CAAqByC,GAArB,EAA0B,KAAK7B,cAAL,CAAoBkD,gBAApB,EAAsCK,KAAhE;AACD,aALD;AAOA,iBAAKT,wBAAL,GAAgC,KAAKlF,MAAL,CAAY4F,uBAAZ,CAAoC,KAAKC,aAAzC,CAAhC;;AAEA,gBAAI,OAAO,KAAKxG,KAAL,CAAWwE,QAAlB,KAA+B,UAAnC,EAA+C;AAC7C,mBAAKxE,KAAL,CAAWwE,QAAX,CAAoB,KAAKC,kBAAL,EAApB;AACD;AACF;AACF,SArCD;AAsCD;AACF,KAzNkB;;AAGjB,SAAKlF,SAAL,GAAiB,IAAIA,SAAJ,CAAc,IAAd,CAAjB;AACA,SAAKc,KAAL,GAAa;AACXoC,MAAAA,QAAQ,EAAE;AACRG,QAAAA,GAAG,EAAE,EADG;AAERW,QAAAA,IAAI,EAAE;AAFE,OADC;AAKXpD,MAAAA,eAAe,EAAE,IAAId,eAAJ,CAAoBW,KAAK,CAACG,eAA1B;AALN,KAAb;AAQA,SAAKgD,SAAL,GAAiB,IAAjB;AACA,SAAKsD,cAAL,GAAsB,EAAtB;AAEA,SAAKlC,QAAL,GAAgB,KAAKA,QAAL,CAAcmC,IAAd,CAAmB,IAAnB,CAAhB;AACD;;AAuFDC,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKhG,MAAL,CAAYgG,gBAAZ,EAAP;AACD;;AAWD9B,EAAAA,UAAU,CAAC+B,aAAD,EAAgB;AACxB,QAAI,CAAC,KAAKjG,MAAL,CAAY8F,cAAjB,EAAiC;AAC/B;AACD;;AAED,QAAII,eAAe,GAAGnE,MAAM,CAACoE,OAAP,CAAe,KAAKnG,MAAL,CAAY8F,cAA3B,EAA2CN,IAA3C,CACnBY,KAAD,IAAgBA,KAAK,CAAC,CAAD,CAAL,CAASvD,EAAT,KAAgBoD,aAAhB,IAAiCG,KAAK,CAAC,CAAD,CAAL,CAASrD,SAAT,KAAuBkD,aADpD,CAAtB;;AAIA,QAAIC,eAAJ,EAAqB;AACnB,WAAKlG,MAAL,CAAYkE,UAAZ,CAAuBgC,eAAe,CAAC,CAAD,CAAtC;AACD;AACF;;AA2FDG,EAAAA,MAAM,GAAG;AACP,UAAM;AACJ9G,MAAAA,UADI;AAEJD,MAAAA,QAFI;AAGJoB,MAAAA;AAHI,QAIF,KAAKrB,KAJT;AAKA,UAAM;AACJG,MAAAA,eADI;AACaC,MAAAA,eADb;AAC8B6G,MAAAA,WAD9B;AAC2CC,MAAAA,iBAD3C;AAC8DC,MAAAA;AAD9D,QAEF,KAAK9G,KAFT;AAGA,UAAM+G,SAAS,GAAG,KAAKpH,KAAL,CAAWoH,SAAX,IAAwB,EAA1C;AACA,UAAMC,YAAY,GAAGlH,eAAe,CAACO,OAAhB,CAAwBN,eAAxB,EAAyCK,IAA9D;AAEA,WACE;AACE,MAAA,SAAS,EAAG;AACpB,YAAY2G,SAAU;AACtB,YAAYvH,MAAM,CAAC,gBAAD,CAAmB;AACrC,YAAYsH,UAAU,GAAGtH,MAAM,CAAC,cAAD,CAAT,GAA4B,EAAG;AACrD,SALM;AAME,MAAA,KAAK,EAAE;AACLyH,QAAAA,MAAM,EAAEL,WAAW,GAAI,GAAEA,WAAY,IAAlB,GAAwB;AADtC,OANT;AASE,MAAA,WAAW,EAAE,KAAKM,WATpB;AAUE,MAAA,WAAW,EAAE,KAAKC,WAVpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAwBGrH,eAAe,CAACG,KAAhB,CAAsBC,MAAtB,IAAgCJ,eAAe,CAACK,OAAhB,CAAwBD,MAAxD,GACC,4BACE,MAAC,YAAD,CACE;AADF;AAEE,MAAA,SAAS,EAAE,GAFb;AAGE,MAAA,SAAS,EAAEc,SAHb;AAIE,MAAA,eAAe,EAAElB,eAJnB;AAKE,MAAA,eAAe,EAAEC,eALnB;AAME,MAAA,QAAQ,EAAEH,QANZ;AAOE,MAAA,SAAS,EAAE,KAAKwH,SAPlB;AAQE,MAAA,WAAW,EAAE,KAAKC,WARpB;AASE,MAAA,QAAQ,EAAE,KAAKhG,YATjB;AAUE,MAAA,YAAY,EAAE,KAAKiG,YAVrB;AAWE,MAAA,cAAc,EAAE,KAAKC,cAXvB;AAYE,MAAA,YAAY,EAAE,KAAKC,YAZrB;AAaE,MAAA,cAAc,EAAE,KAAKC,cAbvB;AAcE,MAAA,UAAU,EAAE,KAAKC,UAdnB;AAeE,MAAA,QAAQ,EAAE,KAAKC,QAfjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAkBE;AACE,MAAA,SAAS,EAAG;AAC1B,kBAAkBnI,MAAM,CAACc,MAAO;AAChC,kBAAkBP,eAAe,GAAG,EAAH,GAAQP,MAAM,CAAC,uBAAD,CAA0B;AACzE,eAJY;AAKE,MAAA,KAAK,EAAE;AACLoI,QAAAA,KAAK,EAAG,eAAcf,iBAAkB,KADnC;AAELgB,QAAAA,QAAQ,EAAG,eAAchB,iBAAkB,KAFtC;AAE4C;AACjDI,QAAAA,MAAM,EAAEL,WAAW,GAAI,GAAEA,WAAY,IAAlB,GAAwB;AAHtC,OALT;AAUE,MAAA,GAAG,EAAE,KAAKpG,SAVZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBF,EA8BGwG,YAAY,IACX;AAAG,MAAA,SAAS,EAAG,GAAExH,MAAM,CAAC,eAAD,CAAkB,mDAAzC;AAA6F,MAAA,KAAK,EAAEwH,YAAY,CAACxF,IAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,KAAK,EAAC,IAAX;AAAgB,MAAA,GAAG,EAAE1C,SAAS,CAACgJ,UAAV,CAAqBd,YAAY,CAACxF,IAAlC,CAArB;AAA8D,MAAA,GAAG,EAAC,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAM,MAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCwF,YAAY,CAACxF,IAAlD,CAFF,CA/BJ,EAoCE;AAAO,MAAA,SAAS,EAAC,oCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,oBADF,EAKE;AAAO,MAAA,SAAS,EAAC,UAAjB;AAA4B,MAAA,IAAI,EAAC,MAAjC;AAAwC,MAAA,QAAQ,MAAhD;AAAiD,MAAA,QAAQ,EAAE,KAAKuG,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CApCF,CADD,GA8CC,MAAC,QAAD;AACE,MAAA,eAAe,EAAE,KAAKC,eADxB;AAEE,MAAA,eAAe,EAAE,KAAKC,eAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtEJ,EA2EE,MAAC,WAAD;AACE,MAAA,cAAc,EAAE,KAAKzE,cADvB;AAEE,MAAA,OAAO,EAAE,KAAKxD,KAAL,CAAWoC,QAAX,CAAoBc,IAApB,CAAyBV,OAFpC;AAGE,MAAA,QAAQ,EAAE,KAAKtD,SAAL,CAAegJ,GAAf,CAAmB,KAAKlI,KAAL,CAAWoC,QAAX,CAAoBc,IAApB,CAAyBC,EAAzB,IAA+B,EAAlD,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3EF,EAgFGtD,UAAU,IAAI,KAAKG,KAAL,CAAWoC,QAAX,CAAoBG,GAAlC,IACC,MAAC,UAAD;AACE,MAAA,OAAO,EAAE,KAAKvC,KAAL,CAAWoC,QAAX,CAAoBG,GAApB,CAAwBC,OADnC;AAEE,MAAA,KAAK,EAAE,KAAK2F,cAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjFJ,CADF;AAyFD;;AAvUmC;;AA0UtC,eAAe1I,YAAf","sourcesContent":["import React from 'react';\r\nimport * as Monaco from '../monaco';\r\nimport FileIcons from '~/services/utils/FileIcons';\r\nimport SubmissionService from '~/services/Submission.service';\r\nimport FolderStructure from '~/services/utils/FolderStructure';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\n\r\nimport Feedbacks from '../Feedbacks';\r\nimport MonacoBase from '../Monaco.base';\r\nimport InitForm from '../InitForm/InitForm';\r\nimport AskTooltip from './AskTooltip/AskTooltip';\r\nimport ViewTooltip from './ViewTooltip/ViewTooltip';\r\nimport FileSwitcher from '../FileSwitcher/FileSwitcher';\r\n\r\nimport styles from '../Editor.module.scss';\r\n\r\nclass MonacoEditor extends MonacoBase {\r\n  // FIXME ðŸ‘‡\r\n  private decorationsMap: any;\r\n\r\n  // FIXME ðŸ‘‡\r\n  private oldDecorations: any;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.Feedbacks = new Feedbacks(this);\r\n    this.state = {\r\n      tooltips: {\r\n        ask: {},\r\n        view: {},\r\n      },\r\n      folderStructure: new FolderStructure(props.folderStructure),\r\n    };\r\n\r\n    this.timeoutId = null;\r\n    this.decorationsMap = {};\r\n\r\n    this.getValue = this.getValue.bind(this);\r\n  }\r\n\r\n  initEditor = () => {\r\n    const { readOnly, askTooltip } = this.props;\r\n    const { folderStructure, selectedFileKey } = this.state;\r\n\r\n    if (!folderStructure.files.length && !folderStructure.folders.length) {\r\n      return;\r\n    }\r\n\r\n    let { file } = folderStructure.getFile(selectedFileKey);\r\n\r\n    this.editor = Monaco.create(this.editorRef.current, {\r\n      value: file ? file.content : '',\r\n      readOnly,\r\n      hover: {\r\n        enabled: true,\r\n      },\r\n      scrollBeyondLastLine: false,\r\n    });\r\n    this.Feedbacks.add(...this.props.feedbacks);\r\n\r\n    Monaco.extendWithDecorate(this.editor);\r\n    Monaco.extendWithHover(this.editor, this.showViewTooltip, this.hideViewTooltip);\r\n\r\n    if (file) {\r\n      this.onFileSelect(file.key);\r\n      this.updateLanguageBasedOnFileName(file.name);\r\n\r\n      this.Feedbacks.getAll()\r\n        .filter((f) => f.file_key === file.key)\r\n        .forEach((f) => this.decorate(f.getDecorationData()));\r\n    }\r\n\r\n    if (askTooltip) {\r\n      Monaco.extendWithCursorSelectionTooltip(\r\n        this.editor,\r\n        (tooltipPosition, cursorSelection) => {\r\n          this.setState({\r\n            cursorSelection,\r\n            tooltips: Object.assign(this.state.tooltips, {\r\n              ask: { visible: true, ...tooltipPosition },\r\n            }),\r\n          });\r\n        },\r\n        this.hideAskTooltip,\r\n      );\r\n    }\r\n    this.oldDecorations = this.editor.getCustomDecorations();\r\n  }\r\n\r\n  showViewTooltip = (feedback, tooltipPosition) => {\r\n    clearTimeout(this.timeoutId);\r\n\r\n    if (tooltipPosition === undefined) {\r\n      tooltipPosition = this.editor.getBestTooltipPosition(\r\n        feedback.position[0],\r\n        (feedback.position[1] + feedback.position[3]) / 2,\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      tooltips: Object.assign(this.state.tooltips, {\r\n        view: {\r\n\r\n          id: feedback._id || feedback.timestamp,\r\n          timestamp: feedback.timestamp,\r\n          visible: true,\r\n          ...tooltipPosition,\r\n        },\r\n      }),\r\n    });\r\n  }\r\n\r\n  hideViewTooltip = () => {\r\n    this.timeoutId = setTimeout(() => {\r\n      this.setState({\r\n        tooltips: Object.assign(this.state.tooltips, {\r\n          view: {\r\n            id: this.state.tooltips.view.id,\r\n            visible: false,\r\n          },\r\n        }),\r\n      });\r\n    }, 500);\r\n  }\r\n\r\n  getConfiguration() {\r\n    return this.editor.getConfiguration();\r\n  }\r\n\r\n  onFeedbackDone = (feedbackId) => {\r\n    this.props.onFeedbackDone(feedbackId);\r\n    this.Feedbacks.delete(feedbackId);\r\n  }\r\n\r\n  decorate = (decorationData) => {\r\n    this.editor.decorate(decorationData, ...decorationData.position);\r\n  }\r\n\r\n  unDecorate(idOrtimestamp) {\r\n    if (!this.editor.decorationsMap) {\r\n      return;\r\n    }\r\n\r\n    let decorationEntry = Object.entries(this.editor.decorationsMap).find(\r\n      (entry: any) => entry[1].id === idOrtimestamp || entry[1].timestamp === idOrtimestamp,\r\n    );\r\n\r\n    if (decorationEntry) {\r\n      this.editor.unDecorate(decorationEntry[0]);\r\n    }\r\n  }\r\n\r\n  onGiveFeedback = (feedback) => {\r\n    const newFeedback = this.Feedbacks.add(\r\n      Object.assign(feedback, {\r\n        position: [\r\n          this.state.cursorSelection.startLineNumber,\r\n          this.state.cursorSelection.startColumn,\r\n          this.state.cursorSelection.endLineNumber,\r\n          this.state.cursorSelection.endColumn,\r\n        ],\r\n        readOnly: true,\r\n        file_key: this.state.selectedFileKey,\r\n      }),\r\n    )[0];\r\n\r\n    if (this.props.onFeedbackAdded) {\r\n      this.props.onFeedbackAdded(this.Feedbacks);\r\n    }\r\n\r\n    this.editor.decorate(newFeedback.getDecorationData(), this.state.cursorSelection);\r\n    this.hideAskTooltip();\r\n  }\r\n\r\n  hideAskTooltip = () => {\r\n    this.setState({\r\n      cursorSelection: null,\r\n      tooltips: Object.assign(this.state.tooltips, {\r\n        ask: {\r\n          visible: false,\r\n        },\r\n      }),\r\n    });\r\n  }\r\n\r\n  onModelChange = () => {\r\n    const { folderStructure, selectedFileKey } = this.state;\r\n    folderStructure.setContent(selectedFileKey, this.editor.getValue());\r\n\r\n    if (typeof this.props.onChange === 'function') {\r\n      this.props.onChange(this.getFolderStructure());\r\n    }\r\n\r\n    const emptyDecorations = this.editor.getEmptyDecorations();\r\n\r\n    if (!emptyDecorations.length) {\r\n      this.oldDecorations = this.editor.getCustomDecorations();\r\n    } else {\r\n      emptyDecorations.forEach((dec) => this.unDecorate(dec.id));\r\n\r\n      SweetAlertService.confirm({\r\n        title: 'Hold on!',\r\n        text: 'UrmeazÄƒ sÄƒ È™tergi niÈ™te cod ce conÈ›ine feedback-uri. EÈ™ti sigur?',\r\n        confirmButtonText: 'Continue',\r\n        preConfirm: () => {\r\n          SweetAlertService.toggleLoading();\r\n          return Promise.all(\r\n            emptyDecorations.map((dec) => SubmissionService.markFeedbackAsDone(dec._id)),\r\n          ).then((resp) => {\r\n            resp.forEach((_, index) => this.onFeedbackDone(emptyDecorations[index].id));\r\n            return resp;\r\n          });\r\n        },\r\n      }).then((result) => {\r\n        // FIXME ðŸ‘‡ (correct types)\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        if (result.value) {\r\n          // mark feedback as done\r\n        } else {\r\n          this._baseModelChangeListener.dispose();\r\n\r\n          this.editor.getModel().undo();\r\n\r\n          emptyDecorations.forEach((dec) => {\r\n            const matchingOldDecId = Object.keys(\r\n              this.oldDecorations,\r\n            ).find((decId) => this.oldDecorations[decId].data.id === dec.id);\r\n            this.editor.decorate(dec, this.oldDecorations[matchingOldDecId].range);\r\n          });\r\n\r\n          this._baseModelChangeListener = this.editor.onDidChangeModelContent(this.onModelChange);\r\n\r\n          if (typeof this.props.onChange === 'function') {\r\n            this.props.onChange(this.getFolderStructure());\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      askTooltip,\r\n      readOnly,\r\n      feedbacks,\r\n    } = this.props;\r\n    const {\r\n      folderStructure, selectedFileKey, fixedHeight, fileSwitcherWidth, isDropable,\r\n    } = this.state;\r\n    const className = this.props.className || '';\r\n    const selectedFile = folderStructure.getFile(selectedFileKey).file;\r\n\r\n    return (\r\n      <div\r\n        className={`\r\n          ${className}\r\n          ${styles['editor-wrapper']} \r\n          ${isDropable ? styles['is--dropable'] : ''}\r\n        `}\r\n        style={{\r\n          height: fixedHeight ? `${fixedHeight}px` : 'initial',\r\n        }}\r\n        onDragEnter={this.onDragEnter}\r\n        onDragLeave={this.onDragLeave}\r\n      >\r\n        {/* {toggleableHeight && (\r\n        <button\r\n          className={\r\n            `editor-wrapper__fit-btn\r\n            icon-btn\r\n            ${fixedHeight ? 'icon-minimize-2' : 'icon-maximize-2'\r\n        }`\r\n}\r\n          title={fixedHeight ? 'Fixed size' : 'Fit to code'}\r\n          onClick={this.toggleFit}\r\n        />\r\n        )} */}\r\n        {folderStructure.files.length || folderStructure.folders.length ? (\r\n          <>\r\n            <FileSwitcher\r\n              // FIXME ðŸ‘‡\r\n              maxHeight={500}\r\n              feedbacks={feedbacks}\r\n              folderStructure={folderStructure}\r\n              selectedFileKey={selectedFileKey}\r\n              readOnly={readOnly}\r\n              onFileAdd={this.onFileAdd}\r\n              onFolderAdd={this.onFolderAdd}\r\n              onSelect={this.onFileSelect}\r\n              onFileRename={this.onFileRename}\r\n              onFolderRename={this.onFolderRename}\r\n              onFileDelete={this.onFileDelete}\r\n              onFolderDelete={this.onFolderDelete}\r\n              onDownload={this.onDownload}\r\n              onResize={this.onResize}\r\n            />\r\n            <div\r\n              className={`\r\n                ${styles.editor}\r\n                ${selectedFileKey ? '' : styles['has--no-selected-file']}\r\n              `}\r\n              style={{\r\n                width: `calc(100% - ${fileSwitcherWidth}px)`,\r\n                maxWidth: `calc(100% - ${fileSwitcherWidth}px)`, // without this it doesn't resize in FF\r\n                height: fixedHeight ? `${fixedHeight}px` : '',\r\n              }}\r\n              ref={this.editorRef}\r\n            />\r\n            {selectedFile && (\r\n              <p className={`${styles['selected-file']} d-flex justify-content-center align-items-center`} title={selectedFile.name}>\r\n                <img width=\"20\" src={FileIcons.getIconUrl(selectedFile.name)} alt=\"icon\" />\r\n                <span className=\"ellipsis-overflow\">{selectedFile.name}</span>\r\n              </p>\r\n            )}\r\n            <label className=\"upload-label pin-full center--flex\">\r\n              <p>\r\n                <span className=\"icon-check mr-2\" />\r\n                Drop to replace\r\n              </p>\r\n              <input className=\"pin-full\" type=\"file\" multiple onChange={this.onReplace} />\r\n            </label>\r\n          </>\r\n        ) : (\r\n          <InitForm\r\n            createFirstFile={this.createFirstFile}\r\n            uploadStructure={this.uploadStructure}\r\n          />\r\n        )}\r\n        <ViewTooltip\r\n          onFeedbackDone={this.onFeedbackDone}\r\n          visible={this.state.tooltips.view.visible}\r\n          feedback={this.Feedbacks.get(this.state.tooltips.view.id || {})}\r\n        />\r\n        {askTooltip && this.state.tooltips.ask && (\r\n          <AskTooltip\r\n            visible={this.state.tooltips.ask.visible}\r\n            onAsk={this.onGiveFeedback}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MonacoEditor;\r\n"]},"metadata":{},"sourceType":"module"}