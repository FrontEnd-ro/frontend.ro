{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.RouteAnnouncer = RouteAnnouncer;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _router = require(\"./router\");\n\nfunction RouteAnnouncer() {\n  var _ref = (0, _router.useRouter)(),\n      asPath = _ref.asPath;\n\n  var _ref2 = (0, _react.useState)(''),\n      _ref3 = _slicedToArray(_ref2, 2),\n      routeAnnouncement = _ref3[0],\n      setRouteAnnouncement = _ref3[1]; // Only announce the path change, but not for the first load because screen reader will do that automatically.\n\n\n  var initialPathLoaded = (0, _react.useRef)(false); // Every time the path changes, announce the route change. The announcement will be prioritized by h1, then title\n  // (from metadata), and finally if those don't exist, then the pathName that is in the URL. This methodology is\n  // inspired by Marcy Sutton's accessible client routing user testing. More information can be found here:\n  // https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/\n\n  (0, _react.useEffect)(function () {\n    if (!initialPathLoaded.current) {\n      initialPathLoaded.current = true;\n      return;\n    }\n\n    var newRouteAnnouncement;\n    var pageHeader = document.querySelector('h1');\n\n    if (pageHeader) {\n      newRouteAnnouncement = pageHeader.innerText || pageHeader.textContent;\n    }\n\n    if (!newRouteAnnouncement) {\n      if (document.title) {\n        newRouteAnnouncement = document.title;\n      } else {\n        newRouteAnnouncement = asPath;\n      }\n    }\n\n    setRouteAnnouncement(newRouteAnnouncement);\n  }, // TODO: switch to pathname + query object of dynamic route requirements\n  [asPath]);\n  return /*#__PURE__*/_react[\"default\"].createElement(\"p\", {\n    \"aria-live\": \"assertive\" // Make the announcement immediately.\n    ,\n    id: \"__next-route-announcer__\",\n    role: \"alert\",\n    style: {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      height: '1px',\n      margin: '-1px',\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      width: '1px',\n      // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n      whiteSpace: 'nowrap',\n      wordWrap: 'normal'\n    }\n  }, routeAnnouncement);\n}\n\n_c = RouteAnnouncer;\nvar _default = RouteAnnouncer;\nexports[\"default\"] = _default;\n\nvar _c;\n\n$RefreshReg$(_c, \"RouteAnnouncer\");","map":{"version":3,"sources":["../../client/route-announcer.tsx"],"names":["initialPathLoaded","pageHeader","document","newRouteAnnouncement","setRouteAnnouncement","border","clip","height","margin","overflow","padding","position","width","whiteSpace","wordWrap","RouteAnnouncer"],"mappings":";;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEO,SAAA,cAAA,GAA0B;AAAA,aACZ,CAAA,GAAA,OAAA,CAAnB,SAAmB,GADY;AAAA,MACzB,MADyB,QACzB,MADyB;;AAAA,cAEmB,CAAA,GAAA,MAAA,CAAA,QAAA,EAAlD,EAAkD,CAFnB;AAAA;AAAA,MAEzB,iBAFyB;AAAA,MAEzB,oBAFyB,aAI/B;;;AACA,MAAMA,iBAAiB,GAAG,CAAA,GAAA,MAAA,CAAA,MAAA,EAA1B,KAA0B,CAA1B,CAL+B,CAO/B;AACA;AACA;AACA;;AACA,GAAA,GAAA,MAAA,CAAA,SAAA,EACE,YAAM;AACJ,QAAI,CAACA,iBAAiB,CAAtB,OAAA,EAAgC;AAC9BA,MAAAA,iBAAiB,CAAjBA,OAAAA,GAAAA,IAAAA;AACA;AAGF;;AAAA,QAAA,oBAAA;AACA,QAAMC,UAAU,GAAGC,QAAQ,CAARA,aAAAA,CAAnB,IAAmBA,CAAnB;;AAEA,QAAA,UAAA,EAAgB;AACdC,MAAAA,oBAAoB,GAAGF,UAAU,CAAVA,SAAAA,IAAwBA,UAAU,CAAzDE,WAAAA;AAEF;;AAAA,QAAI,CAAJ,oBAAA,EAA2B;AACzB,UAAID,QAAQ,CAAZ,KAAA,EAAoB;AAClBC,QAAAA,oBAAoB,GAAGD,QAAQ,CAA/BC,KAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,oBAAoB,GAApBA,MAAAA;AAEH;AAEDC;;AAAAA,IAAAA,oBAAoB,CAApBA,oBAAoB,CAApBA;AArBJ,GAAA,EAuBE;AACA,GAxBF,MAwBE,CAxBF;AA2BA,SAAA,aACE,MAAA,WAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,iBAAU,WADZ,CACwB;AADxB;AAEE,IAAA,EAAE,EAFJ,0BAAA;AAGE,IAAA,IAAI,EAHN,OAAA;AAIE,IAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EADD,CAAA;AAELC,MAAAA,IAAI,EAFC,eAAA;AAGLC,MAAAA,MAAM,EAHD,KAAA;AAILC,MAAAA,MAAM,EAJD,MAAA;AAKLC,MAAAA,QAAQ,EALH,QAAA;AAMLC,MAAAA,OAAO,EANF,CAAA;AAOLC,MAAAA,QAAQ,EAPH,UAAA;AAQLC,MAAAA,KAAK,EARA,KAAA;AAUL;AACAC,MAAAA,UAAU,EAXL,QAAA;AAYLC,MAAAA,QAAQ,EAhBZ;AAIS;AAJT,GAAA,EADF,iBACE,CADF;;;KAtCK,c;eA+DQC,c","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport { useRouter } from './router'\n\nexport function RouteAnnouncer() {\n  const { asPath } = useRouter()\n  const [routeAnnouncement, setRouteAnnouncement] = useState('')\n\n  // Only announce the path change, but not for the first load because screen reader will do that automatically.\n  const initialPathLoaded = useRef(false)\n\n  // Every time the path changes, announce the route change. The announcement will be prioritized by h1, then title\n  // (from metadata), and finally if those don't exist, then the pathName that is in the URL. This methodology is\n  // inspired by Marcy Sutton's accessible client routing user testing. More information can be found here:\n  // https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/\n  useEffect(\n    () => {\n      if (!initialPathLoaded.current) {\n        initialPathLoaded.current = true\n        return\n      }\n\n      let newRouteAnnouncement\n      const pageHeader = document.querySelector('h1')\n\n      if (pageHeader) {\n        newRouteAnnouncement = pageHeader.innerText || pageHeader.textContent\n      }\n      if (!newRouteAnnouncement) {\n        if (document.title) {\n          newRouteAnnouncement = document.title\n        } else {\n          newRouteAnnouncement = asPath\n        }\n      }\n\n      setRouteAnnouncement(newRouteAnnouncement)\n    },\n    // TODO: switch to pathname + query object of dynamic route requirements\n    [asPath]\n  )\n\n  return (\n    <p\n      aria-live=\"assertive\" // Make the announcement immediately.\n      id=\"__next-route-announcer__\"\n      role=\"alert\"\n      style={{\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: '1px',\n        margin: '-1px',\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        width: '1px',\n\n        // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n        whiteSpace: 'nowrap',\n        wordWrap: 'normal',\n      }}\n    >\n      {routeAnnouncement}\n    </p>\n  )\n}\n\nexport default RouteAnnouncer\n"]},"metadata":{},"sourceType":"script"}