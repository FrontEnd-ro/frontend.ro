{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Button\\\\Button.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst Button = /*#__PURE__*/React.forwardRef((_ref, forwardRef) => {\n  let {\n    icon,\n    children,\n    loading = false,\n    className,\n    disabled,\n    variant = 'transparent',\n    withIcon = false,\n    outline = false,\n    bouncy = false\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"icon\", \"children\", \"loading\", \"className\", \"disabled\", \"variant\", \"withIcon\", \"outline\", \"bouncy\"]);\n\n  let updatedClassName = className || '';\n\n  if (loading) {\n    updatedClassName += ' btn--loading';\n  } else if (withIcon) {\n    updatedClassName += ' btn--with-icon';\n  } else if (outline) {\n    updatedClassName += ' btn--outline';\n  } else if (bouncy) {\n    updatedClassName += ' btn--bouncy';\n  } else {\n    updatedClassName += '';\n  }\n\n  return __jsx(\"button\", _extends({\n    // eslint-disable-next-line react/button-has-type\n    type: props.type || 'button',\n    className: `\n          btn \n          ${variant === `${variant}` ? `btn--${variant}` : 'btn--transparent'} \n          ${updatedClassName}\n        `,\n    disabled: loading || disabled,\n    ref: forwardRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), withIcon && __jsx(FontAwesomeIcon, {\n    icon: icon,\n    height: \"24\",\n    className: \"mr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), children);\n});\nexport default Button;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Button/Button.tsx"],"names":["React","FontAwesomeIcon","Button","forwardRef","icon","children","loading","className","disabled","variant","withIcon","outline","bouncy","props","updatedClassName","type"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAyD,OAAzD;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AAqBA,MAAMC,MAAM,gBAAGF,KAAK,CAACG,UAAN,CAIb,OAaEA,UAbF,KAcK;AAAA,MAbH;AACEC,IAAAA,IADF;AAEEC,IAAAA,QAFF;AAGEC,IAAAA,OAAO,GAAG,KAHZ;AAIEC,IAAAA,SAJF;AAKEC,IAAAA,QALF;AAMEC,IAAAA,OAAO,GAAG,aANZ;AAOEC,IAAAA,QAAQ,GAAG,KAPb;AAQEC,IAAAA,OAAO,GAAG,KARZ;AASEC,IAAAA,MAAM,GAAG;AATX,GAaG;AAAA,MAHEC,KAGF;;AACH,MAAIC,gBAAgB,GAAGP,SAAS,IAAI,EAApC;;AACA,MAAID,OAAJ,EAAa;AACXQ,IAAAA,gBAAgB,IAAI,eAApB;AACD,GAFD,MAEO,IAAIJ,QAAJ,EAAc;AACnBI,IAAAA,gBAAgB,IAAI,iBAApB;AACD,GAFM,MAEA,IAAIH,OAAJ,EAAa;AAClBG,IAAAA,gBAAgB,IAAI,eAApB;AACD,GAFM,MAEA,IAAIF,MAAJ,EAAY;AACjBE,IAAAA,gBAAgB,IAAI,cAApB;AACD,GAFM,MAEA;AACLA,IAAAA,gBAAgB,IAAI,EAApB;AACD;;AAED,SACE;AACE;AACA,IAAA,IAAI,EAAED,KAAK,CAACE,IAAN,IAAc,QAFtB;AAGE,IAAA,SAAS,EAAG;AACpB;AACA,YAAYN,OAAO,KAAM,GAAEA,OAAQ,EAAvB,GAA4B,QAAOA,OAAQ,EAA3C,GAA+C,kBAAmB;AAC9E,YAAYK,gBAAiB;AAC7B,SAPM;AAQE,IAAA,QAAQ,EAAER,OAAO,IAAIE,QARvB;AASE,IAAA,GAAG,EAAEL;AATP,KAUMU,KAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYGH,QAAQ,IACP,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAEN,IAAvB;AAA6B,IAAA,MAAM,EAAC,IAApC;AAAyC,IAAA,SAAS,EAAC,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,EAeGC,QAfH,CADF;AAmBD,CAnDY,CAAf;AAqDA,eAAeH,MAAf","sourcesContent":["import React, { HTMLAttributes, PropsWithChildren } from 'react';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\ninterface Props {\r\n  loading?: boolean;\r\n  variant?:\r\n  | 'light'\r\n  | 'blue'\r\n  | 'success'\r\n  | 'danger'\r\n  | 'transparent'\r\n  | 'yellow'\r\n  | 'grey'\r\n  // We define here the form property because\r\n  // even if it's a valid attribute on buttons, React or TS complain about it.\r\n  form?: string;\r\n  withIcon?: boolean;\r\n  icon?: IconProp;\r\n  outline?: boolean;\r\n  bouncy?: boolean;\r\n}\r\nexport type Ref = HTMLButtonElement;\r\nconst Button = React.forwardRef<\r\n  Ref,\r\n  PropsWithChildren<Props> & React.ButtonHTMLAttributes<HTMLButtonElement>\r\n>(\r\n  (\r\n    {\r\n      icon,\r\n      children,\r\n      loading = false,\r\n      className,\r\n      disabled,\r\n      variant = 'transparent',\r\n      withIcon = false,\r\n      outline = false,\r\n      bouncy = false,\r\n      ...props\r\n    }: PropsWithChildren<Props> & React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    forwardRef,\r\n  ) => {\r\n    let updatedClassName = className || '';\r\n    if (loading) {\r\n      updatedClassName += ' btn--loading';\r\n    } else if (withIcon) {\r\n      updatedClassName += ' btn--with-icon';\r\n    } else if (outline) {\r\n      updatedClassName += ' btn--outline';\r\n    } else if (bouncy) {\r\n      updatedClassName += ' btn--bouncy';\r\n    } else {\r\n      updatedClassName += '';\r\n    }\r\n\r\n    return (\r\n      <button\r\n        // eslint-disable-next-line react/button-has-type\r\n        type={props.type || 'button'}\r\n        className={`\r\n          btn \r\n          ${variant === `${variant}` ? `btn--${variant}` : 'btn--transparent'} \r\n          ${updatedClassName}\r\n        `}\r\n        disabled={loading || disabled}\r\n        ref={forwardRef}\r\n        {...props}\r\n      >\r\n        {withIcon && (\r\n          <FontAwesomeIcon icon={icon} height=\"24\" className=\"mr-2\" />\r\n        )}\r\n        {children}\r\n      </button>\r\n    );\r\n  },\r\n);\r\nexport default Button;\r\n"]},"metadata":{},"sourceType":"module"}