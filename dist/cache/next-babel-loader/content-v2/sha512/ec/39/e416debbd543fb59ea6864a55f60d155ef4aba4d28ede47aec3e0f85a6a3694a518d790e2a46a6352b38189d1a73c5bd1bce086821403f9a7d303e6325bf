{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\notification-tooltip\\\\NotificationTooltip.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBell, faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { loadNotificationsSuccess, markNotificationAsRead, markNotificationAsUnread, markAllAsRead } from '../../redux/user/user.actions';\nimport UserService from '../../services/User.service';\nimport NotificationSkeleton from './notification/NotificationSkeleton';\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\nimport Notification from './notification/Notification';\nimport styles from './NotificationTooltip.module.scss';\n\nclass NotificationsTooltip extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"hiddenRef\", void 0);\n\n    _defineProperty(this, \"observer\", void 0);\n\n    _defineProperty(this, \"initIntersectionObserver\", () => {\n      const options = {\n        threshold: 0.3\n      };\n      this.observer = new IntersectionObserver(this.loadMore, options);\n      this.observer.observe(this.hiddenRef.current);\n    });\n\n    _defineProperty(this, \"loadMore\", entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          this.loadNextPage();\n        }\n      });\n    });\n\n    _defineProperty(this, \"loadNextPage\", async () => {\n      const {\n        user,\n        dispatch\n      } = this.props;\n      const {\n        notifications\n      } = user;\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const newNotifications = await UserService.getNotifications(notifications.page);\n        dispatch(loadNotificationsSuccess(newNotifications));\n      } catch (err) {\n        SweetAlertService.toast({\n          type: 'error',\n          text: err\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"markAsRead\", async id => {\n      const {\n        user\n      } = this.props;\n      const {\n        notifications\n      } = user;\n      const {\n        dispatch\n      } = this.props;\n\n      if (notifications.list.find(n => n._id === id).isUnread) {\n        try {\n          dispatch(markNotificationAsRead(id));\n          await UserService.markAsRead(id);\n        } catch (err) {\n          dispatch(markNotificationAsUnread(id));\n        }\n      }\n    });\n\n    _defineProperty(this, \"markAllAsRead\", async () => {\n      const {\n        dispatch\n      } = this.props;\n\n      try {\n        dispatch(markAllAsRead());\n        await UserService.markAllAsRead();\n      } catch (err) {\n        SweetAlertService.toast({\n          type: 'error',\n          text: err\n        });\n      }\n    });\n\n    this.state = {\n      loading: false,\n\n      /** at this point isOpen is true so we can see the notifications when we enter the page */\n      isOpen: true\n    };\n    this.hiddenRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      user\n    } = this.props;\n    const {\n      notifications\n    } = user;\n\n    if (!notifications.end) {\n      this.initIntersectionObserver();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      user\n    } = this.props;\n\n    if (prevProps.user.notifications.end !== user.notifications.end && user.notifications.end) {\n      this.observer.disconnect();\n    }\n\n    if (prevProps.user.notifications.end !== user.notifications.end && !user.notifications.end) {\n      this.initIntersectionObserver();\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      user\n    } = this.props;\n    const {\n      notifications\n    } = user;\n\n    if (!notifications.end) {\n      this.observer.disconnect();\n    }\n  }\n\n  render() {\n    const {\n      user\n    } = this.props;\n    const {\n      loading,\n      isOpen\n    } = this.state;\n    const notifications = user.notifications.list || [];\n    return __jsx(\"div\", {\n      className: `${styles['notification-tooltip']}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: styles.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, __jsx(FontAwesomeIcon, {\n      width: \"16\",\n      icon: loading ? faSpinner : faBell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    })), isOpen && __jsx(\"ul\", {\n      className: styles.notifications,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, __jsx(\"li\", {\n      className: \"text-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      type: \"button\",\n      className: `${styles['mark-all-as-read-btn']} outline-none d-inline-block border-none`,\n      onClick: this.markAllAsRead,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 15\n      }\n    }, \"Mark all as read\")), notifications.map(notificationProps => __jsx(Notification, _extends({}, notificationProps, {\n      key: notificationProps._id,\n      onMarkAsRead: () => this.markAsRead(notificationProps._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }))), loading && __jsx(React.Fragment, null, __jsx(NotificationSkeleton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }), __jsx(NotificationSkeleton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }), __jsx(NotificationSkeleton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }), __jsx(NotificationSkeleton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }), __jsx(NotificationSkeleton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    })), __jsx(\"li\", {\n      className: \"invisible\",\n      ref: this.hiddenRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nconst connector = connect(mapStateToProps);\nexport default connector(NotificationsTooltip);","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/notification-tooltip/NotificationTooltip.tsx"],"names":["React","connect","FontAwesomeIcon","faBell","faSpinner","loadNotificationsSuccess","markNotificationAsRead","markNotificationAsUnread","markAllAsRead","UserService","NotificationSkeleton","SweetAlertService","Notification","styles","NotificationsTooltip","Component","constructor","props","options","threshold","observer","IntersectionObserver","loadMore","observe","hiddenRef","current","entries","forEach","entry","isIntersecting","loadNextPage","user","dispatch","notifications","setState","loading","newNotifications","getNotifications","page","err","toast","type","text","id","list","find","n","_id","isUnread","markAsRead","state","isOpen","createRef","componentDidMount","end","initIntersectionObserver","componentDidUpdate","prevProps","disconnect","componentWillUnmount","render","icon","map","notificationProps","mapStateToProps","connector"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n  loadNotificationsSuccess,\r\n  markNotificationAsRead,\r\n  markNotificationAsUnread,\r\n  markAllAsRead,\r\n} from '../../redux/user/user.actions';\r\nimport UserService from '../../services/User.service';\r\n\r\nimport NotificationSkeleton from './notification/NotificationSkeleton';\r\nimport { RootState } from '~/redux/root.reducer';\r\nimport SweetAlertService from '~/services/sweet-alert/SweetAlert.service';\r\nimport Notification from './notification/Notification';\r\n\r\nimport styles from './NotificationTooltip.module.scss';\r\n\r\ninterface State {\r\n  loading: boolean;\r\n  isOpen: boolean;\r\n}\r\n\r\nclass NotificationsTooltip extends React.Component<\r\n  ConnectedProps<typeof connector>,\r\n  State\r\n  > {\r\n  hiddenRef: React.RefObject<HTMLLIElement>;\r\n\r\n  private observer: IntersectionObserver;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loading: false,\r\n      /** at this point isOpen is true so we can see the notifications when we enter the page */\r\n      isOpen: true,\r\n    };\r\n\r\n    this.hiddenRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { user } = this.props;\r\n    const { notifications } = user;\r\n\r\n    if (!notifications.end) {\r\n      this.initIntersectionObserver();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { user } = this.props;\r\n\r\n    if (prevProps.user.notifications.end !== user.notifications.end && user.notifications.end) {\r\n      this.observer.disconnect();\r\n    }\r\n\r\n    if (prevProps.user.notifications.end !== user.notifications.end && !user.notifications.end) {\r\n      this.initIntersectionObserver();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { user } = this.props;\r\n    const { notifications } = user;\r\n\r\n    if (!notifications.end) {\r\n      this.observer.disconnect();\r\n    }\r\n  }\r\n\r\n  initIntersectionObserver = () => {\r\n    const options = {\r\n      threshold: 0.3,\r\n    };\r\n    this.observer = new IntersectionObserver(this.loadMore, options);\r\n    this.observer.observe(this.hiddenRef.current);\r\n  };\r\n\r\n  loadMore = (entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting) {\r\n        this.loadNextPage();\r\n      }\r\n    });\r\n  };\r\n\r\n  loadNextPage = async () => {\r\n    const { user, dispatch } = this.props;\r\n    const { notifications } = user;\r\n    this.setState({ loading: true });\r\n\r\n    try {\r\n      const newNotifications = await UserService.getNotifications(notifications.page);\r\n      dispatch(loadNotificationsSuccess(newNotifications));\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  markAsRead = async (id) => {\r\n    const { user } = this.props;\r\n    const { notifications } = user;\r\n    const { dispatch } = this.props;\r\n\r\n    if (notifications.list.find((n) => n._id === id).isUnread) {\r\n      try {\r\n        dispatch(markNotificationAsRead(id));\r\n        await UserService.markAsRead(id);\r\n      } catch (err) {\r\n        dispatch(markNotificationAsUnread(id));\r\n      }\r\n    }\r\n  };\r\n\r\n  markAllAsRead = async () => {\r\n    const { dispatch } = this.props;\r\n\r\n    try {\r\n      dispatch(markAllAsRead());\r\n      await UserService.markAllAsRead();\r\n    } catch (err) {\r\n      SweetAlertService.toast({ type: 'error', text: err });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    const { loading, isOpen } = this.state;\r\n\r\n    const notifications = user.notifications.list || [];\r\n\r\n    return (\r\n      <div className={`${styles['notification-tooltip']}`}>\r\n        <div className={styles.icon}>\r\n          <FontAwesomeIcon width=\"16\" icon={loading ? faSpinner : faBell} />\r\n        </div>\r\n        {isOpen && (\r\n          <ul className={styles.notifications}>\r\n            <li className=\"text-right\">\r\n              <button\r\n                type=\"button\"\r\n                className={`${styles['mark-all-as-read-btn']} outline-none d-inline-block border-none`}\r\n                onClick={this.markAllAsRead}\r\n              >\r\n                Mark all as read\r\n              </button>\r\n            </li>\r\n            {notifications.map((notificationProps) => (\r\n              <Notification\r\n                {...notificationProps}\r\n                key={notificationProps._id}\r\n                onMarkAsRead={() => this.markAsRead(notificationProps._id)}\r\n              />\r\n            ))}\r\n            {loading && (\r\n              <>\r\n                <NotificationSkeleton />\r\n                <NotificationSkeleton />\r\n                <NotificationSkeleton />\r\n                <NotificationSkeleton />\r\n                <NotificationSkeleton />\r\n              </>\r\n            )}\r\n            <li className=\"invisible\" ref={this.hiddenRef} />\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: RootState) {\r\n  return {\r\n    user: state.user,\r\n  };\r\n}\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport default connector(NotificationsTooltip);\r\n"]},"metadata":{},"sourceType":"module"}