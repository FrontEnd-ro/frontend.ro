{"ast":null,"code":"import { useRouter } from 'next/router';\nimport { useEffect } from 'react';\nimport ClientMonitoring, { LogEventType } from './ClientMonitoring';\nimport SweetAlertService from './sweet-alert/SweetAlert.service';\nimport { noop } from './Utils';\n\nfunction useOutsideClick(ref, handler) {\n  useEffect(() => {\n    const listener = event => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}\n\nfunction useClipboard(ref, onCopy = noop) {\n  const initClipboard = ClipboardJS => {\n    let clipboard = new ClipboardJS(ref.current);\n    clipboard.on('success', e => {\n      e.clearSelection();\n      SweetAlertService.toast({\n        text: 'Successfully copied to clipboard.'\n      });\n      onCopy();\n    });\n    clipboard.on('error', () => {\n      SweetAlertService.toast({\n        type: 'error',\n        text: \"Seems like your browser doesn't support clipboard copying. You have to copy it manually...\"\n      });\n    });\n  };\n\n  useEffect(() => {\n    import('clipboard').then(module => {\n      initClipboard(module.default);\n    });\n  }, []);\n}\n\nfunction withClientMonitoring() {\n  useEffect(() => {\n    // eslint-disable-next-line no-restricted-globals\n    if (!location.host.includes('frontend.ro')) {\n      return;\n    }\n\n    ClientMonitoring.log(LogEventType.ROUTE);\n    window.addEventListener('beforeunload', ClientMonitoring.destroy);\n  }, []);\n}\n\nfunction withSmoothScroll(ref) {\n  useEffect(() => {\n    ref.current.style.scrollBehavior = 'smooth';\n    return () => {\n      ref.current.style.scrollBehavior = 'initial';\n    };\n  }, []);\n}\n\nfunction useLoggedInOnly(isLoggedIn, path) {\n  const router = useRouter();\n\n  if (!isLoggedIn && path) {\n    if (false) {\n      router.replace(`/auth?next=${encodeURIComponent(path)}`);\n    }\n  }\n}\n\nfunction useAnonymousOnly(router, isLoggedIn, nextHref) {\n  if (isLoggedIn && nextHref) {\n    if (false) {\n      router.replace(nextHref);\n    }\n  }\n}\n/**\r\n * If the user is not logged in when this method is called,\r\n * let's show the Login/Register modal and authenticate/register.\r\n */\n\n\nfunction withAuthModal(isLoggedIn, cb) {\n  return (...props) => {\n    if (isLoggedIn) {\n      cb(...props);\n    } else {\n      import('~/components/login/Login').then(module => {\n        SweetAlertService.content(module.default, 'Autentifică-te', {\n          onSuccess(userInfo) {\n            SweetAlertService.closePopup();\n            cb(...props, userInfo);\n          }\n\n        });\n      });\n    }\n  };\n}\n\nexport { useOutsideClick, useClipboard, withClientMonitoring, withSmoothScroll, useLoggedInOnly, useAnonymousOnly, withAuthModal };","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/Hooks.ts"],"names":["useRouter","useEffect","ClientMonitoring","LogEventType","SweetAlertService","noop","useOutsideClick","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener","useClipboard","onCopy","initClipboard","ClipboardJS","clipboard","on","e","clearSelection","toast","text","type","then","module","default","withClientMonitoring","location","host","includes","log","ROUTE","window","destroy","withSmoothScroll","style","scrollBehavior","useLoggedInOnly","isLoggedIn","path","router","replace","encodeURIComponent","useAnonymousOnly","nextHref","withAuthModal","cb","props","content","onSuccess","userInfo","closePopup"],"mappings":"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","sourcesContent":["import { NextRouter, useRouter } from 'next/router';\r\nimport { MutableRefObject, useEffect } from 'react';\r\nimport { UserState } from '~/redux/user/types';\r\nimport ClientMonitoring, { LogEventType } from './ClientMonitoring';\r\nimport SweetAlertService from './sweet-alert/SweetAlert.service';\r\nimport { noop } from './Utils';\r\n\r\nfunction useOutsideClick(ref: MutableRefObject<HTMLElement>, handler: (e: MouseEvent) => void) {\r\n  useEffect(() => {\r\n    const listener = (event) => {\r\n      if (!ref.current || ref.current.contains(event.target)) {\r\n        return;\r\n      }\r\n\r\n      handler(event);\r\n    };\r\n\r\n    document.addEventListener('mousedown', listener);\r\n    document.addEventListener('touchstart', listener);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener);\r\n      document.removeEventListener('touchstart', listener);\r\n    };\r\n  }, [ref, handler]);\r\n}\r\n\r\nfunction useClipboard(ref: MutableRefObject<HTMLElement>, onCopy: () => void = noop) {\r\n  const initClipboard = (ClipboardJS) => {\r\n    let clipboard = new ClipboardJS(ref.current);\r\n\r\n    clipboard.on('success', (e) => {\r\n      e.clearSelection();\r\n\r\n      SweetAlertService.toast({ text: 'Successfully copied to clipboard.' });\r\n      onCopy();\r\n    });\r\n\r\n    clipboard.on('error', () => {\r\n      SweetAlertService.toast({ type: 'error', text: \"Seems like your browser doesn't support clipboard copying. You have to copy it manually...\" });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    import('clipboard').then((module) => {\r\n      initClipboard(module.default);\r\n    });\r\n  }, []);\r\n}\r\n\r\nfunction withClientMonitoring() {\r\n  useEffect(() => {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    if (!location.host.includes('frontend.ro')) {\r\n      return;\r\n    }\r\n    ClientMonitoring.log(LogEventType.ROUTE);\r\n\r\n    window.addEventListener('beforeunload', ClientMonitoring.destroy);\r\n  }, []);\r\n}\r\n\r\nfunction withSmoothScroll(ref: React.MutableRefObject<HTMLElement>) {\r\n  useEffect(() => {\r\n    ref.current.style.scrollBehavior = 'smooth';\r\n    return () => {\r\n      ref.current.style.scrollBehavior = 'initial';\r\n    };\r\n  }, []);\r\n}\r\n\r\nfunction useLoggedInOnly(isLoggedIn: boolean, path: string) {\r\n  const router = useRouter();\r\n\r\n  if (!isLoggedIn && path) {\r\n    if (typeof window !== 'undefined') {\r\n      router.replace(`/auth?next=${encodeURIComponent(path)}`);\r\n    }\r\n  }\r\n}\r\n\r\nfunction useAnonymousOnly(router: NextRouter, isLoggedIn: boolean, nextHref: string) {\r\n  if (isLoggedIn && nextHref) {\r\n    if (typeof window !== 'undefined') {\r\n      router.replace(nextHref);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * If the user is not logged in when this method is called,\r\n * let's show the Login/Register modal and authenticate/register.\r\n */\r\nfunction withAuthModal(isLoggedIn: boolean, cb: (...any) => any) {\r\n  return (...props) => {\r\n    if (isLoggedIn) {\r\n      cb(...props);\r\n    } else {\r\n      import('~/components/login/Login').then((module) => {\r\n        SweetAlertService.content(\r\n          module.default,\r\n          'Autentifică-te',\r\n          {\r\n            onSuccess(userInfo: UserState['info']) {\r\n              SweetAlertService.closePopup();\r\n              cb(...props, userInfo);\r\n            },\r\n          },\r\n        );\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport {\r\n  useOutsideClick,\r\n  useClipboard,\r\n  withClientMonitoring,\r\n  withSmoothScroll,\r\n  useLoggedInOnly,\r\n  useAnonymousOnly,\r\n  withAuthModal,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}