{"ast":null,"code":"class ZipService {\n  static generate(rootNode) {\n    if (!validateNode(rootNode)) {\n      console.error('[ZipService.validateNode]: \"rootNode\" param does not respect the required format');\n      return;\n    }\n\n    return Promise.all([import('jszip'), import('file-saver')]).then(modules => {\n      let JSZip = modules[0].default;\n      let FileSaver = modules[1].default;\n      let zip = new JSZip();\n      createArhiveFromNode(zip, rootNode);\n      return zip.generateAsync({\n        type: 'blob'\n      }).then(content => FileSaver.saveAs(content, rootNode.name));\n    });\n  }\n\n}\n\nexport default ZipService;\n\nfunction validateNode(node) {\n  if (node.hasOwnProperty('name') && Array.isArray(node.files) && Array.isArray(node.folders)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction createArhiveFromNode(zip, node) {\n  node.files.forEach(file => {\n    zip.file(file.name, file.content);\n  });\n  node.folders.forEach(folderInfo => {\n    let subfolder = zip.folder(folderInfo.name);\n    createArhiveFromNode(subfolder, folderInfo);\n  });\n  return zip;\n}","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/utils/ZipService.ts"],"names":["ZipService","generate","rootNode","validateNode","console","error","Promise","all","then","modules","JSZip","default","FileSaver","zip","createArhiveFromNode","generateAsync","type","content","saveAs","name","node","hasOwnProperty","Array","isArray","files","folders","forEach","file","folderInfo","subfolder","folder"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACf,SAAOC,QAAP,CAAgBC,QAAhB,EAA0B;AACxB,QAAI,CAACC,YAAY,CAACD,QAAD,CAAjB,EAA6B;AAC3BE,MAAAA,OAAO,CAACC,KAAR,CACE,kFADF;AAGA;AACD;;AAED,WAAOC,OAAO,CAACC,GAAR,CAAY,CAAC,OAAO,OAAP,CAAD,EAAkB,OAAO,YAAP,CAAlB,CAAZ,EAAqDC,IAArD,CACJC,OAAD,IAAa;AACX,UAAIC,KAAK,GAAGD,OAAO,CAAC,CAAD,CAAP,CAAWE,OAAvB;AACA,UAAIC,SAAS,GAAGH,OAAO,CAAC,CAAD,CAAP,CAAWE,OAA3B;AAEA,UAAIE,GAAG,GAAG,IAAIH,KAAJ,EAAV;AAEAI,MAAAA,oBAAoB,CAACD,GAAD,EAAMX,QAAN,CAApB;AAEA,aAAOW,GAAG,CACPE,aADI,CACU;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADV,EAEJR,IAFI,CAEES,OAAD,IAAaL,SAAS,CAACM,MAAV,CAAiBD,OAAjB,EAA0Bf,QAAQ,CAACiB,IAAnC,CAFd,CAAP;AAGD,KAZI,CAAP;AAcD;;AAvBc;;AA0BjB,eAAenB,UAAf;;AAEA,SAASG,YAAT,CAAsBiB,IAAtB,EAA4B;AAC1B,MACEA,IAAI,CAACC,cAAL,CAAoB,MAApB,KACGC,KAAK,CAACC,OAAN,CAAcH,IAAI,CAACI,KAAnB,CADH,IAEGF,KAAK,CAACC,OAAN,CAAcH,IAAI,CAACK,OAAnB,CAHL,EAIE;AACA,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED,SAASX,oBAAT,CAA8BD,GAA9B,EAAmCO,IAAnC,EAAyC;AACvCA,EAAAA,IAAI,CAACI,KAAL,CAAWE,OAAX,CAAoBC,IAAD,IAAU;AAC3Bd,IAAAA,GAAG,CAACc,IAAJ,CAASA,IAAI,CAACR,IAAd,EAAoBQ,IAAI,CAACV,OAAzB;AACD,GAFD;AAIAG,EAAAA,IAAI,CAACK,OAAL,CAAaC,OAAb,CAAsBE,UAAD,IAAgB;AACnC,QAAIC,SAAS,GAAGhB,GAAG,CAACiB,MAAJ,CAAWF,UAAU,CAACT,IAAtB,CAAhB;AACAL,IAAAA,oBAAoB,CAACe,SAAD,EAAYD,UAAZ,CAApB;AACD,GAHD;AAKA,SAAOf,GAAP;AACD","sourcesContent":["class ZipService {\r\n  static generate(rootNode) {\r\n    if (!validateNode(rootNode)) {\r\n      console.error(\r\n        '[ZipService.validateNode]: \"rootNode\" param does not respect the required format',\r\n      );\r\n      return;\r\n    }\r\n\r\n    return Promise.all([import('jszip'), import('file-saver')]).then(\r\n      (modules) => {\r\n        let JSZip = modules[0].default;\r\n        let FileSaver = modules[1].default;\r\n\r\n        let zip = new JSZip();\r\n\r\n        createArhiveFromNode(zip, rootNode);\r\n\r\n        return zip\r\n          .generateAsync({ type: 'blob' })\r\n          .then((content) => FileSaver.saveAs(content, rootNode.name));\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZipService;\r\n\r\nfunction validateNode(node) {\r\n  if (\r\n    node.hasOwnProperty('name')\r\n    && Array.isArray(node.files)\r\n    && Array.isArray(node.folders)\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction createArhiveFromNode(zip, node) {\r\n  node.files.forEach((file) => {\r\n    zip.file(file.name, file.content);\r\n  });\r\n\r\n  node.folders.forEach((folderInfo) => {\r\n    let subfolder = zip.folder(folderInfo.name);\r\n    createArhiveFromNode(subfolder, folderInfo);\r\n  });\r\n\r\n  return zip;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}