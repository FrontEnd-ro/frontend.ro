{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\didi\\\\Desktop\\\\frontend.ro\\\\client\\\\components\\\\Button\\\\Button.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nconst Button = /*#__PURE__*/React.forwardRef((_ref, forwardRef) => {\n  let {\n    children,\n    loading = false,\n    className,\n    disabled,\n    variant = 'transparent'\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"loading\", \"className\", \"disabled\", \"variant\"]);\n\n  let updatedClassName = className || '';\n\n  if (loading) {\n    updatedClassName += ' btn--loading';\n  }\n\n  return __jsx(\"button\", _extends({\n    // eslint-disable-next-line react/button-has-type\n    type: props.type || 'button',\n    className: `btn ${variant === `${variant}` ? `btn--${variant}` : 'btn--transparent'} ${updatedClassName}`,\n    disabled: loading || disabled,\n    ref: forwardRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), children);\n});\nexport default Button;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/components/Button/Button.tsx"],"names":["React","Button","forwardRef","children","loading","className","disabled","variant","props","updatedClassName","type"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAyD,OAAzD;AAoBA,MAAMC,MAAM,gBAAGD,KAAK,CAACE,UAAN,CAIb,OASEA,UATF,KAUK;AAAA,MATH;AACEC,IAAAA,QADF;AAEEC,IAAAA,OAAO,GAAG,KAFZ;AAGEC,IAAAA,SAHF;AAIEC,IAAAA,QAJF;AAKEC,IAAAA,OAAO,GAAG;AALZ,GASG;AAAA,MAHEC,KAGF;;AACH,MAAIC,gBAAgB,GAAGJ,SAAS,IAAI,EAApC;;AACA,MAAID,OAAJ,EAAa;AACXK,IAAAA,gBAAgB,IAAI,eAApB;AACD;;AAED,SACE;AACE;AACA,IAAA,IAAI,EAAED,KAAK,CAACE,IAAN,IAAc,QAFtB;AAGE,IAAA,SAAS,EAAG,OACVH,OAAO,KAAM,GAAEA,OAAQ,EAAvB,GAA4B,QAAOA,OAAQ,EAA3C,GAA+C,kBAChD,IAAGE,gBAAiB,EALvB;AAME,IAAA,QAAQ,EAAEL,OAAO,IAAIE,QANvB;AAOE,IAAA,GAAG,EAAEJ;AAPP,KAQMM,KARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUGL,QAVH,CADF;AAcD,CAlCY,CAAf;AAoCA,eAAeF,MAAf","sourcesContent":["import React, { HTMLAttributes, PropsWithChildren } from 'react';\r\n\r\ninterface Props {\r\n  loading?: boolean;\r\n  variant?:\r\n    | 'light'\r\n    | 'blue'\r\n    | 'success'\r\n    | 'danger'\r\n    | 'transparent'\r\n    | 'yellow'\r\n    | 'grey'\r\n    | 'bouncy'\r\n    | 'with--icon'\r\n    | 'outline';\r\n  // We define here the form property because\r\n  // even if it's a valid attribute on buttons, React or TS complain about it.\r\n  form?: string;\r\n}\r\nexport type Ref = HTMLButtonElement;\r\nconst Button = React.forwardRef<\r\n  Ref,\r\n  PropsWithChildren<Props> & React.ButtonHTMLAttributes<HTMLButtonElement>\r\n>(\r\n  (\r\n    {\r\n      children,\r\n      loading = false,\r\n      className,\r\n      disabled,\r\n      variant = 'transparent',\r\n      ...props\r\n    }: PropsWithChildren<Props> & React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    forwardRef,\r\n  ) => {\r\n    let updatedClassName = className || '';\r\n    if (loading) {\r\n      updatedClassName += ' btn--loading';\r\n    }\r\n\r\n    return (\r\n      <button\r\n        // eslint-disable-next-line react/button-has-type\r\n        type={props.type || 'button'}\r\n        className={`btn ${\r\n          variant === `${variant}` ? `btn--${variant}` : 'btn--transparent'\r\n        } ${updatedClassName}`}\r\n        disabled={loading || disabled}\r\n        ref={forwardRef}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </button>\r\n    );\r\n  },\r\n);\r\nexport default Button;\r\n"]},"metadata":{},"sourceType":"module"}