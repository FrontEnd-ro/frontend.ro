{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"C:/Users/didi/Desktop/frontend.ro/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar LogRocketService = /*#__PURE__*/function () {\n  function LogRocketService() {\n    _classCallCheck(this, LogRocketService);\n  }\n\n  _createClass(LogRocketService, null, [{\n    key: \"init\",\n    value: function init() {\n      if (LogRocketService.instance) {\n        console.info(\"[LogRocketService] Return early from 'init' because it was previously initialized.\");\n        return Promise.resolve();\n      }\n\n      return import('logrocket').then(function (module) {\n        LogRocketService.instance = module[\"default\"];\n        LogRocketService.instance.init('ijivpy/frontendro', {\n          dom: {\n            textSanitizer: true\n          }\n        });\n      })[\"catch\"](function (err) {\n        console.error('[LogRocket]', err);\n      });\n    }\n  }, {\n    key: \"identify\",\n    value: function () {\n      var _identify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (LogRocketService.instance) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return LogRocketService.init();\n\n              case 3:\n                LogRocketService.identityData = data;\n                LogRocketService.instance.identify(data.username, {\n                  email: data.email,\n                  username: data.username,\n                  name: data.name || 'Unknnown name'\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function identify(_x) {\n        return _identify.apply(this, arguments);\n      }\n\n      return identify;\n    }()\n  }, {\n    key: \"anonymize\",\n    value: function () {\n      var _anonymize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (LogRocketService.instance) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                _context2.next = 3;\n                return LogRocketService.init();\n\n              case 3:\n                LogRocketService.identityData = null;\n                LogRocketService.instance.identify(null);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function anonymize() {\n        return _anonymize.apply(this, arguments);\n      }\n\n      return anonymize;\n    }()\n  }, {\n    key: \"getIdentityData\",\n    value: function getIdentityData() {\n      return LogRocketService.identityData;\n    }\n  }]);\n\n  return LogRocketService;\n}();\n\n_defineProperty(LogRocketService, \"instance\", null);\n\n_defineProperty(LogRocketService, \"identityData\", void 0);\n\nexport default LogRocketService;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/utils/LogRocket.service.ts"],"names":["LogRocketService","instance","console","info","Promise","resolve","then","module","init","dom","textSanitizer","err","error","data","identityData","identify","username","email","name"],"mappings":";;;;;;IAKMA,gB;;;;;;;2BAKU;AACZ,UAAIA,gBAAgB,CAACC,QAArB,EAA+B;AAC7BC,QAAAA,OAAO,CAACC,IAAR,CACE,oFADF;AAGA,eAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AAED,aAAO,OAAO,WAAP,EACJC,IADI,CACC,UAACC,MAAD,EAAY;AAChBP,QAAAA,gBAAgB,CAACC,QAAjB,GAA4BM,MAAM,WAAlC;AAEAP,QAAAA,gBAAgB,CAACC,QAAjB,CAA0BO,IAA1B,CAA+B,mBAA/B,EAAoD;AAClDC,UAAAA,GAAG,EAAE;AACHC,YAAAA,aAAa,EAAE;AADZ;AAD6C,SAApD;AAKD,OATI,WAUE,UAACC,GAAD,EAAS;AACdT,QAAAA,OAAO,CAACU,KAAR,CAAc,aAAd,EAA6BD,GAA7B;AACD,OAZI,CAAP;AAaD;;;;gGAEqBE,I;;;;;oBACfb,gBAAgB,CAACC,Q;;;;;;uBACdD,gBAAgB,CAACQ,IAAjB,E;;;AAGRR,gBAAAA,gBAAgB,CAACc,YAAjB,GAAgCD,IAAhC;AACAb,gBAAAA,gBAAgB,CAACC,QAAjB,CAA0Bc,QAA1B,CAAmCF,IAAI,CAACG,QAAxC,EAAkD;AAChDC,kBAAAA,KAAK,EAAEJ,IAAI,CAACI,KADoC;AAEhDD,kBAAAA,QAAQ,EAAEH,IAAI,CAACG,QAFiC;AAGhDE,kBAAAA,IAAI,EAAEL,IAAI,CAACK,IAAL,IAAa;AAH6B,iBAAlD;;;;;;;;;;;;;;;;;;;;;;;;oBAQKlB,gBAAgB,CAACC,Q;;;;;;uBACdD,gBAAgB,CAACQ,IAAjB,E;;;AAGRR,gBAAAA,gBAAgB,CAACc,YAAjB,GAAgC,IAAhC;AACAd,gBAAAA,gBAAgB,CAACC,QAAjB,CAA0Bc,QAA1B,CAAmC,IAAnC;;;;;;;;;;;;;;;;;;sCAGuB;AACvB,aAAOf,gBAAgB,CAACc,YAAxB;AACD;;;;;;gBApDGd,gB,cACsB,I;;gBADtBA,gB;;AAuDN,eAAeA,gBAAf","sourcesContent":["interface IdentityData {\r\n  name: string;\r\n  username: string;\r\n  email: string;\r\n}\r\nclass LogRocketService {\r\n  private static instance = null;\r\n\r\n  private static identityData: IdentityData;\r\n\r\n  static init() {\r\n    if (LogRocketService.instance) {\r\n      console.info(\r\n        \"[LogRocketService] Return early from 'init' because it was previously initialized.\",\r\n      );\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return import('logrocket')\r\n      .then((module) => {\r\n        LogRocketService.instance = module.default;\r\n\r\n        LogRocketService.instance.init('ijivpy/frontendro', {\r\n          dom: {\r\n            textSanitizer: true,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error('[LogRocket]', err);\r\n      });\r\n  }\r\n\r\n  static async identify(data: IdentityData) {\r\n    if (!LogRocketService.instance) {\r\n      await LogRocketService.init();\r\n    }\r\n\r\n    LogRocketService.identityData = data;\r\n    LogRocketService.instance.identify(data.username, {\r\n      email: data.email,\r\n      username: data.username,\r\n      name: data.name || 'Unknnown name',\r\n    });\r\n  }\r\n\r\n  static async anonymize() {\r\n    if (!LogRocketService.instance) {\r\n      await LogRocketService.init();\r\n    }\r\n\r\n    LogRocketService.identityData = null;\r\n    LogRocketService.instance.identify(null);\r\n  }\r\n\r\n  static getIdentityData() {\r\n    return LogRocketService.identityData;\r\n  }\r\n}\r\n\r\nexport default LogRocketService;\r\n"]},"metadata":{},"sourceType":"module"}