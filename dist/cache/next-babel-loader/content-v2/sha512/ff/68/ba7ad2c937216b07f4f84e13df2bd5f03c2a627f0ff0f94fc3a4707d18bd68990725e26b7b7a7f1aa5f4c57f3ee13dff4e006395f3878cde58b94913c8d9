{"ast":null,"code":"import { uuid } from '~/services/Utils';\nimport HttpService from './Http.service';\nconst MOCK_NOTIFICATIONS = [{\n  _id: uuid(),\n  username: 'Diana123',\n  name: 'Diana',\n  avatar: 'https://www.gravatar.com/avatar/9d4d790eb85e56d6524faed8a883d6cb?s=500&d=404',\n  message: 'added a new exercise',\n  timestamp: Date.now(),\n  isUnread: true,\n  url: ''\n}, {\n  _id: uuid(),\n  username: 'AlexPava',\n  name: 'Alex',\n  avatar: 'https://joeschmoe.io/api/v1/josh',\n  message: 'sent you a message',\n  timestamp: Date.now(),\n  isUnread: true,\n  url: ''\n}, {\n  _id: uuid(),\n  username: 'Andrei82',\n  name: 'Andrei',\n  avatar: 'https://joeschmoe.io/api/v1/jon',\n  message: 'added a new exercise',\n  timestamp: Date.now(),\n  isUnread: true,\n  url: ''\n}, {\n  _id: uuid(),\n  username: 'AntoniaBebe',\n  name: 'Antonia',\n  avatar: 'https://joeschmoe.io/api/v1/jess',\n  message: 'sent you a message',\n  timestamp: Date.now(),\n  isUnread: true,\n  url: ''\n}, {\n  _id: uuid(),\n  username: 'Raluca99',\n  name: 'Raluca',\n  avatar: 'https://joeschmoe.io/api/v1/jane',\n  message: 'added a new topic',\n  timestamp: Date.now(),\n  isUnread: true,\n  url: ''\n}];\nconst LOAD_DURATION = 1000;\n\nclass UserService {\n  static ping() {\n    return HttpService.get(`${process.env.ENDPOINT}/auth/ping`).then(resp => resp.json());\n  }\n\n  static subscribe({\n    name,\n    email\n  }) {\n    return HttpService.post(`${process.env.ENDPOINT}/auth/subscribe`, {\n      name,\n      email\n    }).then(resp => resp.json());\n  }\n\n  static login({\n    emailOrUsername,\n    password\n  }) {\n    return HttpService.post(`${process.env.ENDPOINT}/auth/login`, {\n      emailOrUsername,\n      password\n    }).then(resp => resp.json());\n  }\n\n  static logout() {\n    return HttpService.post(`${process.env.ENDPOINT}/auth/logout`);\n  }\n\n  static checkUsername(username) {\n    return HttpService.get(`${process.env.ENDPOINT}/auth/check-username/${username}`);\n  }\n\n  static register({\n    email,\n    username,\n    password\n  }) {\n    return HttpService.post(`${process.env.ENDPOINT}/auth/register`, {\n      email,\n      username,\n      password\n    }).then(resp => resp.json());\n  }\n\n  static updateName(payload) {\n    return HttpService.post(`${process.env.ENDPOINT}/auth/name`, payload).then(resp => resp.json());\n  }\n\n  static updateUsername(payload) {\n    return HttpService.post(`${process.env.ENDPOINT}/auth/username`, payload).then(resp => resp.json());\n  }\n\n  static updateEmail(payload) {\n    return HttpService.post(`${process.env.ENDPOINT}/auth/email`, payload).then(resp => resp.json());\n  }\n\n  static updatePassword(payload) {\n    return HttpService.post(`${process.env.ENDPOINT}/auth/password`, payload).then(resp => resp.json());\n  }\n\n  static delete(password) {\n    return HttpService.delete(`${process.env.ENDPOINT}/auth`, {\n      password\n    });\n  }\n\n  static wait(mili) {\n    return new Promise(resolve => setTimeout(resolve, mili));\n  }\n\n  static async getNotifications(page = 0) {\n    await UserService.wait(LOAD_DURATION);\n    return MOCK_NOTIFICATIONS;\n  }\n\n  static async markAsRead(id) {\n    await UserService.wait(LOAD_DURATION);\n  }\n\n  static async markAllAsRead() {\n    await UserService.wait(LOAD_DURATION);\n  }\n\n}\n\nexport default UserService;","map":{"version":3,"sources":["C:/Users/didi/Desktop/frontend.ro/client/services/User.service.ts"],"names":["uuid","HttpService","MOCK_NOTIFICATIONS","_id","username","name","avatar","message","timestamp","Date","now","isUnread","url","LOAD_DURATION","UserService","ping","get","process","env","ENDPOINT","then","resp","json","subscribe","email","post","login","emailOrUsername","password","logout","checkUsername","register","updateName","payload","updateUsername","updateEmail","updatePassword","delete","wait","mili","Promise","resolve","setTimeout","getNotifications","page","markAsRead","id","markAllAsRead"],"mappings":"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","sourcesContent":["import { uuid } from '~/services/Utils';\r\nimport { Notification } from '../redux/user/types';\r\nimport HttpService from './Http.service';\r\n\r\nconst MOCK_NOTIFICATIONS: Notification[] = [\r\n  {\r\n    _id: uuid(),\r\n    username: 'Diana123',\r\n    name: 'Diana',\r\n    avatar:\r\n      'https://www.gravatar.com/avatar/9d4d790eb85e56d6524faed8a883d6cb?s=500&d=404',\r\n    message: 'added a new exercise',\r\n    timestamp: Date.now(),\r\n    isUnread: true,\r\n    url: '',\r\n  },\r\n  {\r\n    _id: uuid(),\r\n    username: 'AlexPava',\r\n    name: 'Alex',\r\n    avatar: 'https://joeschmoe.io/api/v1/josh',\r\n    message: 'sent you a message',\r\n    timestamp: Date.now(),\r\n    isUnread: true,\r\n    url: '',\r\n  },\r\n  {\r\n    _id: uuid(),\r\n    username: 'Andrei82',\r\n    name: 'Andrei',\r\n    avatar: 'https://joeschmoe.io/api/v1/jon',\r\n    message: 'added a new exercise',\r\n    timestamp: Date.now(),\r\n    isUnread: true,\r\n    url: '',\r\n  },\r\n  {\r\n    _id: uuid(),\r\n    username: 'AntoniaBebe',\r\n    name: 'Antonia',\r\n    avatar: 'https://joeschmoe.io/api/v1/jess',\r\n    message: 'sent you a message',\r\n    timestamp: Date.now(),\r\n    isUnread: true,\r\n    url: '',\r\n  },\r\n  {\r\n    _id: uuid(),\r\n    username: 'Raluca99',\r\n    name: 'Raluca',\r\n    avatar: 'https://joeschmoe.io/api/v1/jane',\r\n    message: 'added a new topic',\r\n    timestamp: Date.now(),\r\n    isUnread: true,\r\n    url: '',\r\n  },\r\n];\r\n\r\nconst LOAD_DURATION = 1000;\r\n\r\nclass UserService {\r\n  static ping() {\r\n    return HttpService.get(`${process.env.ENDPOINT}/auth/ping`).then((resp) => resp.json());\r\n  }\r\n\r\n  static subscribe({ name, email }) {\r\n    return HttpService.post(`${process.env.ENDPOINT}/auth/subscribe`, {\r\n      name,\r\n      email,\r\n    }).then((resp) => resp.json());\r\n  }\r\n\r\n  static login({\r\n    emailOrUsername,\r\n    password,\r\n  }: {\r\n    emailOrUsername: string;\r\n    password: string;\r\n  }) {\r\n    return HttpService.post(`${process.env.ENDPOINT}/auth/login`, {\r\n      emailOrUsername,\r\n      password,\r\n    }).then((resp) => resp.json());\r\n  }\r\n\r\n  static logout() {\r\n    return HttpService.post(`${process.env.ENDPOINT}/auth/logout`);\r\n  }\r\n\r\n  static checkUsername(username: string) {\r\n    return HttpService.get(\r\n      `${process.env.ENDPOINT}/auth/check-username/${username}`,\r\n    );\r\n  }\r\n\r\n  static register({\r\n    email,\r\n    username,\r\n    password,\r\n  }: {\r\n    email: string;\r\n    username: string;\r\n    password: string;\r\n  }) {\r\n    return HttpService.post(`${process.env.ENDPOINT}/auth/register`, {\r\n      email,\r\n      username,\r\n      password,\r\n    }).then((resp) => resp.json());\r\n  }\r\n\r\n  static updateName(payload: {name: string, password: string}) {\r\n    return HttpService\r\n      .post(`${process.env.ENDPOINT}/auth/name`, payload)\r\n      .then((resp) => resp.json());\r\n  }\r\n\r\n  static updateUsername(payload: {username: string, password: string}) {\r\n    return HttpService\r\n      .post(`${process.env.ENDPOINT}/auth/username`, payload)\r\n      .then((resp) => resp.json());\r\n  }\r\n\r\n  static updateEmail(payload: {email: string, password: string}) {\r\n    return HttpService\r\n      .post(`${process.env.ENDPOINT}/auth/email`, payload)\r\n      .then((resp) => resp.json());\r\n  }\r\n\r\n  static updatePassword(payload: {newPassword: string, password: string}) {\r\n    return HttpService\r\n      .post(`${process.env.ENDPOINT}/auth/password`, payload)\r\n      .then((resp) => resp.json());\r\n  }\r\n\r\n  static delete(password: string) {\r\n    return HttpService\r\n      .delete(`${process.env.ENDPOINT}/auth`, { password });\r\n  }\r\n\r\n  static wait(mili) {\r\n    return new Promise((resolve) => setTimeout(resolve, mili));\r\n  }\r\n\r\n  static async getNotifications(page = 0) {\r\n    await UserService.wait(LOAD_DURATION);\r\n    return MOCK_NOTIFICATIONS;\r\n  }\r\n\r\n  static async markAsRead(id) {\r\n    await UserService.wait(LOAD_DURATION);\r\n  }\r\n\r\n  static async markAllAsRead() {\r\n    await UserService.wait(LOAD_DURATION);\r\n  }\r\n}\r\n\r\nexport default UserService;\r\n"]},"metadata":{},"sourceType":"module"}