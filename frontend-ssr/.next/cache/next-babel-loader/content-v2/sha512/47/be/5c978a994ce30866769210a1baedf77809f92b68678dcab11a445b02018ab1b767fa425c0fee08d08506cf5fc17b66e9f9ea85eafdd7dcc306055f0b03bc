{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { USER_INFO, USER_NOTIFICATIONS } from './user.actions';\nexport const defaultUserState = {\n  info: undefined,\n  notifications: {\n    list: undefined,\n    unread: 0,\n    unreadCount: 0,\n    page: 0,\n    end: false\n  }\n};\nconst initialState = defaultUserState;\nexport const userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_INFO.LOAD:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          info: action.payload\n        });\n      }\n\n    case USER_NOTIFICATIONS.ADD:\n      {\n        let {\n          index,\n          notifications\n        } = action.payload;\n\n        if (!Array.isArray(notifications)) {\n          notifications = [notifications];\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notifications: _objectSpread(_objectSpread({}, state.notifications), {}, {\n            list: [...state.notifications.list.slice(0, index), ...notifications, ...state.notifications.list.slice(index)]\n          })\n        });\n      }\n\n    case USER_NOTIFICATIONS.LOAD:\n      {\n        const {\n          newNotifications\n        } = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notifications: _objectSpread(_objectSpread({}, state.notifications), {}, {\n            list: state.notifications.list ? [...state.notifications.list, ...newNotifications] : newNotifications,\n            page: state.notifications.page + 1,\n            end: newNotifications.length === 0\n          })\n        });\n      }\n\n    case USER_NOTIFICATIONS.MARK_AS_READ:\n      {\n        let {\n          id\n        } = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notifications: _objectSpread(_objectSpread({}, state.notifications), {}, {\n            list: [...state.notifications.list.map(n => {\n              if (n._id === id) {\n                return _objectSpread(_objectSpread({}, n), {}, {\n                  isUnread: false\n                });\n              }\n\n              return n;\n            })],\n            unreadCount: state.notifications.unreadCount - 1\n          })\n        });\n      }\n\n    case USER_NOTIFICATIONS.MARK_AS_UNREAD:\n      {\n        let {\n          id\n        } = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notifications: _objectSpread(_objectSpread({}, state.notifications), {}, {\n            list: [...state.notifications.list.map(n => {\n              if (n._id === id) {\n                return _objectSpread(_objectSpread({}, n), {}, {\n                  isUnread: true\n                });\n              }\n\n              return n;\n            })],\n            unreadCount: state.notifications.unreadCount + 1\n          })\n        });\n      }\n\n    case USER_NOTIFICATIONS.MARK_ALL_AS_READ:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notifications: _objectSpread(_objectSpread({}, state.notifications), {}, {\n            list: state.notifications.list.map(n => _objectSpread(_objectSpread({}, n), {}, {\n              isUnread: false\n            })),\n            unreadCount: 0\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};\nexport default userReducer;","map":{"version":3,"sources":["/Users/nmaties/Projects/personal/frontend.ro/frontend-ssr/redux/user/user.reducer.ts"],"names":["USER_INFO","USER_NOTIFICATIONS","defaultUserState","info","undefined","notifications","list","unread","unreadCount","page","end","initialState","userReducer","state","action","type","LOAD","payload","ADD","index","Array","isArray","slice","newNotifications","length","MARK_AS_READ","id","map","n","_id","isUnread","MARK_AS_UNREAD","MARK_ALL_AS_READ"],"mappings":"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","sourcesContent":["import { UserState } from './types';\nimport { USER_INFO, USER_NOTIFICATIONS } from './user.actions';\n\nexport const defaultUserState = {\n  info: undefined,\n  notifications: {\n    list: undefined, unread: 0, unreadCount: 0, page: 0, end: false,\n  },\n};\n\nconst initialState: UserState = defaultUserState;\n\nexport const userReducer = (state = initialState, action: { type: string; payload: any; })\n  : UserState => {\n  switch (action.type) {\n    case USER_INFO.LOAD: {\n      return {\n        ...state,\n        info: action.payload,\n      };\n    }\n\n    case USER_NOTIFICATIONS.ADD: {\n      let { index, notifications } = action.payload;\n\n      if (!Array.isArray(notifications)) {\n        notifications = [notifications];\n      }\n      return {\n        ...state,\n        notifications: {\n          ...state.notifications,\n          list: [...state.notifications.list.slice(0, index),\n            ...notifications,\n            ...state.notifications.list.slice(index)],\n        },\n      };\n    }\n\n    case USER_NOTIFICATIONS.LOAD: {\n      const { newNotifications } = action.payload;\n\n      return {\n        ...state,\n        notifications: {\n          ...state.notifications,\n          list: state.notifications.list\n            ? [...state.notifications.list, ...newNotifications]\n            : newNotifications,\n          page: state.notifications.page + 1,\n          end: newNotifications.length === 0,\n        },\n      };\n    }\n    case USER_NOTIFICATIONS.MARK_AS_READ: {\n      let { id } = action.payload;\n\n      return {\n        ...state,\n        notifications: {\n          ...state.notifications,\n          list: [...state.notifications.list.map((n) => {\n            if (n._id === id) {\n              return {\n                ...n,\n                isUnread: false,\n              };\n            }\n            return n;\n          })],\n          unreadCount: state.notifications.unreadCount - 1,\n        },\n      };\n    }\n    case USER_NOTIFICATIONS.MARK_AS_UNREAD: {\n      let { id } = action.payload;\n\n      return {\n        ...state,\n        notifications: {\n          ...state.notifications,\n          list: [...state.notifications.list.map((n) => {\n            if (n._id === id) {\n              return {\n                ...n,\n                isUnread: true,\n              };\n            }\n            return n;\n          })],\n          unreadCount: state.notifications.unreadCount + 1,\n        },\n      };\n    }\n    case USER_NOTIFICATIONS.MARK_ALL_AS_READ: {\n      return {\n        ...state,\n        notifications: {\n          ...state.notifications,\n          list: state.notifications.list.map((n) => ({ ...n, isUnread: false })),\n          unreadCount: 0,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}