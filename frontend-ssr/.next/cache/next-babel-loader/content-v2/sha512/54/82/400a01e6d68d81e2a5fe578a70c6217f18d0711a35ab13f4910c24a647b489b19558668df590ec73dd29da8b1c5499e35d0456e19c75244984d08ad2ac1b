{"ast":null,"code":"import { uuid } from '~/services/Utils';\nimport HttpService from './Http.service';\nconst MOCK_NOTIFICATIONS = [{\n  _id: uuid(),\n  username: 'Diana123',\n  name: 'Diana',\n  avatar: 'https://www.gravatar.com/avatar/9d4d790eb85e56d6524faed8a883d6cb?s=500&d=404',\n  message: 'added a new exercise',\n  timestamp: Date.now(),\n  isUnread: true,\n  url: ''\n}, {\n  _id: uuid(),\n  username: 'AlexPava',\n  name: 'Alex',\n  avatar: 'https://joeschmoe.io/api/v1/josh',\n  message: 'sent you a message',\n  timestamp: Date.now(),\n  isUnread: true,\n  url: ''\n}, {\n  _id: uuid(),\n  username: 'Andrei82',\n  name: 'Andrei',\n  avatar: 'https://joeschmoe.io/api/v1/jon',\n  message: 'added a new exercise',\n  timestamp: Date.now(),\n  isUnread: true,\n  url: ''\n}, {\n  _id: uuid(),\n  username: 'AntoniaBebe',\n  name: 'Antonia',\n  avatar: 'https://joeschmoe.io/api/v1/jess',\n  message: 'sent you a message',\n  timestamp: Date.now(),\n  isUnread: true,\n  url: ''\n}, {\n  _id: uuid(),\n  username: 'Raluca99',\n  name: 'Raluca',\n  avatar: 'https://joeschmoe.io/api/v1/jane',\n  message: 'added a new topic',\n  timestamp: Date.now(),\n  isUnread: true,\n  url: ''\n}];\nconst LOAD_DURATION = 1000;\n\nclass UserService {\n  static ping() {\n    return HttpService.get(`${process.env.ENDPOINT}/users/ping`).then(resp => resp.json());\n  }\n\n  static subscribe({\n    name,\n    email\n  }) {\n    return HttpService.post(`${process.env.ENDPOINT}/users/subscribe`, {\n      name,\n      email\n    }).then(resp => resp.json());\n  }\n\n  static login({\n    emailOrUsername,\n    password\n  }) {\n    return HttpService.post(`${process.env.ENDPOINT}/users/login`, {\n      emailOrUsername,\n      password\n    }).then(resp => resp.json());\n  }\n\n  static checkUsername(username) {\n    return HttpService.get(`${process.env.ENDPOINT}/users/username/${username}`);\n  }\n\n  static register({\n    email,\n    username,\n    password\n  }) {\n    return HttpService.post(`${process.env.ENDPOINT}/users/register`, {\n      email,\n      username,\n      password\n    }).then(resp => resp.json());\n  }\n\n  static wait(mili) {\n    return new Promise(resolve => setTimeout(resolve, mili));\n  }\n\n  static async getNotifications(page = 0) {\n    await UserService.wait(LOAD_DURATION);\n    return MOCK_NOTIFICATIONS;\n  }\n\n  static async markAsRead(id) {\n    await UserService.wait(LOAD_DURATION);\n  }\n\n  static async markAllAsRead() {\n    await UserService.wait(LOAD_DURATION);\n  }\n\n}\n\nexport default UserService;","map":{"version":3,"sources":["/Users/nmaties/Projects/personal/frontend.ro/frontend-ssr/services/User.service.ts"],"names":["uuid","HttpService","MOCK_NOTIFICATIONS","_id","username","name","avatar","message","timestamp","Date","now","isUnread","url","LOAD_DURATION","UserService","ping","get","process","env","ENDPOINT","then","resp","json","subscribe","email","post","login","emailOrUsername","password","checkUsername","register","wait","mili","Promise","resolve","setTimeout","getNotifications","page","markAsRead","id","markAllAsRead"],"mappings":"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","sourcesContent":["import { uuid } from '~/services/Utils';\nimport { Notification } from '../redux/user/types';\nimport HttpService from './Http.service';\n\nconst MOCK_NOTIFICATIONS: Notification[] = [\n  {\n    _id: uuid(),\n    username: 'Diana123',\n    name: 'Diana',\n    avatar:\n      'https://www.gravatar.com/avatar/9d4d790eb85e56d6524faed8a883d6cb?s=500&d=404',\n    message: 'added a new exercise',\n    timestamp: Date.now(),\n    isUnread: true,\n    url: '',\n  },\n  {\n    _id: uuid(),\n    username: 'AlexPava',\n    name: 'Alex',\n    avatar: 'https://joeschmoe.io/api/v1/josh',\n    message: 'sent you a message',\n    timestamp: Date.now(),\n    isUnread: true,\n    url: '',\n  },\n  {\n    _id: uuid(),\n    username: 'Andrei82',\n    name: 'Andrei',\n    avatar: 'https://joeschmoe.io/api/v1/jon',\n    message: 'added a new exercise',\n    timestamp: Date.now(),\n    isUnread: true,\n    url: '',\n  },\n  {\n    _id: uuid(),\n    username: 'AntoniaBebe',\n    name: 'Antonia',\n    avatar: 'https://joeschmoe.io/api/v1/jess',\n    message: 'sent you a message',\n    timestamp: Date.now(),\n    isUnread: true,\n    url: '',\n  },\n  {\n    _id: uuid(),\n    username: 'Raluca99',\n    name: 'Raluca',\n    avatar: 'https://joeschmoe.io/api/v1/jane',\n    message: 'added a new topic',\n    timestamp: Date.now(),\n    isUnread: true,\n    url: '',\n  },\n];\n\nconst LOAD_DURATION = 1000;\n\nclass UserService {\n  static ping() {\n    return HttpService.get(`${process.env.ENDPOINT}/users/ping`).then((resp) => resp.json());\n  }\n\n  static subscribe({ name, email }) {\n    return HttpService\n      .post(`${process.env.ENDPOINT}/users/subscribe`, { name, email })\n      .then((resp) => resp.json());\n  }\n\n  static login({\n    emailOrUsername,\n    password,\n  }: {\n    emailOrUsername: string;\n    password: string;\n  }) {\n    return HttpService.post(`${process.env.ENDPOINT}/users/login`, {\n      emailOrUsername,\n      password,\n    }).then((resp) => resp.json());\n  }\n\n  static checkUsername(username: string) {\n    return HttpService.get(\n      `${process.env.ENDPOINT}/users/username/${username}`,\n    );\n  }\n\n  static register({\n    email,\n    username,\n    password,\n  }: {\n    email: string;\n    username: string;\n    password: string;\n  }) {\n    return HttpService.post(`${process.env.ENDPOINT}/users/register`, {\n      email,\n      username,\n      password,\n    }).then((resp) => resp.json());\n  }\n\n  static wait(mili) {\n    return new Promise((resolve) => setTimeout(resolve, mili));\n  }\n\n  static async getNotifications(page = 0) {\n    await UserService.wait(LOAD_DURATION);\n    return MOCK_NOTIFICATIONS;\n  }\n\n  static async markAsRead(id) {\n    await UserService.wait(LOAD_DURATION);\n  }\n\n  static async markAllAsRead() {\n    await UserService.wait(LOAD_DURATION);\n  }\n}\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}