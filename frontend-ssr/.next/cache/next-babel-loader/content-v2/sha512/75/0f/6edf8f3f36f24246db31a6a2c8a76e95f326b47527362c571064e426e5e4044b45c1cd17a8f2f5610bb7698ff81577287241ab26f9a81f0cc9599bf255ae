{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport ClientMonitoring, { LogEventType } from './ClientMonitoring';\nimport SweetAlertService from './sweet-alert/SweetAlert.service';\nimport { noop } from './Utils';\n\nfunction useOutsideClick(ref, handler) {\n  _s();\n\n  useEffect(function () {\n    var listener = function listener(event) {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return function () {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}\n\n_s(useOutsideClick, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nfunction useClipboard(ref) {\n  _s2();\n\n  var onCopy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n\n  var initClipboard = function initClipboard(ClipboardJS) {\n    var clipboard = new ClipboardJS(ref.current);\n    clipboard.on('success', function (e) {\n      e.clearSelection();\n      SweetAlertService.toast({\n        text: 'Successfully copied to clipboard.'\n      });\n      onCopy();\n    });\n    clipboard.on('error', function () {\n      SweetAlertService.toast({\n        type: 'error',\n        text: \"Seems like your browser doesn't support clipboard copying. You have to copy it manually...\"\n      });\n    });\n  };\n\n  useEffect(function () {\n    import('clipboard').then(function (module) {\n      initClipboard(module[\"default\"]);\n    });\n  }, []);\n}\n\n_s2(useClipboard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nfunction withClientMonitoring() {\n  _s3();\n\n  useEffect(function () {\n    // eslint-disable-next-line no-restricted-globals\n    if (!location.host.includes('frontend.ro')) {\n      return;\n    }\n\n    ClientMonitoring.log(LogEventType.ROUTE);\n    window.addEventListener('beforeunload', ClientMonitoring.destroy);\n  }, []);\n}\n\n_s3(withClientMonitoring, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nfunction withSmoothScroll(ref) {\n  _s4();\n\n  useEffect(function () {\n    ref.current.style.scrollBehavior = 'smooth';\n    return function () {\n      ref.current.style.scrollBehavior = 'initial';\n    };\n  }, []);\n}\n\n_s4(withSmoothScroll, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport { useOutsideClick, useClipboard, withClientMonitoring, withSmoothScroll };","map":{"version":3,"sources":["/Users/nmaties/Projects/personal/frontend.ro/frontend-ssr/services/Hooks.ts"],"names":["useEffect","ClientMonitoring","LogEventType","SweetAlertService","noop","useOutsideClick","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener","useClipboard","onCopy","initClipboard","ClipboardJS","clipboard","on","e","clearSelection","toast","text","type","then","module","withClientMonitoring","location","host","includes","log","ROUTE","window","destroy","withSmoothScroll","style","scrollBehavior"],"mappings":"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","sourcesContent":["import { MutableRefObject, useEffect } from 'react';\nimport ClientMonitoring, { LogEventType } from './ClientMonitoring';\nimport SweetAlertService from './sweet-alert/SweetAlert.service';\nimport { noop } from './Utils';\n\nfunction useOutsideClick(ref: MutableRefObject<HTMLElement>, handler: (e: MouseEvent) => void) {\n  useEffect(() => {\n    const listener = (event) => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}\n\nfunction useClipboard(ref: MutableRefObject<HTMLElement>, onCopy: () => void = noop) {\n  const initClipboard = (ClipboardJS) => {\n    let clipboard = new ClipboardJS(ref.current);\n\n    clipboard.on('success', (e) => {\n      e.clearSelection();\n\n      SweetAlertService.toast({ text: 'Successfully copied to clipboard.' });\n      onCopy();\n    });\n\n    clipboard.on('error', () => {\n      SweetAlertService.toast({ type: 'error', text: \"Seems like your browser doesn't support clipboard copying. You have to copy it manually...\" });\n    });\n  };\n\n  useEffect(() => {\n    import('clipboard').then((module) => {\n      initClipboard(module.default);\n    });\n  }, []);\n}\n\nfunction withClientMonitoring() {\n  useEffect(() => {\n    // eslint-disable-next-line no-restricted-globals\n    if (!location.host.includes('frontend.ro')) {\n      return;\n    }\n    ClientMonitoring.log(LogEventType.ROUTE);\n\n    window.addEventListener('beforeunload', ClientMonitoring.destroy);\n  }, []);\n}\n\nfunction withSmoothScroll(ref: React.MutableRefObject<HTMLElement>) {\n  useEffect(() => {\n    ref.current.style.scrollBehavior = 'smooth';\n    return () => {\n      ref.current.style.scrollBehavior = 'initial';\n    };\n  }, []);\n}\n\nexport {\n  useOutsideClick,\n  useClipboard,\n  withClientMonitoring,\n  withSmoothScroll,\n};\n"]},"metadata":{},"sourceType":"module"}