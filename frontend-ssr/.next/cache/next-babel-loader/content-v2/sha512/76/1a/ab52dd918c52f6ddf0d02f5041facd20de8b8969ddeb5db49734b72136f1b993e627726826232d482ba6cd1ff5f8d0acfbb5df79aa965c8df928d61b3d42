{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = resolveRewrites;\n\nvar _pathMatch = _interopRequireDefault(require(\"./path-match\"));\n\nvar _prepareDestination = _interopRequireDefault(require(\"./prepare-destination\"));\n\nvar _normalizeTrailingSlash = require(\"../../../../client/normalize-trailing-slash\");\n\nvar _normalizeLocalePath = require(\"../../i18n/normalize-locale-path\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst customRouteMatcher = (0, _pathMatch.default)(true);\n\nfunction resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {\n  if (!pages.includes((0, _normalizeLocalePath.normalizeLocalePath)(asPath, locales).pathname)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source);\n      const params = matcher(asPath);\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break;\n        }\n\n        const destRes = (0, _prepareDestination.default)(rewrite.destination, params, query, true);\n        asPath = destRes.parsedDestination.pathname;\n        Object.assign(query, destRes.parsedDestination.query);\n        const fsPathname = (0, _normalizeLocalePath.normalizeLocalePath)((0, _normalizeTrailingSlash.removePathTrailingSlash)(asPath), locales).pathname;\n\n        if (pages.includes(fsPathname)) {\n          asPath = fsPathname; // check if we now match a page as this means we are done\n          // resolving the rewrites\n\n          break;\n        } // check if we match a dynamic-route, if so we break the rewrites chain\n\n\n        const resolvedHref = resolveHref(fsPathname);\n\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          asPath = fsPathname;\n          break;\n        }\n      }\n    }\n  }\n\n  return asPath;\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","pages","matcher","rewrite","params","destRes","asPath","Object","fsPathname","resolvedHref","resolveHref"],"mappings":";;;;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;;;;;AAEA;;AAAA,MAAMA,kBAAkB,GAAG,CAAA,GAAA,UAAA,CAAA,OAAA,EAA3B,IAA2B,CAA3B;;AAEe,SAAA,eAAA,CAAA,MAAA,EAAA,KAAA,EAAA,QAAA,EAAA,KAAA,EAAA,WAAA,EAAA,OAAA,EAOb;AACA,MAAI,CAACC,KAAK,CAALA,QAAAA,CAAe,CAAA,GAAA,oBAAA,CAAA,mBAAA,EAAA,MAAA,EAAA,OAAA,EAApB,QAAKA,CAAL,EAAoE;AAClE,SAAK,MAAL,OAAA,IAAA,QAAA,EAAgC;AAC9B,YAAMC,OAAO,GAAGF,kBAAkB,CAACG,OAAO,CAA1C,MAAkC,CAAlC;AACA,YAAMC,MAAM,GAAGF,OAAO,CAAtB,MAAsB,CAAtB;;AAEA,UAAA,MAAA,EAAY;AACV,YAAI,CAACC,OAAO,CAAZ,WAAA,EAA0B;AACxB;AACA;AAEF;;AAAA,cAAME,OAAO,GAAG,CAAA,GAAA,mBAAA,CAAA,OAAA,EACdF,OAAO,CADO,WAAA,EAAA,MAAA,EAAA,KAAA,EAAhB,IAAgB,CAAhB;AAMAG,QAAAA,MAAM,GAAGD,OAAO,CAAPA,iBAAAA,CAATC,QAAAA;AACAC,QAAAA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,EAAqBF,OAAO,CAAPA,iBAAAA,CAArBE,KAAAA;AAEA,cAAMC,UAAU,GAAG,CAAA,GAAA,oBAAA,CAAA,mBAAA,EACjB,CAAA,GAAA,uBAAA,CAAA,uBAAA,EADiB,MACjB,CADiB,EAAA,OAAA,EAAnB,QAAA;;AAKA,YAAIP,KAAK,CAALA,QAAAA,CAAJ,UAAIA,CAAJ,EAAgC;AAC9BK,UAAAA,MAAM,GAANA,UAAAA,CAD8B,CAE9B;AACA;;AACA;AAGF,SA1BU,CA0BV;;;AACA,cAAMG,YAAY,GAAGC,WAAW,CAAhC,UAAgC,CAAhC;;AAEA,YAAID,YAAY,KAAZA,MAAAA,IAA2BR,KAAK,CAALA,QAAAA,CAA/B,YAA+BA,CAA/B,EAA6D;AAC3DK,UAAAA,MAAM,GAANA,UAAAA;AACA;AAEH;AACF;AACF;AACD;;AAAA,SAAA,MAAA;AACD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport prepareDestination from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\nimport { normalizeLocalePath } from '../../i18n/normalize-locale-path'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  rewrites: Rewrite[],\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string,\n  locales?: string[]\n) {\n  if (!pages.includes(normalizeLocalePath(asPath, locales).pathname)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source)\n      const params = matcher(asPath)\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break\n        }\n        const destRes = prepareDestination(\n          rewrite.destination,\n          params,\n          query,\n          true\n        )\n        asPath = destRes.parsedDestination.pathname!\n        Object.assign(query, destRes.parsedDestination.query)\n\n        const fsPathname = normalizeLocalePath(\n          removePathTrailingSlash(asPath),\n          locales\n        ).pathname\n\n        if (pages.includes(fsPathname)) {\n          asPath = fsPathname\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          break\n        }\n\n        // check if we match a dynamic-route, if so we break the rewrites chain\n        const resolvedHref = resolveHref(fsPathname)\n\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          asPath = fsPathname\n          break\n        }\n      }\n    }\n  }\n  return asPath\n}\n"]},"metadata":{},"sourceType":"script"}