{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { EXERCISE_SUBMISSIONS } from './exercise-submissions.actions';\nconst initialState = {\n  submissions: undefined,\n  search: '',\n  page: 0,\n  end: false\n};\nexport const submissionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case EXERCISE_SUBMISSIONS.ADD:\n      {\n        let {\n          index,\n          submission\n        } = action.payload;\n\n        if (!Array.isArray(submission)) {\n          submission = [submission];\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          submissions: [...state.submissions.slice(0, index), ...submission, ...state.submissions.slice(index)]\n        });\n      }\n\n    case EXERCISE_SUBMISSIONS.REMOVE:\n      {\n        let {\n          id\n        } = action.payload;\n\n        if (!Array.isArray(id)) {\n          id = [id];\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          submissions: state.submissions.filter(submission => !id.includes(submission._id))\n        });\n      }\n\n    case EXERCISE_SUBMISSIONS.UPDATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        submissions: state.submissions.map(submission => {\n          const {\n            id,\n            newSubmission\n          } = action.payload;\n\n          if (submission._id === id) {\n            return _objectSpread(_objectSpread({}, submission), newSubmission);\n          }\n\n          return submission;\n        })\n      });\n\n    case EXERCISE_SUBMISSIONS.LOAD:\n      {\n        const {\n          newSubmissions\n        } = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          submissions: state.submissions ? [...state.submissions, ...newSubmissions] : newSubmissions,\n          page: state.page + 1,\n          end: newSubmissions.length === 0\n        });\n      }\n\n    case EXERCISE_SUBMISSIONS.SEARCH:\n      {\n        const {\n          query,\n          newSubmissions\n        } = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          submissions: newSubmissions,\n          search: query,\n          page: 1,\n          end: newSubmissions.length === 0\n        });\n      }\n\n    default:\n      return state;\n  }\n};\nexport default submissionReducer;","map":{"version":3,"sources":["/Users/nmaties/Projects/personal/frontend.ro/frontend-ssr/redux/exercise-submissions/exercise-submissions.reducer.ts"],"names":["EXERCISE_SUBMISSIONS","initialState","submissions","undefined","search","page","end","submissionReducer","state","action","type","ADD","index","submission","payload","Array","isArray","slice","REMOVE","id","filter","includes","_id","UPDATE","map","newSubmission","LOAD","newSubmissions","length","SEARCH","query"],"mappings":";;;;;;AACA,SAASA,oBAAT,QAAqC,gCAArC;AAEA,MAAMC,YAA6B,GAAG;AACpCC,EAAAA,WAAW,EAAEC,SADuB;AAEpCC,EAAAA,MAAM,EAAE,EAF4B;AAGpCC,EAAAA,IAAI,EAAE,CAH8B;AAIpCC,EAAAA,GAAG,EAAE;AAJ+B,CAAtC;AAMA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KACZ;AACnB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,oBAAoB,CAACW,GAA1B;AAA+B;AAC7B,YAAI;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAwBJ,MAAM,CAACK,OAAnC;;AACA,YAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,UAAd,CAAL,EAAgC;AAC9BA,UAAAA,UAAU,GAAG,CAACA,UAAD,CAAb;AACD;;AACD,+CACKL,KADL;AAEEN,UAAAA,WAAW,EAAE,CAAC,GAAGM,KAAK,CAACN,WAAN,CAAkBe,KAAlB,CAAwB,CAAxB,EAA2BL,KAA3B,CAAJ,EACX,GAAGC,UADQ,EAEX,GAAGL,KAAK,CAACN,WAAN,CAAkBe,KAAlB,CAAwBL,KAAxB,CAFQ;AAFf;AAMD;;AACD,SAAKZ,oBAAoB,CAACkB,MAA1B;AAAkC;AAChC,YAAI;AAAEC,UAAAA;AAAF,YAASV,MAAM,CAACK,OAApB;;AACA,YAAI,CAACC,KAAK,CAACC,OAAN,CAAcG,EAAd,CAAL,EAAwB;AACtBA,UAAAA,EAAE,GAAG,CAACA,EAAD,CAAL;AACD;;AACD,+CACKX,KADL;AAEEN,UAAAA,WAAW,EAAEM,KAAK,CAACN,WAAN,CAAkBkB,MAAlB,CAA0BP,UAAD,IAAgB,CAACM,EAAE,CAACE,QAAH,CAAYR,UAAU,CAACS,GAAvB,CAA1C;AAFf;AAID;;AACD,SAAKtB,oBAAoB,CAACuB,MAA1B;AACE,6CACKf,KADL;AAEEN,QAAAA,WAAW,EAAEM,KAAK,CAACN,WAAN,CAAkBsB,GAAlB,CAAuBX,UAAD,IAAgB;AACjD,gBAAM;AAAEM,YAAAA,EAAF;AAAMM,YAAAA;AAAN,cAAwBhB,MAAM,CAACK,OAArC;;AACA,cAAID,UAAU,CAACS,GAAX,KAAmBH,EAAvB,EAA2B;AACzB,mDACKN,UADL,GAEKY,aAFL;AAID;;AACD,iBAAOZ,UAAP;AACD,SATY;AAFf;;AAaF,SAAKb,oBAAoB,CAAC0B,IAA1B;AAAgC;AAC9B,cAAM;AAAEC,UAAAA;AAAF,YAAqBlB,MAAM,CAACK,OAAlC;AAEA,+CACKN,KADL;AAEEN,UAAAA,WAAW,EAAEM,KAAK,CAACN,WAAN,GACT,CAAC,GAAGM,KAAK,CAACN,WAAV,EAAuB,GAAGyB,cAA1B,CADS,GAETA,cAJN;AAKEtB,UAAAA,IAAI,EAAEG,KAAK,CAACH,IAAN,GAAa,CALrB;AAMEC,UAAAA,GAAG,EAAEqB,cAAc,CAACC,MAAf,KAA0B;AANjC;AAQD;;AACD,SAAK5B,oBAAoB,CAAC6B,MAA1B;AAAkC;AAChC,cAAM;AAAEC,UAAAA,KAAF;AAASH,UAAAA;AAAT,YAA4BlB,MAAM,CAACK,OAAzC;AAEA,+CACKN,KADL;AAEEN,UAAAA,WAAW,EAAEyB,cAFf;AAGEvB,UAAAA,MAAM,EAAE0B,KAHV;AAIEzB,UAAAA,IAAI,EAAE,CAJR;AAKEC,UAAAA,GAAG,EAAEqB,cAAc,CAACC,MAAf,KAA0B;AALjC;AAOD;;AAED;AACE,aAAOpB,KAAP;AA9DJ;AAgED,CAlEM;AAmEP,eAAeD,iBAAf","sourcesContent":["import { SubmissionState } from './types';\nimport { EXERCISE_SUBMISSIONS } from './exercise-submissions.actions';\n\nconst initialState: SubmissionState = {\n  submissions: undefined,\n  search: '',\n  page: 0,\n  end: false,\n};\nexport const submissionReducer = (state = initialState, action: { type: string; payload: any;})\n: SubmissionState => {\n  switch (action.type) {\n    case EXERCISE_SUBMISSIONS.ADD: {\n      let { index, submission } = action.payload;\n      if (!Array.isArray(submission)) {\n        submission = [submission];\n      }\n      return {\n        ...state,\n        submissions: [...state.submissions.slice(0, index),\n          ...submission,\n          ...state.submissions.slice(index)],\n      };\n    }\n    case EXERCISE_SUBMISSIONS.REMOVE: {\n      let { id } = action.payload;\n      if (!Array.isArray(id)) {\n        id = [id];\n      }\n      return {\n        ...state,\n        submissions: state.submissions.filter((submission) => !id.includes(submission._id)),\n      };\n    }\n    case EXERCISE_SUBMISSIONS.UPDATE:\n      return {\n        ...state,\n        submissions: state.submissions.map((submission) => {\n          const { id, newSubmission } = action.payload;\n          if (submission._id === id) {\n            return {\n              ...submission,\n              ...newSubmission,\n            };\n          }\n          return submission;\n        }),\n      };\n    case EXERCISE_SUBMISSIONS.LOAD: {\n      const { newSubmissions } = action.payload;\n\n      return {\n        ...state,\n        submissions: state.submissions\n          ? [...state.submissions, ...newSubmissions]\n          : newSubmissions,\n        page: state.page + 1,\n        end: newSubmissions.length === 0,\n      };\n    }\n    case EXERCISE_SUBMISSIONS.SEARCH: {\n      const { query, newSubmissions } = action.payload;\n\n      return {\n        ...state,\n        submissions: newSubmissions,\n        search: query,\n        page: 1,\n        end: newSubmissions.length === 0,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\nexport default submissionReducer;\n"]},"metadata":{},"sourceType":"module"}