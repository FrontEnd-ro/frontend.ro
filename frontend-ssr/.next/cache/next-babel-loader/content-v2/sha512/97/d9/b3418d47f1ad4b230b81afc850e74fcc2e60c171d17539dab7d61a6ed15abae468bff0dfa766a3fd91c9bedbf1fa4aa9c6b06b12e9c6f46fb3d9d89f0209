{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/nmaties/Projects/personal/frontend.ro/frontend-ssr/pages/_app.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport { createStoreWithPreloadedData } from '~/redux/store';\nimport { defaultUserState } from '~/redux/user/user.reducer';\nimport '../styles/index.scss';\nexport default function MyApp(_ref) {\n  _s();\n\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  var store = createStoreWithPreloadedData({\n    user: _objectSpread(_objectSpread({}, defaultUserState), {}, {\n      info: pageProps.user\n    })\n  });\n  useEffect(function () {\n    if (false) {\n      var runLogRocket = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var LogRocket;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return import('logrocket');\n\n                case 2:\n                  LogRocket = _context.sent;\n                  LogRocket.init('ijivpy/frontendro');\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function runLogRocket() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      runLogRocket();\n    }\n  }, []);\n  return __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  })));\n}\n/**\n * Fetch user on all pages and add it to store.\n * This way we already have the user when rendering most pages thus the overall\n * render experience should be faster.\n\n * ⚠⚠⚠ WARNING ⚠⚠⚠\n * This function gets called on both SERVER and CLIENT.\n * Unfortunately `getServerSideProps` is not supported\n * for the `App` component so we're stuck with this one.\n *\n * On the client however, we don't want to call the DB methods,\n * so we found a little \"hack\" by checking the `req` parameter.\n */\n\n_s(MyApp, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = MyApp;\n\nMyApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n    var ctx, req, pageProps, isClientSide, _yield$Promise$all, _yield$Promise$all2, databaseImport, userModelImport, connectToDb, UserModel, token, user, sanitizedUser;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            ctx = _ref3.ctx, req = _ref3.req;\n            pageProps = {\n              user: null\n            };\n            isClientSide = !ctx.req;\n\n            if (!isClientSide) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 5:\n            _context2.prev = 5;\n            _context2.next = 8;\n            return Promise.all([import('../server/database'), import('../server/model/user.model')]);\n\n          case 8:\n            _yield$Promise$all = _context2.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            databaseImport = _yield$Promise$all2[0];\n            userModelImport = _yield$Promise$all2[1];\n            connectToDb = databaseImport.connectToDb;\n            UserModel = userModelImport[\"default\"];\n            token = ctx.req.cookies.token;\n\n            if (token) {\n              _context2.next = 17;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 17:\n            connectToDb();\n            _context2.next = 20;\n            return UserModel.ping(token);\n\n          case 20:\n            user = _context2.sent;\n            sanitizedUser = UserModel.sanitize(user);\n            sanitizedUser.lastLogin = sanitizedUser.lastLogin.toString();\n            pageProps.user = sanitizedUser;\n            _context2.next = 29;\n            break;\n\n          case 26:\n            _context2.prev = 26;\n            _context2.t0 = _context2[\"catch\"](5);\n            console.error('[getServerSideProps][pingUser]: ', _context2.t0);\n\n          case 29:\n            return _context2.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 30:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[5, 26]]);\n  }));\n\n  return function (_x) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/nmaties/Projects/personal/frontend.ro/frontend-ssr/pages/_app.tsx"],"names":["React","useEffect","Provider","createStoreWithPreloadedData","defaultUserState","MyApp","Component","pageProps","store","user","info","runLogRocket","LogRocket","init","getInitialProps","ctx","req","isClientSide","Promise","all","databaseImport","userModelImport","connectToDb","UserModel","token","cookies","ping","sanitizedUser","sanitize","lastLogin","toString","console","error"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,4BAAT,QAA6C,eAA7C;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,OAAO,sBAAP;AAEA,eAAe,SAASC,KAAT,OAA8C;AAAA;;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,SAAkB,QAAlBA,SAAkB;AAC3D,MAAMC,KAAK,GAAGL,4BAA4B,CAAC;AACzCM,IAAAA,IAAI,kCACCL,gBADD;AAEFM,MAAAA,IAAI,EAAEH,SAAS,CAACE;AAFd;AADqC,GAAD,CAA1C;AAOAR,EAAAA,SAAS,CAAC,YAAM;AACd,eAA2C;AACzC,UAAMU,YAAY;AAAA,6EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACK,OAAO,WAAP,CADL;;AAAA;AACbC,kBAAAA,SADa;AAEnBA,kBAAAA,SAAS,CAACC,IAAV,CAAe,mBAAf;;AAFmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH;;AAAA,wBAAZF,YAAY;AAAA;AAAA;AAAA,SAAlB;;AAIAA,MAAAA,YAAY;AACb;AACF,GARQ,EAQN,EARM,CAAT;AAUA,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GArCwBF,K;;KAAAA,K;;AAsCxBA,KAAK,CAACS,eAAN;AAAA,uEAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,GAAT,SAASA,GAAT,EAAcC,GAAd,SAAcA,GAAd;AAChBT,YAAAA,SADgB,GACJ;AAChBE,cAAAA,IAAI,EAAE;AADU,aADI;AAKhBQ,YAAAA,YALgB,GAKD,CAACF,GAAG,CAACC,GALJ;;AAAA,iBAOlBC,YAPkB;AAAA;AAAA;AAAA;;AAAA,8CAQb;AAAEV,cAAAA,SAAS,EAATA;AAAF,aARa;;AAAA;AAAA;AAAA;AAAA,mBAY4BW,OAAO,CAACC,GAAR,CAAY,CAC1D,OAAO,oBAAP,CAD0D,EAE1D,OAAO,4BAAP,CAF0D,CAAZ,CAZ5B;;AAAA;AAAA;AAAA;AAYbC,YAAAA,cAZa;AAYGC,YAAAA,eAZH;AAiBZC,YAAAA,WAjBY,GAiBIF,cAjBJ,CAiBZE,WAjBY;AAkBdC,YAAAA,SAlBc,GAkBFF,eAAe,WAlBb;AAmBZG,YAAAA,KAnBY,GAmBFT,GAAG,CAACC,GAAJ,CAAQS,OAnBN,CAmBZD,KAnBY;;AAAA,gBAqBfA,KArBe;AAAA;AAAA;AAAA;;AAAA,8CAsBX;AAAEjB,cAAAA,SAAS,EAATA;AAAF,aAtBW;;AAAA;AAyBpBe,YAAAA,WAAW;AAzBS;AAAA,mBA2BDC,SAAS,CAACG,IAAV,CAAeF,KAAf,CA3BC;;AAAA;AA2Bdf,YAAAA,IA3Bc;AA4BdkB,YAAAA,aA5Bc,GA4BEJ,SAAS,CAACK,QAAV,CAAmBnB,IAAnB,CA5BF;AA8BpBkB,YAAAA,aAAa,CAACE,SAAd,GAA0BF,aAAa,CAACE,SAAd,CAAwBC,QAAxB,EAA1B;AACAvB,YAAAA,SAAS,CAACE,IAAV,GAAiBkB,aAAjB;AA/BoB;AAAA;;AAAA;AAAA;AAAA;AAiCpBI,YAAAA,OAAO,CAACC,KAAR,CAAc,kCAAd;;AAjCoB;AAAA,8CAoCf;AAAEzB,cAAAA,SAAS,EAATA;AAAF,aApCe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport { createStoreWithPreloadedData } from '~/redux/store';\nimport { defaultUserState } from '~/redux/user/user.reducer';\n\nimport '../styles/index.scss';\n\nexport default function MyApp({ Component, pageProps }: any) {\n  const store = createStoreWithPreloadedData({\n    user: {\n      ...defaultUserState,\n      info: pageProps.user,\n    },\n  });\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      const runLogRocket = async () => {\n        const LogRocket = await import('logrocket');\n        LogRocket.init('ijivpy/frontendro');\n      };\n      runLogRocket();\n    }\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <Component {...pageProps} />\n    </Provider>\n  );\n}\n\n/**\n * Fetch user on all pages and add it to store.\n * This way we already have the user when rendering most pages thus the overall\n * render experience should be faster.\n\n * ⚠⚠⚠ WARNING ⚠⚠⚠\n * This function gets called on both SERVER and CLIENT.\n * Unfortunately `getServerSideProps` is not supported\n * for the `App` component so we're stuck with this one.\n *\n * On the client however, we don't want to call the DB methods,\n * so we found a little \"hack\" by checking the `req` parameter.\n */\nMyApp.getInitialProps = async ({ ctx, req }) => {\n  const pageProps = {\n    user: null,\n  };\n\n  const isClientSide = !ctx.req;\n\n  if (isClientSide) {\n    return { pageProps };\n  }\n\n  try {\n    const [databaseImport, userModelImport] = await Promise.all([\n      import('../server/database'),\n      import('../server/model/user.model'),\n    ]);\n\n    const { connectToDb } = databaseImport;\n    const UserModel = userModelImport.default;\n    const { token } = ctx.req.cookies;\n\n    if (!token) {\n      return { pageProps };\n    }\n\n    connectToDb();\n\n    const user = await UserModel.ping(token);\n    const sanitizedUser = UserModel.sanitize(user);\n\n    sanitizedUser.lastLogin = sanitizedUser.lastLogin.toString();\n    pageProps.user = sanitizedUser;\n  } catch (err) {\n    console.error('[getServerSideProps][pingUser]: ', err);\n  }\n\n  return { pageProps };\n};\n"]},"metadata":{},"sourceType":"module"}