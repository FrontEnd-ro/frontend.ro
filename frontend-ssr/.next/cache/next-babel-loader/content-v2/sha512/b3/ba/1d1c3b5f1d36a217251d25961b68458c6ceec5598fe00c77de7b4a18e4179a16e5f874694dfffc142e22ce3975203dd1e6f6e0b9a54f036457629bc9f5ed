{"ast":null,"code":"var _jsxFileName = \"/Users/nmaties/Projects/personal/frontend.ro/frontend-ssr/pages/_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport { createStoreWithPreloadedData } from '~/redux/store';\nimport { defaultUserState } from '~/redux/user/user.reducer';\nimport '../styles/index.scss';\nexport default function MyApp({\n  Component,\n  pageProps\n}) {\n  const store = createStoreWithPreloadedData({\n    user: _objectSpread(_objectSpread({}, defaultUserState), {}, {\n      info: pageProps.user\n    })\n  });\n  useEffect(async () => {\n    if (false) {\n      const LogRocket = await import('logrocket');\n      LogRocket.init('ijivpy/frontendro');\n    }\n  });\n  return __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  })));\n}\n/**\n * Fetch user on all pages and add it to store.\n * This way we already have the user when rendering most pages thus the overall\n * render experience should be faster.\n\n * ⚠⚠⚠ WARNING ⚠⚠⚠\n * This function gets called on both SERVER and CLIENT.\n * Unfortunately `getServerSideProps` is not supported\n * for the `App` component so we're stuck with this one.\n *\n * On the client however, we don't want to call the DB methods,\n * so we found a little \"hack\" by checking the `req` parameter.\n */\n\nMyApp.getInitialProps = async ({\n  ctx,\n  req\n}) => {\n  const pageProps = {\n    user: null\n  };\n  const isClientSide = !ctx.req;\n\n  if (isClientSide) {\n    return {\n      pageProps\n    };\n  }\n\n  try {\n    const [databaseImport, userModelImport] = await Promise.all([import('../server/database'), import('../server/model/user.model')]);\n    const {\n      connectToDb\n    } = databaseImport;\n    const UserModel = userModelImport.default;\n    const {\n      token\n    } = ctx.req.cookies;\n\n    if (!token) {\n      return {\n        pageProps\n      };\n    }\n\n    connectToDb();\n    const user = await UserModel.ping(token);\n    const sanitizedUser = UserModel.sanitize(user);\n    sanitizedUser.lastLogin = sanitizedUser.lastLogin.toString();\n    pageProps.user = sanitizedUser;\n  } catch (err) {\n    console.error('[getServerSideProps][pingUser]: ', err);\n  }\n\n  return {\n    pageProps\n  };\n};","map":{"version":3,"sources":["/Users/nmaties/Projects/personal/frontend.ro/frontend-ssr/pages/_app.tsx"],"names":["React","useEffect","Provider","createStoreWithPreloadedData","defaultUserState","MyApp","Component","pageProps","store","user","info","LogRocket","init","getInitialProps","ctx","req","isClientSide","databaseImport","userModelImport","Promise","all","connectToDb","UserModel","default","token","cookies","ping","sanitizedUser","sanitize","lastLogin","toString","err","console","error"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,4BAAT,QAA6C,eAA7C;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,OAAO,sBAAP;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAA8C;AAC3D,QAAMC,KAAK,GAAGL,4BAA4B,CAAC;AACzCM,IAAAA,IAAI,kCACCL,gBADD;AAEFM,MAAAA,IAAI,EAAEH,SAAS,CAACE;AAFd;AADqC,GAAD,CAA1C;AAOAR,EAAAA,SAAS,CAAC,YAAY;AACpB,eAA2C;AACzC,YAAMU,SAAS,GAAG,MAAM,OAAO,WAAP,CAAxB;AACAA,MAAAA,SAAS,CAACC,IAAV,CAAe,mBAAf;AACD;AACF,GALQ,CAAT;AAOA,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEJ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAF,KAAK,CAACQ,eAAN,GAAwB,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAAwB;AAC9C,QAAMR,SAAS,GAAG;AAChBE,IAAAA,IAAI,EAAE;AADU,GAAlB;AAIA,QAAMO,YAAY,GAAG,CAACF,GAAG,CAACC,GAA1B;;AAEA,MAAIC,YAAJ,EAAkB;AAChB,WAAO;AAAET,MAAAA;AAAF,KAAP;AACD;;AAED,MAAI;AACF,UAAM,CAACU,cAAD,EAAiBC,eAAjB,IAAoC,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC1D,OAAO,oBAAP,CAD0D,EAE1D,OAAO,4BAAP,CAF0D,CAAZ,CAAhD;AAKA,UAAM;AAAEC,MAAAA;AAAF,QAAkBJ,cAAxB;AACA,UAAMK,SAAS,GAAGJ,eAAe,CAACK,OAAlC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYV,GAAG,CAACC,GAAJ,CAAQU,OAA1B;;AAEA,QAAI,CAACD,KAAL,EAAY;AACV,aAAO;AAAEjB,QAAAA;AAAF,OAAP;AACD;;AAEDc,IAAAA,WAAW;AAEX,UAAMZ,IAAI,GAAG,MAAMa,SAAS,CAACI,IAAV,CAAeF,KAAf,CAAnB;AACA,UAAMG,aAAa,GAAGL,SAAS,CAACM,QAAV,CAAmBnB,IAAnB,CAAtB;AAEAkB,IAAAA,aAAa,CAACE,SAAd,GAA0BF,aAAa,CAACE,SAAd,CAAwBC,QAAxB,EAA1B;AACAvB,IAAAA,SAAS,CAACE,IAAV,GAAiBkB,aAAjB;AACD,GArBD,CAqBE,OAAOI,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,kCAAd,EAAkDF,GAAlD;AACD;;AAED,SAAO;AAAExB,IAAAA;AAAF,GAAP;AACD,CArCD","sourcesContent":["import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport { createStoreWithPreloadedData } from '~/redux/store';\nimport { defaultUserState } from '~/redux/user/user.reducer';\n\nimport '../styles/index.scss';\n\nexport default function MyApp({ Component, pageProps }: any) {\n  const store = createStoreWithPreloadedData({\n    user: {\n      ...defaultUserState,\n      info: pageProps.user,\n    },\n  });\n\n  useEffect(async () => {\n    if (process.env.NODE_ENV === 'production') {\n      const LogRocket = await import('logrocket');\n      LogRocket.init('ijivpy/frontendro');\n    }\n  });\n\n  return (\n    <Provider store={store}>\n      <Component {...pageProps} />\n    </Provider>\n  );\n}\n\n/**\n * Fetch user on all pages and add it to store.\n * This way we already have the user when rendering most pages thus the overall\n * render experience should be faster.\n\n * ⚠⚠⚠ WARNING ⚠⚠⚠\n * This function gets called on both SERVER and CLIENT.\n * Unfortunately `getServerSideProps` is not supported\n * for the `App` component so we're stuck with this one.\n *\n * On the client however, we don't want to call the DB methods,\n * so we found a little \"hack\" by checking the `req` parameter.\n */\nMyApp.getInitialProps = async ({ ctx, req }) => {\n  const pageProps = {\n    user: null,\n  };\n\n  const isClientSide = !ctx.req;\n\n  if (isClientSide) {\n    return { pageProps };\n  }\n\n  try {\n    const [databaseImport, userModelImport] = await Promise.all([\n      import('../server/database'),\n      import('../server/model/user.model'),\n    ]);\n\n    const { connectToDb } = databaseImport;\n    const UserModel = userModelImport.default;\n    const { token } = ctx.req.cookies;\n\n    if (!token) {\n      return { pageProps };\n    }\n\n    connectToDb();\n\n    const user = await UserModel.ping(token);\n    const sanitizedUser = UserModel.sanitize(user);\n\n    sanitizedUser.lastLogin = sanitizedUser.lastLogin.toString();\n    pageProps.user = sanitizedUser;\n  } catch (err) {\n    console.error('[getServerSideProps][pingUser]: ', err);\n  }\n\n  return { pageProps };\n};\n"]},"metadata":{},"sourceType":"module"}