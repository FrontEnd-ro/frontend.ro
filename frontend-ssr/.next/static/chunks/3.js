(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[3],{

/***/ "./node_modules/logrocket/dist/build.umd.js":
/*!**************************************************!*\
  !*** ./node_modules/logrocket/dist/build.umd.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse { var i, a; }\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/webpack/buildin/global.js\":\n/*!***********************************!*\\\n  !*** (webpack)/buildin/global.js ***!\n  \\***********************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-console/src/index.js\":\n/*!*********************************************************!*\\\n  !*** ./packages/@apphub:logrocket-console/src/index.js ***!\n  \\*********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _registerConsole = __webpack_require__(/*! ./registerConsole */ \"./packages/@apphub:logrocket-console/src/registerConsole.js\");\n\nvar _registerConsole2 = _interopRequireDefault(_registerConsole);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _registerConsole2.default;\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-console/src/registerConsole.js\":\n/*!*******************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-console/src/registerConsole.js ***!\n  \\*******************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = registerConsole;\n\nvar _enhanceFunc = __webpack_require__(/*! @apphub/logrocket-utils/src/enhanceFunc */ \"./packages/@apphub:logrocket-utils/src/enhanceFunc.js\");\n\nvar _enhanceFunc2 = _interopRequireDefault(_enhanceFunc);\n\nvar _logrocketExceptions = __webpack_require__(/*! @apphub/logrocket-exceptions */ \"./packages/@apphub:logrocket-exceptions/src/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction registerConsole(logger) {\n  var unsubFunctions = [];\n  var methods = ['log', 'warn', 'info', 'error', 'debug'];\n\n  methods.forEach(function (method) {\n    unsubFunctions.push((0, _enhanceFunc2.default)(console, method, function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      logger.addEvent('lr.core.LogEvent', function () {\n        var consoleOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var isEnabled = consoleOptions.isEnabled;\n\n        if ((typeof isEnabled === 'undefined' ? 'undefined' : _typeof(isEnabled)) === 'object' && isEnabled[method] === false || isEnabled === false) {\n          return null;\n        }\n\n        if (method === 'error' && consoleOptions.shouldAggregateConsoleErrors) {\n          _logrocketExceptions.Capture.captureMessage(logger, args[0], {}, true);\n        }\n\n        return {\n          logLevel: method.toUpperCase(),\n          args: args\n        };\n      });\n    }));\n  });\n\n  return function () {\n    unsubFunctions.forEach(function (unsubFunction) {\n      return unsubFunction();\n    });\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-exceptions/src/Capture.js\":\n/*!**************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-exceptions/src/Capture.js ***!\n  \\**************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /* eslint-disable no-param-reassign */\n\n\nexports.captureMessage = captureMessage;\nexports.captureException = captureException;\n\nvar _TraceKit = __webpack_require__(/*! @apphub/logrocket-utils/src/TraceKit */ \"./packages/@apphub:logrocket-utils/src/TraceKit.js\");\n\nvar _TraceKit2 = _interopRequireDefault(_TraceKit);\n\nvar _stackTraceFromError = __webpack_require__(/*! ./stackTraceFromError */ \"./packages/@apphub:logrocket-exceptions/src/stackTraceFromError.js\");\n\nvar _stackTraceFromError2 = _interopRequireDefault(_stackTraceFromError);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isScalar(value) {\n  return (/boolean|number|string/.test(typeof value === 'undefined' ? 'undefined' : _typeof(value))\n  );\n}\n\nfunction scrub(data, options) {\n  if (options) {\n    var optionalScalars = [\n    // Valid values for 'level' are 'fatal', 'error', 'warning', 'info',\n    // and 'debug'. Defaults to 'error'.\n    'level', 'logger'];\n    for (var _iterator = optionalScalars, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var field = _ref;\n\n      var value = options[field];\n\n      if (isScalar(value)) {\n        data[field] = value.toString();\n      }\n    }\n\n    var optionalMaps = ['tags', 'extra'];\n    for (var _iterator2 = optionalMaps, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var _field = _ref2;\n\n      var dirty = options[_field] || {};\n      var scrubbed = {};\n\n      for (var _iterator3 = Object.keys(dirty), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var key = _ref3;\n\n        var _value = dirty[key];\n\n        if (isScalar(_value)) {\n          scrubbed[key.toString()] = _value.toString();\n        }\n      }\n\n      data[_field] = scrubbed;\n    }\n  }\n}\n\nfunction captureMessage(logger, message) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var isConsole = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var data = {\n    exceptionType: isConsole ? 'CONSOLE' : 'MESSAGE',\n    message: message,\n    browserHref: window.location.href\n  };\n\n  scrub(data, options);\n\n  logger.addEvent('lr.core.Exception', function () {\n    return data;\n  });\n}\n\nfunction captureException(logger, exception) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var preppedTrace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var trace = preppedTrace || _TraceKit2.default.computeStackTrace(exception);\n\n  var data = {\n    exceptionType: 'WINDOW',\n    errorType: trace.name,\n    message: trace.message,\n    browserHref: window.location.href\n  };\n\n  scrub(data, options);\n\n  var addEventOptions = {\n    _stackTrace: (0, _stackTraceFromError2.default)(trace)\n  };\n\n  logger.addEvent('lr.core.Exception', function () {\n    return data;\n  }, addEventOptions);\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-exceptions/src/index.js\":\n/*!************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-exceptions/src/index.js ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Capture = exports.registerExceptions = undefined;\n\nvar _registerExceptions = __webpack_require__(/*! ./registerExceptions */ \"./packages/@apphub:logrocket-exceptions/src/registerExceptions.js\");\n\nvar _registerExceptions2 = _interopRequireDefault(_registerExceptions);\n\nvar _Capture = __webpack_require__(/*! ./Capture */ \"./packages/@apphub:logrocket-exceptions/src/Capture.js\");\n\nvar Capture = _interopRequireWildcard(_Capture);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.registerExceptions = _registerExceptions2.default;\nexports.Capture = Capture;\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-exceptions/src/raven/raven.js\":\n/*!******************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-exceptions/src/raven/raven.js ***!\n  \\******************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable */\n\n/*\nSome contents of this file were originaly from raven-js, BSD-2 Clause\n\nCopyright (c) 2018 Sentry (https://sentry.io) and individual contributors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\nvar _TraceKit = __webpack_require__(/*! @apphub/logrocket-utils/src/TraceKit */ \"./packages/@apphub:logrocket-utils/src/TraceKit.js\");\n\nvar _TraceKit2 = _interopRequireDefault(_TraceKit);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar objectPrototype = Object.prototype;\n\nfunction isUndefined(what) {\n  return what === void 0;\n}\n\nfunction isFunction(what) {\n  return typeof what === 'function';\n}\n\nfunction each(obj, callback) {\n  var i, j;\n\n  if (isUndefined(obj.length)) {\n    for (i in obj) {\n      if (hasKey(obj, i)) {\n        callback.call(null, i, obj[i]);\n      }\n    }\n  } else {\n    j = obj.length;\n    if (j) {\n      for (i = 0; i < j; i++) {\n        callback.call(null, i, obj[i]);\n      }\n    }\n  }\n}\n\n/**\n * hasKey, a better form of hasOwnProperty\n * Example: hasKey(MainHostObject, property) === true/false\n *\n * @param {Object} host object to check property\n * @param {string} key to check\n */\nfunction hasKey(object, key) {\n  return objectPrototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Polyfill a method\n * @param obj object e.g. `document`\n * @param name method name present on object e.g. `addEventListener`\n * @param replacement replacement function\n * @param track {optional} record instrumentation to an array\n */\nfunction fill(obj, name, replacement, track) {\n  var orig = obj[name];\n  obj[name] = replacement(orig);\n  if (track) {\n    track.push([obj, name, orig]);\n  }\n}\n\nvar _window = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nvar _document = _window.document;\n\nvar Handler = function () {\n  function Handler(_ref) {\n    var captureException = _ref.captureException;\n\n    _classCallCheck(this, Handler);\n\n    this._errorHandler = this._errorHandler.bind(this);\n\n    this._ignoreOnError = 0;\n    this._wrappedBuiltIns = [];\n    this.captureException = captureException;\n    _TraceKit2.default.report.subscribe(this._errorHandler);\n    this._instrumentTryCatch();\n  }\n\n  _createClass(Handler, [{\n    key: 'uninstall',\n    value: function uninstall() {\n      _TraceKit2.default.report.unsubscribe(this._errorHandler);\n\n      // restore any wrapped builtins\n      var builtin;\n      while (this._wrappedBuiltIns.length) {\n        builtin = this._wrappedBuiltIns.shift();\n\n        var obj = builtin[0],\n            name = builtin[1],\n            orig = builtin[2];\n\n        obj[name] = orig;\n      }\n    }\n  }, {\n    key: '_errorHandler',\n    value: function _errorHandler(report) {\n      if (!this._ignoreOnError) {\n        this.captureException(report);\n      }\n    }\n  }, {\n    key: '_ignoreNextOnError',\n    value: function _ignoreNextOnError() {\n      var _this = this;\n\n      this._ignoreOnError += 1;\n      setTimeout(function () {\n        // onerror should trigger before setTimeout\n        _this._ignoreOnError -= 1;\n      });\n    }\n\n    /*\n     * Wrap code within a context so Handler can capture errors\n     * reliably across domains that is executed immediately.\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The callback to be immediately executed within the context\n     * @param {array} args An array of arguments to be called with the callback [optional]\n     */\n\n  }, {\n    key: 'context',\n    value: function context(options, func, args) {\n      if (isFunction(options)) {\n        args = func || [];\n        func = options;\n        options = undefined;\n      }\n\n      return this.wrap(options, func).apply(this, args);\n    }\n  }, {\n    key: 'wrap',\n\n\n    /*\n     * Wrap code within a context and returns back a new function to be executed\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The function to be wrapped in a new context\n     * @param {function} func A function to call before the try/catch wrapper [optional, private]\n     * @return {function} The newly wrapped functions with a context\n     */\n    value: function wrap(options, func, _before) {\n      var self = this;\n      // 1 argument has been passed, and it's not a function\n      // so just return it\n      if (isUndefined(func) && !isFunction(options)) {\n        return options;\n      }\n\n      // options is optional\n      if (isFunction(options)) {\n        func = options;\n        options = undefined;\n      }\n\n      // At this point, we've passed along 2 arguments, and the second one\n      // is not a function either, so we'll just return the second argument.\n      if (!isFunction(func)) {\n        return func;\n      }\n\n      // We don't wanna wrap it twice!\n      try {\n        if (func.__lr__) {\n          return func;\n        }\n\n        // If this has already been wrapped in the past, return that\n        if (func.__lr_wrapper__) {\n          return func.__lr_wrapper__;\n        }\n\n        // If func is not extensible, return the function as-is to prevent TypeErrors\n        // when trying to add new props & to assure immutable funcs aren't changed\n        if (!Object.isExtensible(func)) {\n          return func;\n        }\n      } catch (e) {\n        // Just accessing custom props in some Selenium environments\n        // can cause a \"Permission denied\" exception (see lr-js#495).\n        // Bail on wrapping and return the function as-is (defers to window.onerror).\n        return func;\n      }\n\n      function wrapped() {\n        var args = [],\n            i = arguments.length,\n            deep = !options || options && options.deep !== false;\n\n        if (_before && isFunction(_before)) {\n          _before.apply(this, arguments);\n        }\n\n        // Recursively wrap all of a function's arguments that are\n        // functions themselves.\n        while (i--) {\n          args[i] = deep ? self.wrap(options, arguments[i]) : arguments[i];\n        }try {\n          // Attempt to invoke user-land function. This is part of the LogRocket SDK.\n          // If you're seeing this frame in a stack trace, it means that LogRocket caught\n          // an unhandled error thrown by your application code, reported it, then bubbled\n          // it up. This is expected behavior and is not a bug with LogRocket.\n          return func.apply(this, args);\n        } catch (e) {\n          self._ignoreNextOnError();\n          self.captureException(_TraceKit2.default.computeStackTrace(e), options);\n          throw e;\n        }\n      }\n\n      // copy over properties of the old function\n      for (var property in func) {\n        if (hasKey(func, property)) {\n          wrapped[property] = func[property];\n        }\n      }\n      wrapped.prototype = func.prototype;\n\n      func.__lr_wrapper__ = wrapped;\n      // Signal that this function has been wrapped already\n      // for both debugging and to prevent it to being wrapped twice\n      wrapped.__lr__ = true;\n      wrapped.__inner__ = func;\n\n      return wrapped;\n    }\n  }, {\n    key: '_instrumentTryCatch',\n\n\n    /**\n     * Install any queued plugins\n     */\n    value: function _instrumentTryCatch() {\n      var self = this;\n\n      var wrappedBuiltIns = self._wrappedBuiltIns;\n\n      function wrapTimeFn(orig) {\n        return function (fn, t) {\n          // preserve arity\n          // Make a copy of the arguments to prevent deoptimization\n          // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n          var args = new Array(arguments.length);\n          for (var i = 0; i < args.length; ++i) {\n            args[i] = arguments[i];\n          }\n          var originalCallback = args[0];\n          if (isFunction(originalCallback)) {\n            args[0] = self.wrap(originalCallback);\n          }\n\n          // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n          // also supports only two arguments and doesn't care what this is, so we\n          // can just call the original function directly.\n          if (orig.apply) {\n            return orig.apply(this, args);\n          } else {\n            return orig(args[0], args[1]);\n          }\n        };\n      }\n\n      function wrapEventTarget(global) {\n        var proto = _window[global] && _window[global].prototype;\n        if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {\n          fill(proto, 'addEventListener', function (orig) {\n            return function (evtName, fn, capture, secure) {\n              // preserve arity\n              try {\n                if (fn && fn.handleEvent) {\n                  fn.handleEvent = self.wrap(fn.handleEvent);\n                }\n              } catch (err) {}\n              // can sometimes get 'Permission denied to access property \"handle Event'\n\n\n              // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`\n              // so that we don't have more than one wrapper function\n              var before;\n\n              return orig.call(this, evtName, self.wrap(fn, undefined, before), capture, secure);\n            };\n          }, wrappedBuiltIns);\n          fill(proto, 'removeEventListener', function (orig) {\n            return function (evt, fn, capture, secure) {\n              try {\n                fn = fn && (fn.__lr_wrapper__ ? fn.__lr_wrapper__ : fn);\n              } catch (e) {\n                // ignore, accessing __lr_wrapper__ will throw in some Selenium environments\n              }\n              return orig.call(this, evt, fn, capture, secure);\n            };\n          }, wrappedBuiltIns);\n        }\n      }\n\n      fill(_window, 'setTimeout', wrapTimeFn, wrappedBuiltIns);\n      fill(_window, 'setInterval', wrapTimeFn, wrappedBuiltIns);\n      if (_window.requestAnimationFrame) {\n        fill(_window, 'requestAnimationFrame', function (orig) {\n          return function (cb) {\n            return orig(self.wrap(cb));\n          };\n        }, wrappedBuiltIns);\n      }\n\n      // event targets borrowed from bugsnag-js:\n      // https://github.com/bugsnag/bugsnag-js/blob/master/src/bugsnag.js#L666\n      var eventTargets = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];\n      for (var i = 0; i < eventTargets.length; i++) {\n        wrapEventTarget(eventTargets[i]);\n      }\n\n      var $ = _window.jQuery || _window.$;\n      if ($ && $.fn && $.fn.ready) {\n        fill($.fn, 'ready', function (orig) {\n          return function (fn) {\n            return orig.call(this, self.wrap(fn));\n          };\n        }, wrappedBuiltIns);\n      }\n    }\n  }]);\n\n  return Handler;\n}();\n\nexports.default = Handler;\n;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-exceptions/src/registerExceptions.js\":\n/*!*************************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-exceptions/src/registerExceptions.js ***!\n  \\*************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = registerCore;\n\nvar _raven = __webpack_require__(/*! ./raven/raven */ \"./packages/@apphub:logrocket-exceptions/src/raven/raven.js\");\n\nvar _raven2 = _interopRequireDefault(_raven);\n\nvar _Capture = __webpack_require__(/*! ./Capture */ \"./packages/@apphub:logrocket-exceptions/src/Capture.js\");\n\nvar Capture = _interopRequireWildcard(_Capture);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction registerCore(logger) {\n  var raven = new _raven2.default({\n    captureException: function captureException(errorReport) {\n      Capture.captureException(logger, null, null, errorReport);\n    }\n  });\n\n  var rejectionHandler = function rejectionHandler(evt) {\n    // http://2ality.com/2016/04/unhandled-rejections.html\n    logger.addEvent('lr.core.Exception', function () {\n      return {\n        exceptionType: 'UNHANDLED_REJECTION',\n        message: evt.reason || 'Unhandled Promise rejection'\n      };\n    });\n  };\n\n  window.addEventListener('unhandledrejection', rejectionHandler);\n\n  return function () {\n    window.removeEventListener('unhandledrejection', rejectionHandler);\n    raven.uninstall();\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-exceptions/src/stackTraceFromError.js\":\n/*!**************************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-exceptions/src/stackTraceFromError.js ***!\n  \\**************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = stackTraceFromError;\nfunction stackTraceFromError(errorReport) {\n  function makeNotNull(val) {\n    return val === null ? undefined : val;\n  }\n\n  return errorReport.stack ? errorReport.stack.map(function (frame) {\n    return {\n      lineNumber: makeNotNull(frame.line),\n      columnNumber: makeNotNull(frame.column),\n      fileName: makeNotNull(frame.url),\n      functionName: makeNotNull(frame.func)\n    };\n  }) : undefined;\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-network/src/fetchIntercept.js\":\n/*!******************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-network/src/fetchIntercept.js ***!\n  \\******************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _registerXHR = __webpack_require__(/*! ./registerXHR */ \"./packages/@apphub:logrocket-network/src/registerXHR.js\");\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar interceptors = [];\n\nfunction makeInterceptor(fetch, fetchId) {\n  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var reversedInterceptors = interceptors.reduce(function (array, interceptor) {\n    return [interceptor].concat(array);\n  }, []);\n  var promise = Promise.resolve(args);\n\n  // Register request interceptors\n  reversedInterceptors.forEach(function (_ref) {\n    var request = _ref.request,\n        requestError = _ref.requestError;\n\n    if (request || requestError) {\n      promise = promise.then(function (args) {\n        return request.apply(undefined, [fetchId].concat(_toConsumableArray(args)));\n      }, function (args) {\n        return requestError.apply(undefined, [fetchId].concat(_toConsumableArray(args)));\n      });\n    }\n  });\n\n  promise = promise.then(function (args) {\n    (0, _registerXHR.setActive)(false);\n\n    var res = void 0;\n    var err = void 0;\n    try {\n      res = fetch.apply(undefined, _toConsumableArray(args));\n    } catch (_err) {\n      err = _err;\n    }\n\n    (0, _registerXHR.setActive)(true);\n\n    if (err) {\n      throw err;\n    }\n    return res;\n  });\n\n  reversedInterceptors.forEach(function (_ref2) {\n    var response = _ref2.response,\n        responseError = _ref2.responseError;\n\n    if (response || responseError) {\n      promise = promise.then(function (res) {\n        return response(fetchId, res);\n      }, function (err) {\n        return responseError && responseError(fetchId, err);\n      });\n    }\n  });\n\n  return promise;\n}\n\nfunction attach(env) {\n  if (!env.fetch || !env.Promise) {\n    // Make sure fetch is available in the given environment. If it's not, then\n    // default to using XHR intercept.\n    return;\n  }\n\n  var isPolyfill = env.fetch.polyfill;\n\n  // eslint-disable-next-line no-param-reassign\n  env.fetch = function (fetch) {\n    var fetchId = 0;\n\n    return function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return makeInterceptor.apply(undefined, [fetch, fetchId++].concat(args));\n    };\n  }(env.fetch);\n\n  // Forward the polyfill properly from fetch (set by github/whatwg-fetch).\n  if (isPolyfill) {\n    // eslint-disable-next-line no-param-reassign\n    env.fetch.polyfill = isPolyfill;\n  }\n}\n\n// TODO: React Native\n//   attach(global);\n\nvar didAttach = false;\n\nexports.default = {\n  register: function register(interceptor) {\n    if (!didAttach) {\n      didAttach = true;\n      attach(window);\n    }\n\n    interceptors.push(interceptor);\n    return function () {\n      var index = interceptors.indexOf(interceptor);\n\n      if (index >= 0) {\n        interceptors.splice(index, 1);\n      }\n    };\n  },\n  clear: function clear() {\n    interceptors = [];\n  }\n};\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-network/src/index.js\":\n/*!*********************************************************!*\\\n  !*** ./packages/@apphub:logrocket-network/src/index.js ***!\n  \\*********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = registerNetwork;\n\nvar _registerFetch = __webpack_require__(/*! ./registerFetch */ \"./packages/@apphub:logrocket-network/src/registerFetch.js\");\n\nvar _registerFetch2 = _interopRequireDefault(_registerFetch);\n\nvar _registerXHR = __webpack_require__(/*! ./registerXHR */ \"./packages/@apphub:logrocket-network/src/registerXHR.js\");\n\nvar _registerXHR2 = _interopRequireDefault(_registerXHR);\n\nvar _mapValues = __webpack_require__(/*! @apphub/logrocket-utils/src/mapValues */ \"./packages/@apphub:logrocket-utils/src/mapValues.js\");\n\nvar _mapValues2 = _interopRequireDefault(_mapValues);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction registerNetwork(logger) {\n  var ignoredNetwork = {};\n\n  // truncate if > 4MB in size\n  var truncate = function truncate(data) {\n    var limit = 1024 * 1000 * 4;\n    var str = data;\n\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && data != null) {\n      var proto = Object.getPrototypeOf(data);\n\n      if (proto === Object.prototype || proto === null) {\n        // plain object - jsonify for the size check\n        str = JSON.stringify(data);\n      }\n    }\n\n    if (str && str.length && str.length > limit && typeof str === 'string') {\n      var beginning = str.substring(0, 1000);\n      return beginning + ' ... LogRocket truncating to first 1000 characters.\\n      Keep data under 4MB to prevent truncation. https://docs.logrocket.com/reference#network';\n    }\n\n    return data;\n  };\n\n  var addRequest = function addRequest(reqId, request) {\n    var method = request.method;\n    logger.addEvent('lr.network.RequestEvent', function () {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$isEnabled = _ref.isEnabled,\n          isEnabled = _ref$isEnabled === undefined ? true : _ref$isEnabled,\n          _ref$requestSanitizer = _ref.requestSanitizer,\n          requestSanitizer = _ref$requestSanitizer === undefined ? function (f) {\n        return f;\n      } : _ref$requestSanitizer;\n\n      if (!isEnabled) {\n        return null;\n      }\n      var sanitized = null;\n      try {\n        // only try catch user defined functions\n        sanitized = requestSanitizer(_extends({}, request, { reqId: reqId }));\n      } catch (err) {\n        console.error(err);\n      }\n      if (sanitized) {\n        // Writing and then reading from an a tag turns a relative\n        // url into an absolute one.\n        var a = document.createElement('a');\n        a.href = sanitized.url;\n\n        return {\n          reqId: reqId, // default\n          url: a.href, // sanitized\n          headers: (0, _mapValues2.default)(sanitized.headers, function (headerValue) {\n            // sanitized\n            return '' + headerValue;\n          }),\n          body: truncate(sanitized.body), // sanitized\n          method: method, // default\n          referrer: sanitized.referrer || undefined, // sanitized\n          mode: sanitized.mode || undefined, // sanitized\n          credentials: sanitized.credentials || undefined // sanitized\n        };\n      }\n      ignoredNetwork[reqId] = true;\n      return null;\n    });\n  };\n\n  var addResponse = function addResponse(reqId, response) {\n    var method = response.method,\n        status = response.status;\n\n    logger.addEvent('lr.network.ResponseEvent', function () {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref2$isEnabled = _ref2.isEnabled,\n          isEnabled = _ref2$isEnabled === undefined ? true : _ref2$isEnabled,\n          _ref2$responseSanitiz = _ref2.responseSanitizer,\n          responseSanitizer = _ref2$responseSanitiz === undefined ? function (f) {\n        return f;\n      } : _ref2$responseSanitiz;\n\n      if (!isEnabled) {\n        return null;\n      } else if (ignoredNetwork[reqId]) {\n        delete ignoredNetwork[reqId];\n        return null;\n      }\n      var sanitized = null;\n\n      try {\n        // only try catch user defined functions\n        sanitized = responseSanitizer(_extends({}, response, { reqId: reqId }));\n      } catch (err) {\n        console.error(err);\n        // fall through to redacted log\n      }\n      if (sanitized) {\n        return {\n          reqId: reqId, // default\n          status: sanitized.status, // sanitized\n          headers: (0, _mapValues2.default)(sanitized.headers, function (headerValue) {\n            // sanitized\n            return '' + headerValue;\n          }),\n          body: truncate(sanitized.body), // sanitized\n          method: method // default\n        };\n      }\n      return {\n        reqId: reqId, // default\n        status: status, // default\n        headers: {}, // redacted\n        body: null, // redacted\n        method: method // default\n      };\n    });\n  };\n\n  var isIgnored = function isIgnored(reqId) {\n    return logger.isDisabled || ignoredNetwork[reqId] === true;\n  };\n\n  var unsubFetch = (0, _registerFetch2.default)({ addRequest: addRequest, addResponse: addResponse, isIgnored: isIgnored });\n  var unsubXHR = (0, _registerXHR2.default)({\n    addRequest: addRequest,\n    addResponse: addResponse,\n    isIgnored: isIgnored,\n    shouldCloneResponse: logger._shouldCloneResponse\n  });\n\n  return function () {\n    unsubFetch();\n    unsubXHR();\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-network/src/registerFetch.js\":\n/*!*****************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-network/src/registerFetch.js ***!\n  \\*****************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = registerFetch;\n\nvar _mapValues = __webpack_require__(/*! @apphub/logrocket-utils/src/mapValues */ \"./packages/@apphub:logrocket-utils/src/mapValues.js\");\n\nvar _mapValues2 = _interopRequireDefault(_mapValues);\n\nvar _fetchIntercept = __webpack_require__(/*! ./fetchIntercept */ \"./packages/@apphub:logrocket-network/src/fetchIntercept.js\");\n\nvar _fetchIntercept2 = _interopRequireDefault(_fetchIntercept);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction makeObjectFromHeaders(headers) {\n  // If using real fetch, we must stringify the Headers object.\n  if (headers == null || typeof headers.forEach !== 'function') {\n    return headers;\n  }\n\n  var result = {};\n  headers.forEach(function (value, key) {\n    if (result[key]) {\n      result[key] = result[key] + ',' + value;\n    } else {\n      result[key] = '' + value;\n    }\n  });\n  return result;\n}\n\n// XHR specification is unclear of what types to allow in value so using toString method for now\nvar stringifyHeaders = function stringifyHeaders(headers) {\n  return (0, _mapValues2.default)(makeObjectFromHeaders(headers), function (value) {\n    return '' + value;\n  });\n};\n\nfunction pluckFetchFields() {\n  var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  return {\n    url: arg.url,\n    headers: stringifyHeaders(arg.headers),\n    method: arg.method && arg.method.toUpperCase(),\n    referrer: arg.referrer || undefined,\n    mode: arg.mode || undefined,\n    credentials: arg.credentials || undefined\n  };\n}\n\nfunction registerFetch(_ref) {\n  var addRequest = _ref.addRequest,\n      addResponse = _ref.addResponse,\n      isIgnored = _ref.isIgnored;\n\n  var LOGROCKET_FETCH_LABEL = 'fetch-';\n  var fetchMethodMap = {};\n\n  var unregister = _fetchIntercept2.default.register({\n    request: function request(fetchId) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var p = void 0;\n\n      if (typeof Request !== 'undefined' && args[0] instanceof Request) {\n        var clonedText = void 0;\n\n        // Request.clone() and Request.text() may throw in Safari (e.g., when\n        // request body contains FormData)\n        try {\n          clonedText = args[0].clone().text();\n        } catch (err) {\n          clonedText = Promise.resolve('LogRocket fetch error: ' + err.message);\n        }\n\n        p = clonedText.then(function (body) {\n          return _extends({}, pluckFetchFields(args[0]), {\n            body: body\n          });\n        }, function (err) {\n          return _extends({}, pluckFetchFields(args[0]), {\n            body: 'LogRocket fetch error: ' + err.message\n          });\n        });\n      } else {\n        p = Promise.resolve(_extends({}, pluckFetchFields(args[1]), {\n          url: '' + args[0],\n          body: (args[1] || {}).body\n        }));\n      }\n\n      return p.then(function (req) {\n        fetchMethodMap[fetchId] = req.method;\n        addRequest('' + LOGROCKET_FETCH_LABEL + fetchId, req);\n        return args;\n      });\n    },\n    requestError: function requestError(fetchId, error) {\n      return Promise.reject(error);\n    },\n    response: function response(fetchId, _response) {\n      var clonedText = void 0;\n\n      if (isIgnored('' + LOGROCKET_FETCH_LABEL + fetchId)) {\n        // Don't even try to read ignored requests\n        return _response;\n      }\n\n      try {\n        // TODO: enhance function on original response and future clones for:\n        // text(), json(), blob(), formdata(), arraybuffer()\n        clonedText = _response.clone().text();\n      } catch (err) {\n        // safari has a bug where cloning can fail\n        clonedText = Promise.resolve('LogRocket fetch error: ' + err.message);\n      }\n\n      return clonedText.then(function (data) {\n        var responseHash = {\n          url: _response.url,\n          status: _response.status,\n          headers: stringifyHeaders(_response.headers),\n          body: data,\n          method: fetchMethodMap[fetchId]\n        };\n        delete fetchMethodMap[fetchId];\n        addResponse('' + LOGROCKET_FETCH_LABEL + fetchId, responseHash);\n        return _response;\n      });\n    },\n    responseError: function responseError(fetchId, error) {\n      var response = {\n        url: undefined,\n        status: 0,\n        headers: {},\n        body: '' + error\n      };\n      addResponse('' + LOGROCKET_FETCH_LABEL + fetchId, response);\n      return Promise.reject(error);\n    }\n  });\n\n  return unregister;\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-network/src/registerXHR.js\":\n/*!***************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-network/src/registerXHR.js ***!\n  \\***************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setActive = setActive;\nexports.default = registerXHR;\n\nvar _mapValues = __webpack_require__(/*! @apphub/logrocket-utils/src/mapValues */ \"./packages/@apphub:logrocket-utils/src/mapValues.js\");\n\nvar _mapValues2 = _interopRequireDefault(_mapValues);\n\nvar _enhanceFunc = __webpack_require__(/*! @apphub/logrocket-utils/src/enhanceFunc */ \"./packages/@apphub:logrocket-utils/src/enhanceFunc.js\");\n\nvar _enhanceFunc2 = _interopRequireDefault(_enhanceFunc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isActive = true;\n\nfunction setActive(shouldBeActive) {\n  isActive = shouldBeActive;\n}\n\nvar currentXHRId = 0;\nfunction registerXHR(_ref) {\n  var addRequest = _ref.addRequest,\n      addResponse = _ref.addResponse,\n      isIgnored = _ref.isIgnored,\n      _ref$shouldCloneRespo = _ref.shouldCloneResponse,\n      shouldCloneResponse = _ref$shouldCloneRespo === undefined ? false : _ref$shouldCloneRespo;\n\n  var _XHR = XMLHttpRequest;\n  var xhrMap = new WeakMap();\n  var unsubscribedFromXhr = false;\n  var LOGROCKET_XHR_LABEL = 'xhr-';\n\n  window._lrXMLHttpRequest = XMLHttpRequest;\n\n  // eslint-disable-next-line no-native-reassign\n  XMLHttpRequest = function XMLHttpRequest(mozAnon, mozSystem) {\n    var xhrObject = new _XHR(mozAnon, mozSystem);\n    if (!isActive) {\n      return xhrObject;\n    }\n\n    xhrMap.set(xhrObject, {\n      xhrId: ++currentXHRId,\n      headers: {}\n    });\n\n    // ..., 'open', (method, url, async, username, password) => {\n    (0, _enhanceFunc2.default)(xhrObject, 'open', function (method, url) {\n      if (unsubscribedFromXhr) return;\n      var currentXHR = xhrMap.get(xhrObject);\n      currentXHR.method = method;\n      currentXHR.url = url;\n    });\n\n    (0, _enhanceFunc2.default)(xhrObject, 'send', function (data) {\n      if (unsubscribedFromXhr) return;\n      var currentXHR = xhrMap.get(xhrObject);\n      if (!currentXHR) return;\n\n      var request = {\n        url: currentXHR.url,\n        method: currentXHR.method && currentXHR.method.toUpperCase(),\n        headers: (0, _mapValues2.default)(currentXHR.headers || {}, function (headerValues) {\n          return headerValues.join(', ');\n        }),\n        body: data\n      };\n      addRequest('' + LOGROCKET_XHR_LABEL + currentXHR.xhrId, request);\n    });\n\n    (0, _enhanceFunc2.default)(xhrObject, 'setRequestHeader', function (header, value) {\n      if (unsubscribedFromXhr) return;\n      var currentXHR = xhrMap.get(xhrObject);\n      if (!currentXHR) return;\n\n      currentXHR.headers = currentXHR.headers || {};\n      currentXHR.headers[header] = currentXHR.headers[header] || [];\n      currentXHR.headers[header].push(value);\n    });\n\n    var xhrListeners = {\n      readystatechange: function readystatechange() {\n        if (unsubscribedFromXhr) return;\n\n        if (xhrObject.readyState === 4) {\n          var currentXHR = xhrMap.get(xhrObject);\n          if (!currentXHR) return;\n\n          // Do not read ignored requests at all.\n          if (isIgnored('' + LOGROCKET_XHR_LABEL + currentXHR.xhrId)) return;\n\n          var headerString = xhrObject.getAllResponseHeaders();\n\n          var headers = headerString.split(/[\\r\\n]+/).reduce(function (previous, current) {\n            var next = previous;\n            var headerParts = current.split(': ');\n            if (headerParts.length > 0) {\n              var key = headerParts.shift(); // first index of the array\n              var value = headerParts.join(': '); // rest of the array repaired\n              if (previous[key]) {\n                next[key] += ', ' + value;\n              } else {\n                next[key] = value;\n              }\n            }\n            return next;\n          }, {});\n\n          var body = void 0;\n\n          // IE 11 sometimes throws when trying to access large responses\n          try {\n            switch (xhrObject.responseType) {\n              case 'json':\n                body = shouldCloneResponse ? JSON.parse(JSON.stringify(xhrObject.response)) : xhrObject.response;\n                break;\n              case 'arraybuffer':\n              case 'blob':\n                {\n                  body = xhrObject.response;\n                  break;\n                }\n              case 'document':\n                {\n                  body = xhrObject.responseXML;\n                  break;\n                }\n              case 'text':\n              case '':\n                {\n                  body = xhrObject.responseText;\n                  break;\n                }\n              default:\n                {\n                  body = '';\n                }\n            }\n          } catch (err) {\n            body = 'LogRocket: Error accessing response.';\n          }\n\n          var response = {\n            url: currentXHR.url,\n            status: xhrObject.status,\n            headers: headers,\n            body: body,\n            method: (currentXHR.method || '').toUpperCase()\n          };\n\n          addResponse('' + LOGROCKET_XHR_LABEL + currentXHR.xhrId, response);\n        }\n      }\n      // // Unused Event Listeners\n      // loadstart: () => {},\n      // progress: () => {},\n      // abort: () => {},\n      // error: () => {},\n      // load: () => {},\n      // timeout: () => {},\n      // loadend: () => {},\n    };\n\n    Object.keys(xhrListeners).forEach(function (key) {\n      xhrObject.addEventListener(key, xhrListeners[key]);\n    });\n\n    return xhrObject;\n  };\n\n  // this allows \"instanceof XMLHttpRequest\" to work\n  XMLHttpRequest.prototype = _XHR.prototype;\n\n  // Persist the static variables.\n  ['UNSENT', 'OPENED', 'HEADERS_RECEIVED', 'LOADING', 'DONE'].forEach(function (variable) {\n    XMLHttpRequest[variable] = _XHR[variable];\n  });\n\n  return function () {\n    unsubscribedFromXhr = true;\n    // eslint-disable-next-line no-native-reassign\n    XMLHttpRequest = _XHR;\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-redux/src/createEnhancer.js\":\n/*!****************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-redux/src/createEnhancer.js ***!\n  \\****************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createEnhancer;\n\nvar _now = __webpack_require__(/*! @apphub/now */ \"./packages/@apphub:now/src/index.js\");\n\nvar _now2 = _interopRequireDefault(_now);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar storeIdCounter = 0;\n\nfunction createEnhancer(logger) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$stateSanitizer = _ref.stateSanitizer,\n      stateSanitizer = _ref$stateSanitizer === undefined ? function (f) {\n    return f;\n  } : _ref$stateSanitizer,\n      _ref$actionSanitizer = _ref.actionSanitizer,\n      actionSanitizer = _ref$actionSanitizer === undefined ? function (f) {\n    return f;\n  } : _ref$actionSanitizer;\n\n  // an enhancer is a function that returns a Store\n  return function (createStore) {\n    return function (reducer, initialState, enhancer) {\n      var store = createStore(reducer, initialState, enhancer);\n      var originalDispatch = store.dispatch;\n      var storeId = storeIdCounter++;\n      logger.addEvent('lr.redux.InitialState', function () {\n        var sanitizedState = void 0;\n        try {\n          // only try catch user defined functions\n          sanitizedState = stateSanitizer(store.getState());\n        } catch (err) {\n          console.error(err.toString());\n        }\n\n        return {\n          state: sanitizedState,\n          storeId: storeId\n        };\n      });\n\n      var dispatch = function dispatch(action) {\n        var start = (0, _now2.default)();\n\n        var err = void 0;\n        var res = void 0;\n        try {\n          res = originalDispatch(action);\n        } catch (_err) {\n          err = _err;\n        } finally {\n          var duration = (0, _now2.default)() - start;\n\n          logger.addEvent('lr.redux.ReduxAction', function () {\n            var sanitizedState = null;\n            var sanitizedAction = null;\n\n            try {\n              // only try catch user defined functions\n              sanitizedState = stateSanitizer(store.getState());\n              sanitizedAction = actionSanitizer(action);\n            } catch (err) {\n              console.error(err.toString());\n            }\n\n            if (sanitizedState && sanitizedAction) {\n              return {\n                storeId: storeId,\n                action: sanitizedAction,\n                duration: duration,\n                stateDelta: sanitizedState\n              };\n            }\n            return null;\n          });\n        }\n\n        if (err) {\n          throw err;\n        }\n\n        return res;\n      };\n\n      return _extends({}, store, {\n        dispatch: dispatch\n      });\n    };\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-redux/src/createMiddleware.js\":\n/*!******************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-redux/src/createMiddleware.js ***!\n  \\******************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createMiddleware;\n\nvar _now = __webpack_require__(/*! @apphub/now */ \"./packages/@apphub:now/src/index.js\");\n\nvar _now2 = _interopRequireDefault(_now);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar storeIdCounter = 0;\n\nfunction createMiddleware(logger) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$stateSanitizer = _ref.stateSanitizer,\n      stateSanitizer = _ref$stateSanitizer === undefined ? function (f) {\n    return f;\n  } : _ref$stateSanitizer,\n      _ref$actionSanitizer = _ref.actionSanitizer,\n      actionSanitizer = _ref$actionSanitizer === undefined ? function (f) {\n    return f;\n  } : _ref$actionSanitizer;\n\n  return function (store) {\n    var storeId = storeIdCounter++;\n    logger.addEvent('lr.redux.InitialState', function () {\n      var sanitizedState = void 0;\n      try {\n        // only try catch user defined functions\n        sanitizedState = stateSanitizer(store.getState());\n      } catch (err) {\n        console.error(err.toString());\n      }\n\n      return {\n        state: sanitizedState,\n        storeId: storeId\n      };\n    });\n\n    return function (next) {\n      return function (action) {\n        var start = (0, _now2.default)();\n\n        var err = void 0;\n        var res = void 0;\n        try {\n          res = next(action);\n        } catch (_err) {\n          err = _err;\n        } finally {\n          var duration = (0, _now2.default)() - start;\n\n          logger.addEvent('lr.redux.ReduxAction', function () {\n            var sanitizedState = null;\n            var sanitizedAction = null;\n\n            try {\n              // only try catch user defined functions\n              sanitizedState = stateSanitizer(store.getState());\n              sanitizedAction = actionSanitizer(action);\n            } catch (err) {\n              console.error(err.toString());\n            }\n\n            if (sanitizedState && sanitizedAction) {\n              return {\n                storeId: storeId,\n                action: sanitizedAction,\n                duration: duration,\n                stateDelta: sanitizedState\n              };\n            }\n            return null;\n          });\n        }\n\n        if (err) {\n          throw err;\n        }\n\n        return res;\n      };\n    };\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-redux/src/index.js\":\n/*!*******************************************************!*\\\n  !*** ./packages/@apphub:logrocket-redux/src/index.js ***!\n  \\*******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEnhancer = exports.createMiddleware = undefined;\n\nvar _createEnhancer = __webpack_require__(/*! ./createEnhancer */ \"./packages/@apphub:logrocket-redux/src/createEnhancer.js\");\n\nvar _createEnhancer2 = _interopRequireDefault(_createEnhancer);\n\nvar _createMiddleware = __webpack_require__(/*! ./createMiddleware */ \"./packages/@apphub:logrocket-redux/src/createMiddleware.js\");\n\nvar _createMiddleware2 = _interopRequireDefault(_createMiddleware);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.createMiddleware = _createMiddleware2.default;\nexports.createEnhancer = _createEnhancer2.default;\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-utils/src/TraceKit.js\":\n/*!**********************************************************!*\\\n  !*** ./packages/@apphub:logrocket-utils/src/TraceKit.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* eslint-disable */\n\n\n\n/*\n TraceKit - Cross brower stack traces - github.com/occ/TraceKit\n\n This was originally forked from github.com/occ/TraceKit, but has since been\n largely re-written and is now maintained as part of raven-js.  Tests for\n this are in test/vendor.\n\n MIT license\n*/\n\nvar TraceKit = {\n    collectWindowErrors: true,\n    debug: false\n};\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:Uncaught (?:exception: )?)?((?:Eval|Internal|Range|Reference|Syntax|Type|URI)Error): ?(.*)$/;\n\nfunction getLocationHref() {\n    if (typeof document === 'undefined' || typeof document.location === 'undefined') return '';\n\n    return document.location.href;\n}\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Remove all crash handlers.\n     */\n    function unsubscribeAll() {\n        uninstallGlobalHandler();\n        handlers = [];\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n            return;\n        }\n        for (var i in handlers) {\n            if (handlers.hasOwnProperty(i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} colNo The column number at which the error\n     * occurred.\n     * @param {?Error} ex The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, colNo, ex) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n            processLastException();\n        } else if (ex) {\n            // New chrome and blink send along a real error object\n            // Let's just report that like a normal error.\n            // See: https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror\n            stack = TraceKit.computeStackTrace(ex);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n                'url': url,\n                'line': lineNo,\n                'column': colNo\n            };\n\n            var name = undefined;\n            var msg = message; // must be new var or will modify original `arguments`\n            var groups;\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = UNKNOWN_FUNCTION;\n\n            stack = {\n                'name': name,\n                'message': msg,\n                'url': getLocationHref(),\n                'stack': [location]\n            };\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler() {\n        if (_onErrorHandlerInstalled) {\n            return;\n        }\n        _oldOnerrorHandler = _window.onerror;\n        _window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    function uninstallGlobalHandler() {\n        if (!_onErrorHandlerInstalled) {\n            return;\n        }\n        _window.onerror = _oldOnerrorHandler;\n        _onErrorHandlerInstalled = false;\n        _oldOnerrorHandler = undefined;\n    }\n\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @param {?boolean} rethrow If false, do not re-throw the exception.\n     * Only used for window.onerror to not cause an infinite loop of\n     * rethrowing.\n     */\n    function report(ex, rethrow) {\n        var args = _slice.call(arguments, 1);\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n                processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = args;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, stack.incomplete ? 2000 : 0);\n\n        if (rethrow !== false) {\n            throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n        }\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    report.uninstall = unsubscribeAll;\n    return report;\n}();\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n */\nTraceKit.computeStackTrace = function computeStackTraceWrapper() {\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (typeof ex.stack === 'undefined' || !ex.stack) return;\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|<anonymous>).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|resource|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if (parts = chrome.exec(lines[i])) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if (parts = winjs.exec(lines[i])) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if (parts = gecko.exec(lines[i])) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = UNKNOWN_FUNCTION;\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (!stack[0].column && typeof ex.columnNumber !== 'undefined') {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref(),\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = UNKNOWN_FUNCTION;\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if (parts = functionName.exec(curr.toString())) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n                try {\n                    item.func = parts.input.substring(0, parts.input.indexOf('{'));\n                } catch (e) {}\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            } else {\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref(),\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = depth == null ? 0 : +depth;\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (TraceKit.debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (TraceKit.debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref()\n        };\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n\n    return computeStackTrace;\n}();\n\nmodule.exports = TraceKit;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-utils/src/enhanceFunc.js\":\n/*!*************************************************************!*\\\n  !*** ./packages/@apphub:logrocket-utils/src/enhanceFunc.js ***!\n  \\*************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = enhanceFunc;\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n\nfunction enhanceFunc(obj, method, handler) {\n  var original = obj[method];\n\n  function shim() {\n    var res = void 0;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (original) {\n      res = original.apply(this, args);\n    }\n\n    handler.apply(this, args);\n    return res;\n  }\n\n  obj[method] = shim;\n\n  return function () {\n    obj[method] = original;\n  };\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:logrocket-utils/src/mapValues.js\":\n/*!***********************************************************!*\\\n  !*** ./packages/@apphub:logrocket-utils/src/mapValues.js ***!\n  \\***********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mapValues;\nfunction mapValues(obj, f) {\n  if (obj == null) {\n    return {};\n  }\n\n  var res = {};\n  Object.keys(obj).forEach(function (key) {\n    res[key] = f(obj[key]);\n  });\n  return res;\n}\n\n/***/ }),\n\n/***/ \"./packages/@apphub:now/src/index.js\":\n/*!*******************************************!*\\\n  !*** ./packages/@apphub:now/src/index.js ***!\n  \\*******************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nObject.defineProperty(exports,\"__esModule\",{value:true});var dateNow=Date.now.bind(Date);var loadTime=dateNow();exports.default=typeof performance!=='undefined'&&performance.now?performance.now.bind(performance):function(){return dateNow()-loadTime;};module.exports=exports['default'];\n\n/***/ }),\n\n/***/ \"./packages/logrocket/src/LogRocket.js\":\n/*!*********************************************!*\\\n  !*** ./packages/logrocket/src/LogRocket.js ***!\n  \\*********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MAX_QUEUE_SIZE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _logrocketNetwork = __webpack_require__(/*! @apphub/logrocket-network */ \"./packages/@apphub:logrocket-network/src/index.js\");\n\nvar _logrocketNetwork2 = _interopRequireDefault(_logrocketNetwork);\n\nvar _logrocketExceptions = __webpack_require__(/*! @apphub/logrocket-exceptions */ \"./packages/@apphub:logrocket-exceptions/src/index.js\");\n\nvar _logrocketConsole = __webpack_require__(/*! @apphub/logrocket-console */ \"./packages/@apphub:logrocket-console/src/index.js\");\n\nvar _logrocketConsole2 = _interopRequireDefault(_logrocketConsole);\n\nvar _logrocketRedux = __webpack_require__(/*! @apphub/logrocket-redux */ \"./packages/@apphub:logrocket-redux/src/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar MAX_QUEUE_SIZE = exports.MAX_QUEUE_SIZE = 1000;\n\nvar considerIngestServerOption = function considerIngestServerOption() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var ingestServer = _ref.ingestServer,\n      options = _objectWithoutProperties(_ref, ['ingestServer']);\n\n  if (ingestServer) {\n    return _extends({\n      serverURL: ingestServer + '/i',\n      statsURL: ingestServer + '/s'\n    }, options);\n  }\n\n  return options;\n};\n\nvar LogRocket = function () {\n  function LogRocket() {\n    var _this = this;\n\n    _classCallCheck(this, LogRocket);\n\n    this._buffer = [];\n\n    // TODO: tests for these exposed methods.\n    ['log', 'info', 'warn', 'error', 'debug'].forEach(function (method) {\n      _this[method] = function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        _this.addEvent('lr.core.LogEvent', function () {\n          var consoleOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          if (method === 'error' && consoleOptions.shouldAggregateConsoleErrors) {\n            _logrocketExceptions.Capture.captureMessage(_this, args[0], {}, true);\n          }\n\n          return {\n            logLevel: method.toUpperCase(),\n            args: args\n          };\n        }, { shouldCaptureStackTrace: true });\n      };\n    });\n    this._isInitialized = false;\n    this._installed = [];\n  }\n\n  _createClass(LogRocket, [{\n    key: 'addEvent',\n    value: function addEvent(type, getMessage) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var time = Date.now();\n      this._run(function (logger) {\n        logger.addEvent(type, getMessage, _extends({}, opts, {\n          timeOverride: time\n        }));\n      });\n    }\n  }, {\n    key: 'onLogger',\n    value: function onLogger(logger) {\n      this._logger = logger;\n\n      while (this._buffer.length > 0) {\n        var f = this._buffer.shift();\n        f(this._logger);\n      }\n    }\n  }, {\n    key: '_run',\n    value: function _run(f) {\n      if (this._isDisabled) {\n        return;\n      }\n\n      if (this._logger) {\n        f(this._logger);\n      } else {\n        if (this._buffer.length >= MAX_QUEUE_SIZE) {\n          this._isDisabled = true;\n          console.warn('LogRocket: script did not load. Check that you have a valid network connection.');\n          this.uninstall();\n          return;\n        }\n\n        this._buffer.push(f.bind(this));\n      }\n    }\n  }, {\n    key: 'init',\n    value: function init(appID, opts) {\n      if (!this._isInitialized) {\n        this._installed.push((0, _logrocketExceptions.registerExceptions)(this));\n        this._installed.push((0, _logrocketNetwork2.default)(this));\n        this._installed.push((0, _logrocketConsole2.default)(this));\n\n        this._isInitialized = true;\n\n        this._run(function (logger) {\n          logger.init(appID, considerIngestServerOption(opts));\n        });\n      }\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      this._run(function (logger) {\n        logger.start();\n      });\n    }\n  }, {\n    key: 'uninstall',\n    value: function uninstall() {\n      this._installed.forEach(function (f) {\n        return f();\n      });\n      this._buffer = [];\n\n      this._run(function (logger) {\n        logger.uninstall();\n      });\n    }\n  }, {\n    key: 'identify',\n    value: function identify(id, opts) {\n      this._run(function (logger) {\n        logger.identify(id, opts);\n      });\n    }\n  }, {\n    key: 'startNewSession',\n    value: function startNewSession() {\n      this._run(function (logger) {\n        logger.startNewSession();\n      });\n    }\n  }, {\n    key: 'track',\n    value: function track(customEventName) {\n      this._run(function (logger) {\n        logger.track(customEventName);\n      });\n    }\n  }, {\n    key: 'getSessionURL',\n    value: function getSessionURL(cb) {\n      if (typeof cb !== 'function') {\n        throw new Error('LogRocket: must pass callback to getSessionURL()');\n      }\n\n      this._run(function (logger) {\n        if (logger.getSessionURL) {\n          logger.getSessionURL(cb);\n        } else {\n          cb(logger.recordingURL);\n        }\n      });\n    }\n  }, {\n    key: 'getVersion',\n    value: function getVersion(cb) {\n      this._run(function (logger) {\n        cb(logger.version);\n      });\n    }\n  }, {\n    key: 'captureMessage',\n    value: function captureMessage(message) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _logrocketExceptions.Capture.captureMessage(this, message, options);\n    }\n  }, {\n    key: 'captureException',\n    value: function captureException(exception) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _logrocketExceptions.Capture.captureException(this, exception, options);\n    }\n  }, {\n    key: 'reduxEnhancer',\n    value: function reduxEnhancer() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return (0, _logrocketRedux.createEnhancer)(this, options);\n    }\n  }, {\n    key: 'reduxMiddleware',\n    value: function reduxMiddleware() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return (0, _logrocketRedux.createMiddleware)(this, options);\n    }\n  }, {\n    key: 'version',\n    get: function get() {\n      return this._logger && this._logger.version;\n    }\n  }, {\n    key: 'sessionURL',\n    get: function get() {\n      return this._logger && this._logger.recordingURL;\n    }\n  }, {\n    key: 'recordingURL',\n    get: function get() {\n      return this._logger && this._logger.recordingURL;\n    }\n  }, {\n    key: 'recordingID',\n    get: function get() {\n      return this._logger && this._logger.recordingID;\n    }\n  }, {\n    key: 'threadID',\n    get: function get() {\n      return this._logger && this._logger.threadID;\n    }\n  }, {\n    key: 'tabID',\n    get: function get() {\n      return this._logger && this._logger.tabID;\n    }\n  }, {\n    key: 'isDisabled',\n    get: function get() {\n      return !!(this._isDisabled || this._logger && this._logger._isDisabled);\n    }\n  }]);\n\n  return LogRocket;\n}();\n\nexports.default = LogRocket;\n\n/***/ }),\n\n/***/ \"./packages/logrocket/src/makeLogRocket.js\":\n/*!*************************************************!*\\\n  !*** ./packages/logrocket/src/makeLogRocket.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = makeLogRocket;\n\nvar _LogRocket = __webpack_require__(/*! ./LogRocket */ \"./packages/logrocket/src/LogRocket.js\");\n\nvar _LogRocket2 = _interopRequireDefault(_LogRocket);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar REACT_NATIVE_NOTICE = 'LogRocket does not yet support React Native.';\nvar makeNoopPolyfill = function makeNoopPolyfill() {\n  return {\n    init: function init() {},\n    uninstall: function uninstall() {},\n    log: function log() {},\n    info: function info() {},\n    warn: function warn() {},\n    error: function error() {},\n    debug: function debug() {},\n    addEvent: function addEvent() {},\n    identify: function identify() {},\n    start: function start() {},\n\n\n    get threadID() {\n      return null;\n    },\n    get recordingID() {\n      return null;\n    },\n    get recordingURL() {\n      return null;\n    },\n\n    reduxEnhancer: function reduxEnhancer() {\n      return function (store) {\n        return function () {\n          return store.apply(undefined, arguments);\n        };\n      };\n    },\n    reduxMiddleware: function reduxMiddleware() {\n      return function () {\n        return function (next) {\n          return function (action) {\n            return next(action);\n          };\n        };\n      };\n    },\n    track: function track() {},\n    getSessionURL: function getSessionURL() {},\n    getVersion: function getVersion() {},\n    startNewSession: function startNewSession() {},\n    onLogger: function onLogger() {},\n    setClock: function setClock() {},\n    captureMessage: function captureMessage() {},\n    captureException: function captureException() {}\n  };\n};\n\nfunction makeLogRocket() {\n  var getLogger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    throw new Error(REACT_NATIVE_NOTICE);\n  }\n\n  if (typeof window !== 'undefined') {\n    if (window._disableLogRocket) {\n      return makeNoopPolyfill();\n    }\n\n    if (window.MutationObserver && window.WeakMap) {\n      // Save window globals that we rely on.\n      window._lrMutationObserver = window.MutationObserver;\n\n      var instance = new _LogRocket2.default();\n      getLogger(instance);\n      return instance;\n    }\n  }\n\n  return makeNoopPolyfill();\n}\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ \"./packages/logrocket/src/module-npm.js\":\n/*!**********************************************!*\\\n  !*** ./packages/logrocket/src/module-npm.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _setup = __webpack_require__(/*! ./setup */ \"./packages/logrocket/src/setup.js\");\n\nvar _setup2 = _interopRequireDefault(_setup);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar instance = (0, _setup2.default)();\n\nexports.default = instance;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ \"./packages/logrocket/src/setup.js\":\n/*!*****************************************!*\\\n  !*** ./packages/logrocket/src/setup.js ***!\n  \\*****************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = setup;\n\nvar _makeLogRocket = __webpack_require__(/*! ./makeLogRocket */ \"./packages/logrocket/src/makeLogRocket.js\");\n\nvar _makeLogRocket2 = _interopRequireDefault(_makeLogRocket);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar CDN_SERVER_MAP = {\n  'cdn.logrocket.io': 'https://r.logrocket.io',\n  'cdn.lr-ingest.io': 'https://r.lr-ingest.io',\n  'cdn-staging.logrocket.io': 'https://staging-i.logrocket.io',\n  'cdn-staging.lr-ingest.io': 'https://staging-i.lr-ingest.io'\n};\n\nfunction setup() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var enterpriseServer = _ref.enterpriseServer,\n      _ref$sdkVersion = _ref.sdkVersion,\n      sdkVersion = _ref$sdkVersion === undefined ? \"1.0.14\" : _ref$sdkVersion,\n      opts = _objectWithoutProperties(_ref, ['enterpriseServer', 'sdkVersion']);\n\n  var scriptOrigin = undefined === 'staging' ? 'https://cdn-staging.logrocket.io' : 'https://cdn.logrocket.io';\n  var scriptIngest = void 0;\n\n  if (sdkVersion === 'script') {\n    try {\n      var scriptTag = document.currentScript;\n      var matches = scriptTag.src.match(/^(https?:\\/\\/([^\\\\]+))\\/.+$/);\n      var scriptHostname = matches && matches[2];\n\n      if (scriptHostname && CDN_SERVER_MAP[scriptHostname]) {\n        scriptOrigin = matches && matches[1];\n        scriptIngest = CDN_SERVER_MAP[scriptHostname];\n      }\n    } catch (_) {\n      /* no-op */\n    }\n  } else {\n    // NPM\n    scriptOrigin = undefined === 'staging' ? 'https://cdn-staging.lr-ingest.io' : 'https://cdn.lr-ingest.io';\n    scriptIngest = undefined === 'staging' ? 'https://staging-i.lr-ingest.io' : 'https://r.lr-ingest.io';\n  }\n\n  var sdkServer = opts.sdkServer || enterpriseServer;\n  var ingestServer = opts.ingestServer || enterpriseServer || scriptIngest;\n\n  var instance = (0, _makeLogRocket2.default)(function () {\n    var script = document.createElement('script');\n\n    if (ingestServer) {\n      if (typeof window.__SDKCONFIG__ === 'undefined') {\n        window.__SDKCONFIG__ = {};\n      }\n\n      window.__SDKCONFIG__.serverURL = ingestServer + '/i';\n      window.__SDKCONFIG__.statsURL = ingestServer + '/s';\n    }\n\n    if (sdkServer) {\n      script.src = sdkServer + '/logger.min.js';\n    } else if (window.__SDKCONFIG__ && window.__SDKCONFIG__.loggerURL) {\n      script.src = window.__SDKCONFIG__.loggerURL;\n    } else if (window._lrAsyncScript) {\n      script.src = window._lrAsyncScript;\n    } else {\n      script.src = scriptOrigin + '/logger-1.min.js';\n    }\n\n    script.async = true;\n    document.head.appendChild(script);\n    script.onload = function () {\n      // Brave browser: Advertises its user-agent as Chrome ##.##... then\n      // loads logger.min.js, but blocks the execution of the script\n      // causing _LRlogger to be undefined.  Let's make sure its there first.\n      if (typeof window._LRLogger === 'function') {\n        instance.onLogger(new window._LRLogger({\n          sdkVersion: sdkVersion\n        }));\n      } else {\n        console.warn('LogRocket: script execution has been blocked by a product or service.');\n        instance.uninstall();\n      }\n    };\n    script.onerror = function () {\n      console.warn('LogRocket: script could not load. Check that you have a valid network connection.');\n      instance.uninstall();\n    };\n  });\n\n  return instance;\n}\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 0:\n/*!****************************************************!*\\\n  !*** multi ./packages/logrocket/src/module-npm.js ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(/*! /root/project/packages/logrocket/src/module-npm.js */\"./packages/logrocket/src/module-npm.js\");\n\n\n/***/ })\n\n/******/ });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/logrocket/dist/build.umd.js\n");

/***/ })

}]);