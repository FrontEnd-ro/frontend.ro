{"version":3,"sources":["../../build/tracer.ts"],"names":["tracer","api","trace","getTracer","process","env","__NEXT_VERSION","traceFn","span","fn","withSpan","end","traceAsyncFn"],"mappings":"qHAAA,+D,mFAEO,KAAMA,CAAAA,MAAM,CAAGC,aAAIC,KAAJ,CAAUC,SAAV,CAAoB,MAApB,CAA4BC,OAAO,CAACC,GAAR,CAAYC,cAAxC,CAAf,C,sBAEA,QAASC,CAAAA,OAAT,CACLC,IADK,CAELC,EAFK,CAGU,CACf,MAAOT,CAAAA,MAAM,CAACU,QAAP,CAAgBF,IAAhB,CAAsB,IAAM,CACjC,GAAI,CACF,MAAOC,CAAAA,EAAE,EAAT,CACD,CAFD,OAEU,CACRD,IAAI,CAACG,GAAL,GACD,CACF,CANM,CAAP,CAOD,CAEM,QAASC,CAAAA,YAAT,CACLJ,IADK,CAELC,EAFK,CAGmB,CACxB,MAAOT,CAAAA,MAAM,CAACU,QAAP,CAAgBF,IAAhB,CAAsB,SAAY,CACvC,GAAI,CACF,MAAO,MAAMC,CAAAA,EAAE,EAAf,CACD,CAFD,OAEU,CACRD,IAAI,CAACG,GAAL,GACD,CACF,CANM,CAAP,CAOD","sourcesContent":["import api, { Span } from '@opentelemetry/api'\n\nexport const tracer = api.trace.getTracer('next', process.env.__NEXT_VERSION)\n\nexport function traceFn<T extends (...args: unknown[]) => ReturnType<T>>(\n  span: Span,\n  fn: T\n): ReturnType<T> {\n  return tracer.withSpan(span, () => {\n    try {\n      return fn()\n    } finally {\n      span.end()\n    }\n  })\n}\n\nexport function traceAsyncFn<T extends (...args: unknown[]) => ReturnType<T>>(\n  span: Span,\n  fn: T\n): Promise<ReturnType<T>> {\n  return tracer.withSpan(span, async () => {\n    try {\n      return await fn()\n    } finally {\n      span.end()\n    }\n  })\n}\n"]}