{"version":3,"sources":["../../cli/next-start.ts"],"names":["nextStart","argv","validArgs","Boolean","Number","String","args","error","code","message","console","log","process","exit","dir","_","port","then","app","Log","ready","prepare","catch","err"],"mappings":"AAAA;8DAEA,0BACA,8EACA,+EACA,0CAEA,gE,w4BAEA,KAAMA,CAAAA,SAAqB,CAAIC,IAAD,EAAU,CACtC,KAAMC,CAAAA,SAAmB,CAAG,CAC1B;AACA,SAAUC,OAFgB,CAG1B,SAAUC,MAHgB,CAI1B,aAAcC,MAJY,CAM1B;AACA,KAAM,QAPoB,CAQ1B,KAAM,QARoB,CAS1B,KAAM,YAToB,CAA5B,CAWA,GAAIC,CAAAA,IAAJ,CACA,GAAI,CACFA,IAAI,CAAG,mBAAIJ,SAAJ,CAAe,CAAED,IAAF,CAAf,CAAP,CACD,CAAC,MAAOM,KAAP,CAAc,CACd,GAAIA,KAAK,CAACC,IAAN,GAAe,oBAAnB,CAAyC,CACvC,MAAO,wBAAaD,KAAK,CAACE,OAAnB,CAA4B,CAA5B,CAAP,CACD,CACD,KAAMF,CAAAA,KAAN,CACD,CACD,GAAID,IAAI,CAAC,QAAD,CAAR,CAAoB,CAClBI,OAAO,CAACC,GAAR,CAAa;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfI,EAgBAC,OAAO,CAACC,IAAR,CAAa,CAAb,EACD,CAED,KAAMC,CAAAA,GAAG,CAAG,kBAAQR,IAAI,CAACS,CAAL,CAAO,CAAP,GAAa,GAArB,CAAZ,CACA,KAAMC,CAAAA,IAAI,CAAGV,IAAI,CAAC,QAAD,CAAJ,EAAkB,IAA/B,CACA,yBAAY,CAAEQ,GAAF,CAAZ,CAAqBE,IAArB,CAA2BV,IAAI,CAAC,YAAD,CAA/B,EACGW,IADH,CACQ,KAAOC,CAAAA,GAAP,EAAe,CACnBC,GAAG,CAACC,KAAJ,CACG,4BAA2Bd,IAAI,CAAC,YAAD,CAAJ,EAAsB,WAAY,IAAGU,IAAK,EADxE,EAGA,KAAME,CAAAA,GAAG,CAACG,OAAJ,EAAN,CACD,CANH,EAOGC,KAPH,CAOUC,GAAD,EAAS,CACdb,OAAO,CAACH,KAAR,CAAcgB,GAAd,EACAX,OAAO,CAACC,IAAR,CAAa,CAAb,EACD,CAVH,EAWD,CAtDD,C","sourcesContent":["#!/usr/bin/env node\n\nimport { resolve } from 'path'\nimport arg from 'next/dist/compiled/arg/index.js'\nimport startServer from '../server/lib/start-server'\nimport { printAndExit } from '../server/lib/utils'\nimport { cliCommand } from '../bin/next'\nimport * as Log from '../build/output/log'\n\nconst nextStart: cliCommand = (argv) => {\n  const validArgs: arg.Spec = {\n    // Types\n    '--help': Boolean,\n    '--port': Number,\n    '--hostname': String,\n\n    // Aliases\n    '-h': '--help',\n    '-p': '--port',\n    '-H': '--hostname',\n  }\n  let args: arg.Result<arg.Spec>\n  try {\n    args = arg(validArgs, { argv })\n  } catch (error) {\n    if (error.code === 'ARG_UNKNOWN_OPTION') {\n      return printAndExit(error.message, 1)\n    }\n    throw error\n  }\n  if (args['--help']) {\n    console.log(`\n      Description\n        Starts the application in production mode.\n        The application should be compiled with \\`next build\\` first.\n\n      Usage\n        $ next start <dir> -p <port>\n\n      <dir> represents the directory of the Next.js application.\n      If no directory is provided, the current directory will be used.\n\n      Options\n        --port, -p      A port number on which to start the application\n        --hostname, -H  Hostname on which to start the application\n        --help, -h      Displays this message\n    `)\n    process.exit(0)\n  }\n\n  const dir = resolve(args._[0] || '.')\n  const port = args['--port'] || 3000\n  startServer({ dir }, port, args['--hostname'])\n    .then(async (app) => {\n      Log.ready(\n        `started server on http://${args['--hostname'] || 'localhost'}:${port}`\n      )\n      await app.prepare()\n    })\n    .catch((err) => {\n      console.error(err)\n      process.exit(1)\n    })\n}\n\nexport { nextStart }\n"]}