{"version":3,"sources":["../../../lib/typescript/hasNecessaryDependencies.ts"],"names":["requiredPackages","file","pkg","hasNecessaryDependencies","baseDir","resolutions","Map","missingPackages","filter","p","set","path","join","_","length","resolvedTypeScript","get","packagesHuman","map","packagesCli","yarnLockFile","isYarn","catch","FatalTypeScriptError","chalk","bold","red","cyan"],"mappings":"+FAAA,oDACA,kDACA,0CACA,qDACA,kDACA,4D,mFAEA,KAAMA,CAAAA,gBAAgB,CAAG,CACvB,CAAEC,IAAI,CAAE,YAAR,CAAsBC,GAAG,CAAE,YAA3B,CADuB,CAEvB,CAAED,IAAI,CAAE,yBAAR,CAAmCC,GAAG,CAAE,cAAxC,CAFuB,CAGvB,CAAED,IAAI,CAAE,wBAAR,CAAkCC,GAAG,CAAE,aAAvC,CAHuB,CAAzB,CAUO,cAAeC,CAAAA,wBAAf,CACLC,OADK,CAE2B,CAChC,GAAIC,CAAAA,WAAW,CAAG,GAAIC,CAAAA,GAAJ,EAAlB,CAEA,KAAMC,CAAAA,eAAe,CAAGP,gBAAgB,CAACQ,MAAjB,CAAyBC,CAAD,EAAO,CACrD,GAAI,CACFJ,WAAW,CAACK,GAAZ,CAAgBD,CAAC,CAACP,GAAlB,CAAuB,mCAAeO,CAAC,CAACR,IAAjB,CAAuBU,cAAKC,IAAL,CAAUR,OAAV,CAAmB,GAAnB,CAAvB,CAAvB,EACA,MAAO,MAAP,CACD,CAAC,MAAOS,CAAP,CAAU,CACV,MAAO,KAAP,CACD,CACF,CAPuB,CAAxB,CASA,GAAIN,eAAe,CAACO,MAAhB,CAAyB,CAA7B,CAAgC,CAC9B,MAAO,CAAEC,kBAAkB,CAAEV,WAAW,CAACW,GAAZ,CAAgB,YAAhB,CAAtB,CAAP,CACD,CAED,KAAMC,CAAAA,aAAa,CAAG,wCAAmBV,eAAe,CAACW,GAAhB,CAAqBT,CAAD,EAAOA,CAAC,CAACP,GAA7B,CAAnB,CAAtB,CACA,KAAMiB,CAAAA,WAAW,CAAGZ,eAAe,CAACW,GAAhB,CAAqBT,CAAD,EAAOA,CAAC,CAACP,GAA7B,EAAkCU,IAAlC,CAAuC,GAAvC,CAApB,CAEA,KAAMQ,CAAAA,YAAY,CAAGT,cAAKC,IAAL,CAAUR,OAAV,CAAmB,WAAnB,CAArB,CACA,KAAMiB,CAAAA,MAAM,CAAG,KAAM,2BAAWD,YAAX,EAAyBE,KAAzB,CAA+B,IAAM,KAArC,CAArB,CAEA,KAAM,IAAIC,2CAAJ,CACJC,eAAMC,IAAN,CAAWC,GAAX,CACG,kGADH,EAGE,MAHF,CAIEF,eAAMC,IAAN,CAAY,kBAAiBD,eAAMC,IAAN,CAAWR,aAAX,CAA0B,cAAvD,CAJF,CAKE,MALF,CAMG,KAAIO,eAAMC,IAAN,CAAWE,IAAX,CACH,CAACN,MAAM,CAAG,gBAAH,CAAsB,wBAA7B,EACE,GADF,CAEEF,WAHC,CAIH,EAVJ,CAWE,MAXF,CAYEK,eAAMC,IAAN,CACE,8DACED,eAAMG,IAAN,CAAW,eAAX,CADF,CAEE,kFAHJ,CAZF,CAiBE,IAlBE,CAAN,CAoBD","sourcesContent":["import chalk from 'chalk'\nimport path from 'path'\nimport { fileExists } from '../file-exists'\nimport { getOxfordCommaList } from '../oxford-comma-list'\nimport { resolveRequest } from '../resolve-request'\nimport { FatalTypeScriptError } from './FatalTypeScriptError'\n\nconst requiredPackages = [\n  { file: 'typescript', pkg: 'typescript' },\n  { file: '@types/react/index.d.ts', pkg: '@types/react' },\n  { file: '@types/node/index.d.ts', pkg: '@types/node' },\n]\n\nexport type NecessaryDependencies = {\n  resolvedTypeScript: string\n}\n\nexport async function hasNecessaryDependencies(\n  baseDir: string\n): Promise<NecessaryDependencies> {\n  let resolutions = new Map<string, string>()\n\n  const missingPackages = requiredPackages.filter((p) => {\n    try {\n      resolutions.set(p.pkg, resolveRequest(p.file, path.join(baseDir, '/')))\n      return false\n    } catch (_) {\n      return true\n    }\n  })\n\n  if (missingPackages.length < 1) {\n    return { resolvedTypeScript: resolutions.get('typescript')! }\n  }\n\n  const packagesHuman = getOxfordCommaList(missingPackages.map((p) => p.pkg))\n  const packagesCli = missingPackages.map((p) => p.pkg).join(' ')\n\n  const yarnLockFile = path.join(baseDir, 'yarn.lock')\n  const isYarn = await fileExists(yarnLockFile).catch(() => false)\n\n  throw new FatalTypeScriptError(\n    chalk.bold.red(\n      `It looks like you're trying to use TypeScript but do not have the required package(s) installed.`\n    ) +\n      '\\n\\n' +\n      chalk.bold(`Please install ${chalk.bold(packagesHuman)} by running:`) +\n      '\\n\\n' +\n      `\\t${chalk.bold.cyan(\n        (isYarn ? 'yarn add --dev' : 'npm install --save-dev') +\n          ' ' +\n          packagesCli\n      )}` +\n      '\\n\\n' +\n      chalk.bold(\n        'If you are not trying to use TypeScript, please remove the ' +\n          chalk.cyan('tsconfig.json') +\n          ' file from your package root (and any TypeScript files in your pages directory).'\n      ) +\n      '\\n'\n  )\n}\n"]}