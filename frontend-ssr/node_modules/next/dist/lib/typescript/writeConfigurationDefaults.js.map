{"version":3,"sources":["../../../lib/typescript/writeConfigurationDefaults.ts"],"names":["getDesiredCompilerOptions","ts","o","target","suggested","lib","allowJs","skipLibCheck","strict","forceConsistentCasingInFileNames","noEmit","esModuleInterop","value","reason","module","parsedValue","ModuleKind","ESNext","parsedValues","ES2020","CommonJS","AMD","moduleResolution","ModuleResolutionKind","NodeJs","resolveJsonModule","isolatedModules","jsx","JsxEmit","Preserve","getRequiredConfiguration","res","desiredCompilerOptions","optionKey","Object","keys","ev","writeConfigurationDefaults","tsConfigPath","isFirstTimeSetup","fs","writeFile","os","EOL","effectiveConfiguration","userTsConfigContent","readFile","encoding","userTsConfig","CommentJson","parse","compilerOptions","suggestedActions","requiredActions","check","options","push","chalk","cyan","bold","includes","_","include","exclude","length","stringify","console","log","green","forEach","action"],"mappings":"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","sourcesContent":["import { promises as fs } from 'fs'\nimport chalk from 'chalk'\nimport * as CommentJson from 'next/dist/compiled/comment-json'\nimport os from 'os'\nimport { getTypeScriptConfiguration } from './getTypeScriptConfiguration'\n\ntype DesiredCompilerOptionsShape = {\n  [key: string]:\n    | { suggested: any }\n    | {\n        parsedValue?: any\n        parsedValues?: Array<any>\n        value: any\n        reason: string\n      }\n}\n\nfunction getDesiredCompilerOptions(\n  ts: typeof import('typescript')\n): DesiredCompilerOptionsShape {\n  const o: DesiredCompilerOptionsShape = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    target: { suggested: 'es5' },\n    lib: { suggested: ['dom', 'dom.iterable', 'esnext'] },\n    allowJs: { suggested: true },\n    skipLibCheck: { suggested: true },\n    strict: { suggested: false },\n    forceConsistentCasingInFileNames: { suggested: true },\n    noEmit: { suggested: true },\n\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    esModuleInterop: {\n      value: true,\n      reason: 'requirement for babel',\n    },\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      // All of these values work:\n      parsedValues: [\n        ts.ModuleKind.ES2020,\n        ts.ModuleKind.ESNext,\n        ts.ModuleKind.CommonJS,\n        ts.ModuleKind.AMD,\n      ],\n      value: 'esnext',\n      reason: 'for dynamic import() support',\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution',\n    },\n    resolveJsonModule: { value: true, reason: 'to match webpack resolution' },\n    isolatedModules: {\n      value: true,\n      reason: 'requirement for babel',\n    },\n    jsx: {\n      parsedValue: ts.JsxEmit.Preserve,\n      value: 'preserve',\n      reason: 'next.js implements its own optimized jsx transform',\n    },\n  }\n\n  return o\n}\n\nexport function getRequiredConfiguration(\n  ts: typeof import('typescript')\n): Partial<import('typescript').CompilerOptions> {\n  const res: Partial<import('typescript').CompilerOptions> = {}\n\n  const desiredCompilerOptions = getDesiredCompilerOptions(ts)\n  for (const optionKey of Object.keys(desiredCompilerOptions)) {\n    const ev = desiredCompilerOptions[optionKey]\n    if (!('value' in ev)) {\n      continue\n    }\n    res[optionKey] = ev.parsedValue ?? ev.value\n  }\n\n  return res\n}\n\nexport async function writeConfigurationDefaults(\n  ts: typeof import('typescript'),\n  tsConfigPath: string,\n  isFirstTimeSetup: boolean\n): Promise<void> {\n  if (isFirstTimeSetup) {\n    await fs.writeFile(tsConfigPath, '{}' + os.EOL)\n  }\n\n  const desiredCompilerOptions = getDesiredCompilerOptions(ts)\n  const effectiveConfiguration = await getTypeScriptConfiguration(\n    ts,\n    tsConfigPath\n  )\n\n  const userTsConfigContent = await fs.readFile(tsConfigPath, {\n    encoding: 'utf8',\n  })\n  const userTsConfig = CommentJson.parse(userTsConfigContent)\n  if (userTsConfig.compilerOptions == null) {\n    userTsConfig.compilerOptions = {}\n    isFirstTimeSetup = true\n  }\n\n  const suggestedActions: string[] = []\n  const requiredActions: string[] = []\n  for (const optionKey of Object.keys(desiredCompilerOptions)) {\n    const check = desiredCompilerOptions[optionKey]\n    if ('suggested' in check) {\n      if (!(optionKey in effectiveConfiguration.options)) {\n        userTsConfig.compilerOptions[optionKey] = check.suggested\n        suggestedActions.push(\n          chalk.cyan(optionKey) + ' was set to ' + chalk.bold(check.suggested)\n        )\n      }\n    } else if ('value' in check) {\n      const ev = effectiveConfiguration.options[optionKey]\n      if (\n        !('parsedValues' in check\n          ? check.parsedValues?.includes(ev)\n          : 'parsedValue' in check\n          ? check.parsedValue === ev\n          : check.value === ev)\n      ) {\n        userTsConfig.compilerOptions[optionKey] = check.value\n        requiredActions.push(\n          chalk.cyan(optionKey) +\n            ' was set to ' +\n            chalk.bold(check.value) +\n            ` (${check.reason})`\n        )\n      }\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const _: never = check\n    }\n  }\n\n  if (userTsConfig.include == null) {\n    userTsConfig.include = ['next-env.d.ts', '**/*.ts', '**/*.tsx']\n    suggestedActions.push(\n      chalk.cyan('include') +\n        ' was set to ' +\n        chalk.bold(`['next-env.d.ts', '**/*.ts', '**/*.tsx']`)\n    )\n  }\n\n  if (userTsConfig.exclude == null) {\n    userTsConfig.exclude = ['node_modules']\n    suggestedActions.push(\n      chalk.cyan('exclude') + ' was set to ' + chalk.bold(`['node_modules']`)\n    )\n  }\n\n  if (suggestedActions.length < 1 && requiredActions.length < 1) {\n    return\n  }\n\n  await fs.writeFile(\n    tsConfigPath,\n    CommentJson.stringify(userTsConfig, null, 2) + os.EOL\n  )\n\n  if (isFirstTimeSetup) {\n    console.log(\n      chalk.green(\n        `We detected TypeScript in your project and created a ${chalk.bold(\n          'tsconfig.json'\n        )} file for you.`\n      ) + '\\n'\n    )\n    return\n  }\n\n  console.log(\n    chalk.green(\n      `We detected TypeScript in your project and reconfigured your ${chalk.bold(\n        'tsconfig.json'\n      )} file for you.`\n    ) + '\\n'\n  )\n  if (suggestedActions.length) {\n    console.log(\n      `The following suggested values were added to your ${chalk.cyan(\n        'tsconfig.json'\n      )}. These values ${chalk.bold(\n        'can be changed'\n      )} to fit your project's needs:\\n`\n    )\n\n    suggestedActions.forEach((action) => console.log(`\\t- ${action}`))\n\n    console.log('')\n  }\n\n  if (requiredActions.length) {\n    console.log(\n      `The following ${chalk.bold(\n        'mandatory changes'\n      )} were made to your ${chalk.cyan('tsconfig.json')}:\\n`\n    )\n\n    requiredActions.forEach((action) => console.log(`\\t- ${action}`))\n\n    console.log('')\n  }\n}\n"]}