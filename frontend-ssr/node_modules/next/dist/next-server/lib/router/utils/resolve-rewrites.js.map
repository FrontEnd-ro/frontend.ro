{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","resolveRewrites","asPath","pages","rewrites","query","resolveHref","locales","includes","pathname","rewrite","matcher","source","params","destination","destRes","parsedDestination","Object","assign","fsPathname","resolvedHref"],"mappings":"qEACA,+DACA,iFAEA,mFACA,qE,mFAEA,KAAMA,CAAAA,kBAAkB,CAAG,uBAAU,IAAV,CAA3B,CAEe,QAASC,CAAAA,eAAT,CACbC,MADa,CAEbC,KAFa,CAGbC,QAHa,CAIbC,KAJa,CAKbC,WALa,CAMbC,OANa,CAOb,CACA,GAAI,CAACJ,KAAK,CAACK,QAAN,CAAe,6CAAoBN,MAApB,CAA4BK,OAA5B,EAAqCE,QAApD,CAAL,CAAoE,CAClE,IAAK,KAAMC,CAAAA,OAAX,GAAsBN,CAAAA,QAAtB,CAAgC,CAC9B,KAAMO,CAAAA,OAAO,CAAGX,kBAAkB,CAACU,OAAO,CAACE,MAAT,CAAlC,CACA,KAAMC,CAAAA,MAAM,CAAGF,OAAO,CAACT,MAAD,CAAtB,CAEA,GAAIW,MAAJ,CAAY,CACV,GAAI,CAACH,OAAO,CAACI,WAAb,CAA0B,CACxB;AACA,MACD,CACD,KAAMC,CAAAA,OAAO,CAAG,gCACdL,OAAO,CAACI,WADM,CAEdD,MAFc,CAGdR,KAHc,CAId,IAJc,CAAhB,CAMAH,MAAM,CAAGa,OAAO,CAACC,iBAAR,CAA0BP,QAAnC,CACAQ,MAAM,CAACC,MAAP,CAAcb,KAAd,CAAqBU,OAAO,CAACC,iBAAR,CAA0BX,KAA/C,EAEA,KAAMc,CAAAA,UAAU,CAAG,6CACjB,oDAAwBjB,MAAxB,CADiB,CAEjBK,OAFiB,EAGjBE,QAHF,CAKA,GAAIN,KAAK,CAACK,QAAN,CAAeW,UAAf,CAAJ,CAAgC,CAC9BjB,MAAM,CAAGiB,UAAT,CACA;AACA;AACA,MACD,CAED;AACA,KAAMC,CAAAA,YAAY,CAAGd,WAAW,CAACa,UAAD,CAAhC,CAEA,GAAIC,YAAY,GAAKlB,MAAjB,EAA2BC,KAAK,CAACK,QAAN,CAAeY,YAAf,CAA/B,CAA6D,CAC3DlB,MAAM,CAAGiB,UAAT,CACA,MACD,CACF,CACF,CACF,CACD,MAAOjB,CAAAA,MAAP,CACD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport prepareDestination from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\nimport { normalizeLocalePath } from '../../i18n/normalize-locale-path'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  rewrites: Rewrite[],\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string,\n  locales?: string[]\n) {\n  if (!pages.includes(normalizeLocalePath(asPath, locales).pathname)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source)\n      const params = matcher(asPath)\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break\n        }\n        const destRes = prepareDestination(\n          rewrite.destination,\n          params,\n          query,\n          true\n        )\n        asPath = destRes.parsedDestination.pathname!\n        Object.assign(query, destRes.parsedDestination.query)\n\n        const fsPathname = normalizeLocalePath(\n          removePathTrailingSlash(asPath),\n          locales\n        ).pathname\n\n        if (pages.includes(fsPathname)) {\n          asPath = fsPathname\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          break\n        }\n\n        // check if we match a dynamic-route, if so we break the rewrites chain\n        const resolvedHref = resolveHref(fsPathname)\n\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          asPath = fsPathname\n          break\n        }\n      }\n    }\n  }\n  return asPath\n}\n"]}