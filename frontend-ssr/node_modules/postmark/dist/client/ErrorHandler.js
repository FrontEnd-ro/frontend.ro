"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Errors = require("./models/client/Errors");
/**
 * Handles general errors and all client request errors.
 * Client response errors are classified so that proper response error is generated.
 */
var ErrorHandler = /** @class */ (function () {
    function ErrorHandler() {
    }
    /**
     * Process callback function for HTTP request.
     *
     * @param error - request error that needs to be transformed to proper Postmark error.
     *
     * @return {PostmarkError} - formatted Postmark error
     */
    ErrorHandler.prototype.buildRequestError = function (error) {
        var response = error.response;
        if (response !== undefined) {
            return this.buildErrorForResponse(response, error.message);
        }
        else if (error.message !== undefined) {
            return this.buildGeneralError(error.message);
        }
        else {
            return this.buildGeneralError(JSON.stringify(error, Object.getOwnPropertyNames(error)));
        }
    };
    /**
     * Build general Postmark error.
     *
     * @param errorMessage - error message that needs to be identified and transformed to proper Postmark error.
     *
     * @returns properly formatted Postmark error.
     */
    ErrorHandler.prototype.buildGeneralError = function (errorMessage) {
        return new Errors.PostmarkError(errorMessage);
    };
    /**
     * Build Postmark error based on response from http client.
     *
     * @param {AxiosResponse} response - request response used to transform to Postmark error.
     * @return {PostmarkError} - formatted Postmark error
     */
    ErrorHandler.prototype.buildErrorForResponse = function (response, errorMessage) {
        var data = response.data;
        var errorCode = this.retrieveDefaultOrValue(0, data.ErrorCode);
        var status = this.retrieveDefaultOrValue(0, response.status);
        var message = this.retrieveDefaultOrValue(errorMessage, data.Message);
        return this.buildRequestErrorByStatus(message, errorCode, status);
    };
    ErrorHandler.prototype.retrieveDefaultOrValue = function (defaultValue, data) {
        return (data === undefined) ? defaultValue : data;
    };
    /**
     * Build Postmark error based on HTTP request status.
     *
     * @param error - http request library error, that will be transformed to Postmark error.
     *
     * @returns properly formatted Postmark error.
     */
    ErrorHandler.prototype.buildRequestErrorByStatus = function (errorMessage, errorCode, errorStatusCode) {
        switch (errorStatusCode) {
            case 401:
                return new Errors.InvalidAPIKeyError(errorMessage, errorCode, errorStatusCode);
            case 404:
                return new Errors.PostmarkError(errorMessage, errorCode, errorStatusCode);
            case 422:
                return new Errors.ApiInputError(errorMessage, errorCode, errorStatusCode);
            case 500:
                return new Errors.InternalServerError(errorMessage, errorCode, errorStatusCode);
            case 503:
                return new Errors.ServiceUnavailablerError(errorMessage, errorCode, errorStatusCode);
            default:
                return new Errors.UnknownError(errorMessage, errorCode, errorStatusCode);
        }
    };
    return ErrorHandler;
}());
exports.ErrorHandler = ErrorHandler;
//# sourceMappingURL=ErrorHandler.js.map